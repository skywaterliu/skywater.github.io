<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Buildah入门</title>
    <url>/2021/04/16/Buildah%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h2 id="Buildah"><a href="#Buildah" class="headerlink" title="Buildah"></a>Buildah</h2><p>buildah是Redhat旗下的一款专门构建工具，与Docker相比，优势在于：</p>
<ul>
<li>环境并不需要daemon（守护进程）</li>
<li>不需要Dockerfile但也可以兼容Dockerfile</li>
<li>可以将容器目录挂载到本地，通过直接操作本地目录来操作容器内容</li>
<li>可以创建更小的镜像</li>
</ul>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>构建机器需要安装buildah，参见<a href="https://github.com/containers/buildah/blob/main/install.md">https://github.com/containers/buildah/blob/main/install.md</a></p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="Dockerfile方式"><a href="#Dockerfile方式" class="headerlink" title="Dockerfile方式"></a>Dockerfile方式</h4><p>buildah兼容Dockerfile，原先使用Dockerfile的项目并不需要什么迁移成本。对于新项目，推荐以下构建方式。</p>
<h5 id="添加layers配置"><a href="#添加layers配置" class="headerlink" title="添加layers配置"></a>添加layers配置</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.focustech.naja.web.mvc.NajaMvcServerMain<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layers</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span>$&#123;project.basedir&#125;/layers.xml<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="添加layers-xml"><a href="#添加layers-xml" class="headerlink" title="添加layers.xml"></a>添加layers.xml</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">layers</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/boot/layers&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/boot/layers</span></span></span><br><span class="line"><span class="string"><span class="tag">                          https://www.springframework.org/schema/boot/layers/layers-2.6.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;application&gt;标签中的内容定义了所有应用代码内容应该被如何分配到各个layer中，遵循Ant-style --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;into&gt;标签定义标签内容需要被添加到指定layer中 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">into</span> <span class="attr">layer</span>=<span class="string">&quot;spring-boot-loader&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>org/springframework/boot/loader/**<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">into</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">into</span> <span class="attr">layer</span>=<span class="string">&quot;application&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;dependencies&gt;标签中的内容定义了所有dependencies应该被如何分配到各个layer中，遵循group:artifact[:version]模式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">into</span> <span class="attr">layer</span>=<span class="string">&quot;application&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includeModuleDependencies</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">into</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">into</span> <span class="attr">layer</span>=<span class="string">&quot;snapshot-dependencies&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 对应maven坐标 group:artifact[:version]，如果需要限定SNAPSHOT则加载最后 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>*:*:*SNAPSHOT<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">into</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">into</span> <span class="attr">layer</span>=<span class="string">&quot;dependencies&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- layerOrder中需要包含&lt;application&gt;与&lt;dependencies&gt;中出现过的所有layer属性值 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- layerOrder中layer出现的顺序很重要，出现变化概率越低的在最上面，而越高的则在最下面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">layerOrder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layer</span>&gt;</span>dependencies<span class="tag">&lt;/<span class="name">layer</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layer</span>&gt;</span>spring-boot-loader<span class="tag">&lt;/<span class="name">layer</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layer</span>&gt;</span>snapshot-dependencies<span class="tag">&lt;/<span class="name">layer</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layer</span>&gt;</span>application<span class="tag">&lt;/<span class="name">layer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">layerOrder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">layers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="添加multi-stage-Dockerfile"><a href="#添加multi-stage-Dockerfile" class="headerlink" title="添加multi-stage Dockerfile"></a>添加multi-stage Dockerfile</h5><p>细节配置可以根据项目需要进行调整。主要关注第二个FROM中的环境变量配置，暴露的端口，以及最后的ENTRYPOINT(CMD)，根据需要修改。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM openjdk:8-jdk-alpine as builder</span><br><span class="line"></span><br><span class="line">WORKDIR app</span><br><span class="line">ARG JAR_FILE=./target/*.jar</span><br><span class="line">COPY $&#123;JAR_FILE&#125; /app/app.jar</span><br><span class="line">RUN java -Djarmode=layertools -jar app.jar extract &amp;&amp; rm app.jar</span><br><span class="line"></span><br><span class="line">FROM openjdk:8-jdk-alpine</span><br><span class="line"></span><br><span class="line">LABEL maintainer=&quot;xxx&quot;</span><br><span class="line"></span><br><span class="line">ENV TZ=Asia/Shanghai</span><br><span class="line">RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime &amp;&amp; echo $TZ &gt; /etc/timezone</span><br><span class="line">ENV JAVA_OPTS=&quot;-Xms128m -Xmx256m&quot;</span><br><span class="line"></span><br><span class="line">WORKDIR app</span><br><span class="line"></span><br><span class="line">COPY --from=builder /app/dependencies/ ./</span><br><span class="line">COPY --from=builder /app/snapshot-dependencies/ ./</span><br><span class="line">COPY --from=builder /app/spring-boot-loader/ ./</span><br><span class="line">COPY --from=builder /app/application/ ./</span><br><span class="line"></span><br><span class="line">EXPOSE 8080</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [&quot;sh&quot;, &quot;-c&quot;, &quot;java $JAVA_OPTS org.springframework.boot.loader.JarLauncher&quot;]</span><br></pre></td></tr></table></figure>

<h4 id="bash脚本方式"><a href="#bash脚本方式" class="headerlink" title="bash脚本方式"></a>bash脚本方式</h4><p>如果采用bash方式，则不适用分层构建（multi-stage），原因是Dockerfile每句指令将生成新Layer，可以作为缓存，而bash则是流水线式，不支持缓存。</p>
<p>构建语句与Dockerfile类似，具体语法可参见<a href="https://github.com/containers/buildah/tree/main/docs%EF%BC%8C%E4%B8%8B%E9%9D%A2%E6%98%AF%E5%9F%BA%E6%9C%AC%E7%A4%BA%E4%BE%8B%E3%80%82">https://github.com/containers/buildah/tree/main/docs，下面是基本示例。</a></p>
<p><strong>新建buildah.sh</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取基础容器</span></span><br><span class="line">container=$(buildah from openjdk:8-jdk-alpine)</span><br><span class="line">buildah config --label maintainer=<span class="string">&quot;xxx&quot;</span> <span class="variable">$containter</span></span><br><span class="line"><span class="comment"># 设置容器内容</span></span><br><span class="line">buildah run <span class="variable">$container</span> -- /bin/sh -c <span class="string">&#x27;mkdir /tmp/logs&#x27;</span></span><br><span class="line">buildah config --workingdir app <span class="variable">$container</span></span><br><span class="line">buildah copy <span class="variable">$container</span> <span class="string">&#x27;./target/*.jar&#x27;</span> <span class="string">&#x27;/app/app.jar&#x27;</span></span><br><span class="line"><span class="comment"># 设置暴露端口</span></span><br><span class="line">buildah config --port 8080 <span class="variable">$container</span></span><br><span class="line"><span class="comment"># 初始指令</span></span><br><span class="line">buildah config --entrypoint [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;app.jar&quot;</span>]</span><br><span class="line"><span class="comment"># 提交本地容器</span></span><br><span class="line">buildah commit <span class="variable">$container</span> buildah-springboot-demo:v1</span><br><span class="line">buildah <span class="built_in">rm</span> <span class="variable">$container</span></span><br></pre></td></tr></table></figure>

<h5 id="对multi-stage的支持"><a href="#对multi-stage的支持" class="headerlink" title="对multi-stage的支持"></a>对multi-stage的支持</h5><p>如果原先项目是分层打包的（maven配置了layers为true），则可以采用以下bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 抽取多层layers</span></span><br><span class="line">builder_ctx=$(buildah from openjdk:8-jdk-alpine)</span><br><span class="line">builder_mnt=$(buildah mount <span class="variable">$builder_ctx</span>)</span><br><span class="line">buildah config --label maintainer=<span class="string">&quot;xxx&quot;</span> <span class="variable">$builder_ctx</span></span><br><span class="line">buildah config --workingdir app <span class="variable">$builder_ctx</span></span><br><span class="line">JAR_FILE=<span class="string">&#x27;./target/*.jar&#x27;</span></span><br><span class="line">buildah copy <span class="variable">$builder_ctx</span> <span class="variable">$JAR_FILE</span> <span class="string">&#x27;/app/app.jar&#x27;</span></span><br><span class="line">buildah run <span class="variable">$builder_ctx</span> -- /bin/sh -c <span class="string">&#x27;java -Djarmode=layertools -jar app.jar extract &amp;&amp; rm app.jar&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建容器，设置环境信息，并从builder容器拷贝layers文件信息</span></span><br><span class="line">application_ctx=$(buildah from openjdk:8-jdk-alpine)</span><br><span class="line">application_mnt=$(buildah mount <span class="variable">$application_ctx</span>)</span><br><span class="line">buildah config --workingdir app <span class="variable">$application_ctx</span></span><br><span class="line">buildah config --<span class="built_in">env</span> TZ=Asia/Shanghai <span class="variable">$application_ctx</span></span><br><span class="line">buildah run <span class="variable">$application_ctx</span> -- /bin/sh -c <span class="string">&#x27;ln -snf /usr/share/zoneinfo/$TZ /etc/localtime &amp;&amp; echo $TZ &gt; /etc/timezone&#x27;</span></span><br><span class="line">buildah config --<span class="built_in">env</span> JAVA_OPTS=<span class="string">&#x27;-Xms128m -Xmx256m&#x27;</span> <span class="variable">$application_ctx</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span> -rf <span class="variable">$builder_mnt</span>/app/dependencies/ <span class="variable">$application_mnt</span>/app</span><br><span class="line"><span class="built_in">cp</span> -rf <span class="variable">$builder_mnt</span>/app/snapshot-dependencies/ <span class="variable">$application_mnt</span>/app</span><br><span class="line"><span class="built_in">cp</span> -rf <span class="variable">$builder_mnt</span>/app/spring-boot-loader/ <span class="variable">$application_mnt</span>/app</span><br><span class="line"><span class="built_in">cp</span> -rf <span class="variable">$builder_mnt</span>/app/application/ <span class="variable">$application_mnt</span>/app</span><br><span class="line"><span class="comment"># 设置暴露的端口</span></span><br><span class="line">buildah config --port 8080 <span class="variable">$application_ctx</span></span><br><span class="line"></span><br><span class="line">buildah config --entrypoint [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;java <span class="variable">$JAVA_OPTS</span> org.springframework.boot.loader.JarLauncher&quot;</span>]</span><br><span class="line"><span class="comment"># 删除临时容器以及挂载目录</span></span><br><span class="line">buildah unmount <span class="variable">$builder_ctx</span> <span class="variable">$application_ctx</span></span><br><span class="line">buildah commit <span class="variable">$application_ctx</span> buildah/layer-springboot-demo:v2</span><br><span class="line">buildah <span class="built_in">rm</span> <span class="variable">$builder_ctx</span> <span class="variable">$application_ctx</span></span><br></pre></td></tr></table></figure>

<h2 id="镜像推送"><a href="#镜像推送" class="headerlink" title="镜像推送"></a>镜像推送</h2><p>写了个打包推送的脚本package-oci.sh</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &quot;--------- start ---------&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">env</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">JAVA_HOME=<span class="variable">$JAVA_HOME</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">maven_home=<span class="variable">$MAVEN_HOME</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">export</span> MAVEN_HOME=<span class="variable">$&#123;maven_home&#125;</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">export</span> PATH=<span class="variable">$MAVEN_HOME</span>/bin:<span class="variable">$PATH</span></span></span><br><span class="line">IS_DEBUG=false</span><br><span class="line">REMOTE_REGISTRY=$&#123;REMOTE_IMAGE_REGISTRY:-docker://127.0.0.1:5000&#125;</span><br><span class="line"></span><br><span class="line">[ $IS_DEBUG = &quot;true&quot; ] &amp;&amp; echo original parameters=[$@]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">project path <span class="keyword">for</span> being packaged</span></span><br><span class="line">PROJECT_HOME=&quot;.&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">to store <span class="built_in">log</span> files and other temp cache</span></span><br><span class="line">TMP_DIR=&quot;&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">bash script <span class="built_in">log</span> path</span></span><br><span class="line">LOG_FILE=&quot;&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">which</span> strategy will be used to build the image</span></span><br><span class="line">PACKAGE_STRATEGY=&quot;Dockerfile&quot; # or &quot;buildah&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">image info. like nginx:v1</span></span><br><span class="line">IMAGE_INFO=&quot;&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">build file path, often be a Dockerfile or a bash script</span></span><br><span class="line">BUILD_FILE=&quot;&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">do</span> you need to push the image to the remote repository</span></span><br><span class="line">PUSH_FLAG=false</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">do</span> you need to run `mvn clean package` before build image</span></span><br><span class="line">PACKAGE_FLAG=true</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">do</span> you need to build image</span></span><br><span class="line">BUILD_FLAG=true</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">username:password</span></span><br><span class="line">CREDS=&quot;&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="function"><span class="title">logPrint</span></span>() &#123;</span></span><br><span class="line">  message=&quot;$1&quot;</span><br><span class="line">  echo &quot;$(date +&#x27;%F %T&#x27;) $&#123;message&#125;&quot; &gt;&gt;$LOG_FILE</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">show_help() &#123;</span><br><span class="line">  echo &quot;执行打包&amp;发布镜像&quot;</span><br><span class="line">  echo &quot;./package-opt.sh [options]...&quot;</span><br><span class="line">  echo &quot;-p, --project-home                    项目根目录，如/home/projects/springboot-demo&quot;</span><br><span class="line">  echo &quot;-i, --image-info                      镜像信息，包含镜像名以及版本，格式同docker，[imageName:version]，如nginx:v1&quot;</span><br><span class="line">  echo &quot;-s, --package-strategy                打包策略接受参数[ Dockerfile(default) | buildah ]，是使用Dockerfile的方式，还是使用buildah的方式。如果是Dockerfile方式，项目根目录下需要有Dockerfile文件，如果是buildah方式，则项目根目录下需要有buildah.sh文件&quot;</span><br><span class="line">  echo &quot;-b, --build-file                      打包执行文件路径，Dockerfile或者buildah.sh，如果值为Dockerfile，将默认使用Dockerfile打包策略，否则使用buildah打包策略&quot;</span><br><span class="line">  echo &quot;    --push-flag                       是否发布到远程仓库,true or false(default)&quot;</span><br><span class="line">  echo &quot;    --package-flag                    是否执行maven打包,true(default) or false&quot;</span><br><span class="line">  echo &quot;    --build-flag                      是否执行本地镜像构建,true(default) or false&quot;</span><br><span class="line">  echo &quot;-r  --remote-registry                 远程仓库地址,例如：docker://docker.vemic.com/fas-oss。默认为环境变量REMOTE_IMAGE_REGISTRY的值。如果未设置该环境变量，则默认docker://127.0.0.1:5000。&quot;</span><br><span class="line">  echo &quot;    --creds [username[:password]]     远程仓库用户名密码。--creds=username:password&quot;</span><br><span class="line">  echo &quot;-h, --help                            帮助选项。&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">read</span> args</span></span><br><span class="line">ARGS_CMD=$(getopt -o hp:i:s:b:r: --long help,project-home:,image-info:,package-strategy:,build-file:,push-flag:,package-flag:,build-flag:,creds:,remote-registry -n $(basename $0) -- &quot;$@&quot;)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">echo</span> ARGS_CMD=[<span class="variable">$ARGS</span>]</span></span><br><span class="line">[ $? -ne 0 ] &amp;&amp; exit 1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">echo</span> formatted parameters=[<span class="variable">$@</span>]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">dispatch formatted arguments to position arguments(<span class="variable">$1</span>,<span class="variable">$2</span>,...)</span></span><br><span class="line">eval set -- &quot;$ARGS_CMD&quot;</span><br><span class="line">while [ -n &quot;$1&quot; ]; do</span><br><span class="line">  case &quot;$1&quot; in</span><br><span class="line">  -h | --help)</span><br><span class="line">    show_help</span><br><span class="line">    shift 1</span><br><span class="line">    exit 1</span><br><span class="line">    ;;</span><br><span class="line">  -p | --project-home)</span><br><span class="line">    PROJECT_HOME=$2</span><br><span class="line">    if [ ! -d $PROJECT_HOME ]; then</span><br><span class="line">      echo &quot;project home not exist! target: $PROJECT_HOME&quot;</span><br><span class="line">      shift 2</span><br><span class="line">      exit 1</span><br><span class="line">    fi</span><br><span class="line">    shift 2</span><br><span class="line">    ;;</span><br><span class="line">  -i | --image-info)</span><br><span class="line">    IMAGE_INFO=$2</span><br><span class="line">    [ -z &quot;$IMAGE_INFO&quot; ] &amp;&amp; echo &quot;please set image info (like: -i nginx:v1)&quot; &amp;&amp; exit</span><br><span class="line">    shift 2</span><br><span class="line">    ;;</span><br><span class="line">  -b | --build-file)</span><br><span class="line">    BUILD_FILE=$2</span><br><span class="line">    if [ ! -f $BUILD_FILE ]; then</span><br><span class="line">      echo &quot;build file not exist! file path: $BUILD_FILE&quot;</span><br><span class="line">      exit 1</span><br><span class="line">    elif [[ &quot;$(basename $BUILD_FILE)&quot; = &quot;Dockerfile&quot; ]]; then</span><br><span class="line">      PACKAGE_STRATEGY=&quot;Dockerfile&quot;</span><br><span class="line">    else</span><br><span class="line">      PACKAGE_STRATEGY=&quot;buildah&quot;</span><br><span class="line">    fi</span><br><span class="line">    shift 2</span><br><span class="line">    ;;</span><br><span class="line">  -s | --package-strategy)</span><br><span class="line">    strategy=$2</span><br><span class="line">    if [[ $strategy != &quot;Dockerfile&quot; &amp;&amp; $strategy != &quot;buildah&quot; ]]; then</span><br><span class="line">      echo &quot;package strategy requires arg &#x27;Dockerfile&#x27; or &#x27;buildah&#x27;&quot; &amp;&amp; exit 1</span><br><span class="line">    fi</span><br><span class="line">    PACKAGE_STRATEGY=$2</span><br><span class="line">    shift 2</span><br><span class="line">    ;;</span><br><span class="line">  --push-flag)</span><br><span class="line">    if [[ $2 != &quot;true&quot; &amp;&amp; $2 != &quot;false&quot; ]]; then</span><br><span class="line">      echo &quot;--push-flag must be true or false!&quot; &amp;&amp; exit 1</span><br><span class="line">    fi</span><br><span class="line">    PUSH_FLAG=$2</span><br><span class="line">    shift 2</span><br><span class="line">    ;;</span><br><span class="line">  --package-flag)</span><br><span class="line">    if [[ $2 != &quot;true&quot; &amp;&amp; $2 != &quot;false&quot; ]]; then</span><br><span class="line">      echo &quot;--package-flag must be true or false!&quot; &amp;&amp; exit 1</span><br><span class="line">    fi</span><br><span class="line">    PACKAGE_FLAG=$2</span><br><span class="line">    shift 2</span><br><span class="line">    ;;</span><br><span class="line">  --build-flag)</span><br><span class="line">    if [[ $2 != &quot;true&quot; &amp;&amp; $2 != &quot;false&quot; ]]; then</span><br><span class="line">      echo &quot;--build-flag must be true or false!&quot; &amp;&amp; exit 1</span><br><span class="line">    fi</span><br><span class="line">    BUILD_FLAG=$2</span><br><span class="line">    shift 2</span><br><span class="line">    ;;</span><br><span class="line">  -r | --remote-registry)</span><br><span class="line">    if [[ ! &quot;$2&quot; =~ ^docker://.*|^docker-daemon:*|^oci:* ]]; then</span><br><span class="line">      echo &quot;-r|--remote-registry is empty! please set correct address. see --help for more info.&quot; &amp;&amp; exit 1</span><br><span class="line">    fi</span><br><span class="line">    REMOTE_REGISTRY=$2</span><br><span class="line">    shift 2</span><br><span class="line">    ;;</span><br><span class="line">  --creds)</span><br><span class="line">    if [[ $2 = &quot;&quot; ]]; then</span><br><span class="line">      echo &quot;--creds is empty. please set --creds=username:password&quot; &amp;&amp; exit 1</span><br><span class="line">    fi</span><br><span class="line">    CREDS=$2</span><br><span class="line">    shift 2</span><br><span class="line">    ;;</span><br><span class="line">  \:)</span><br><span class="line">    echo &quot;argument value missing! $1&quot;</span><br><span class="line">    show_help &amp;&amp; exit 1</span><br><span class="line">    ;;</span><br><span class="line">  \?)</span><br><span class="line">    echo &quot;unknown argument! $1&quot;</span><br><span class="line">    show_help</span><br><span class="line">    exit 1</span><br><span class="line">    ;;</span><br><span class="line">  --)</span><br><span class="line">    shift</span><br><span class="line">    break</span><br><span class="line">    ;;</span><br><span class="line">  *)</span><br><span class="line">    echo &quot;error arg! $1&quot;</span><br><span class="line">    show_help</span><br><span class="line">    exit 1</span><br><span class="line">    ;;</span><br><span class="line">  esac</span><br><span class="line">done</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">make preparations</span></span><br><span class="line">make_preparations() &#123;</span><br><span class="line">  echo &quot;make_pre&quot;</span><br><span class="line">  TMP_DIR=&quot;/tmp/oci-package/$(date +%Y%m%d)&quot;</span><br><span class="line">  mkdir -p $TMP_DIR</span><br><span class="line">  LOG_FILE=&quot;$&#123;TMP_DIR&#125;/$(date +%H%M%S).log&quot;</span><br><span class="line">  touch $LOG_FILE</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mvn operations</span></span><br><span class="line">do_compile() &#123;</span><br><span class="line">  echo &quot;maven compile work start&quot;</span><br><span class="line">  if [ -f &quot;$PROJECT_HOME pom.xml&quot; ]; then</span><br><span class="line">    echo &quot;pom.xml does not exist in the specified directory $PROJECT_HOME&quot; &amp;&amp; exit 1</span><br><span class="line">  fi</span><br><span class="line">  echo &quot;target project home is : $PROJECT_HOME&quot;</span><br><span class="line">  cd $PROJECT_HOME</span><br><span class="line">  mvn clean package -Dmaven.test.skip=true &gt;&gt;$LOG_FILE 2&gt;&amp;1</span><br><span class="line">  if [ $? -ne 0 ]; then</span><br><span class="line">    echo &quot;mvn clean package failed! Please see $LOG_FILE&quot; &amp;&amp; exit 1</span><br><span class="line">  else</span><br><span class="line">    echo &quot;mvn packaged successfully!&quot;</span><br><span class="line">  fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">push_image() &#123;</span><br><span class="line">  echo &quot;start push image...&quot;</span><br><span class="line">  cmd=&quot;buildah push --tls-verify=false&quot;</span><br><span class="line">  [ -n &quot;$CREDS&quot; ] &amp;&amp; cmd=&quot;$&#123;cmd&#125; --creds=$CREDS&quot;</span><br><span class="line">  if [[ &quot;$REMOTE_REGISTRY&quot; =~ ^docker://.* ]]; then</span><br><span class="line">    cmd=&quot;$&#123;cmd&#125; $IMAGE_INFO $REMOTE_REGISTRY/$IMAGE_INFO&quot;</span><br><span class="line">  elif [[ &quot;$REMOTE_REGISTRY&quot; =~ ^docker-daemon:* ]]; then</span><br><span class="line">    cmd=&quot;$&#123;cmd&#125; $IMAGE_INFO docker-daemon:$IMAGE_INFO&quot;</span><br><span class="line">  elif [[ &quot;$REMOTE_REGISTRY&quot; =~ ^oci:* ]]; then</span><br><span class="line">    cmd=&quot;$&#123;cmd&#125; $IMAGE_INFO $REMOTE_REGISTRY:$IMAGE_INFO&quot;</span><br><span class="line">  else</span><br><span class="line">    echo &quot;REMOTE_IMAGE_REGISTRY invalid, please start with &#x27;docker://&#x27; or &#x27;docker-daemon:&#x27; or &#x27;oci:&#x27;. see --help for more info.&quot;</span><br><span class="line">  fi</span><br><span class="line">  eval $cmd</span><br><span class="line">  if [ $? -eq 0 ]; then</span><br><span class="line">    echo &quot;push image successfully!&quot;</span><br><span class="line">  else</span><br><span class="line">    echo &quot;push image to $REMOTE_REGISTRY/$IMAGE_INFO failed!&quot; &amp;&amp; exit 1</span><br><span class="line">  fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">package_oci_image_for_docker() &#123;</span><br><span class="line">  cd $PROJECT_HOME</span><br><span class="line">  if [ -f &quot;$PROJECT_HOME Dockerfile&quot; ]; then</span><br><span class="line">    echo &quot;Dockerfile does not exist in the specified directory $PROJECT_HOME&quot;</span><br><span class="line">    exit 1</span><br><span class="line">  else</span><br><span class="line">    cmd=&#x27;buildah bud --layers &#x27;$&#123;BUILD_FILE:+&quot;-f $BUILD_FILE&quot;&#125;&#x27; -t $IMAGE_INFO .&#x27;</span><br><span class="line">    eval $cmd</span><br><span class="line">    [ $? -ne 0 ] &amp;&amp; echo &quot;build with Dockerfile failed!&quot; &amp;&amp; exit 1</span><br><span class="line">  fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">package_oci_image() &#123;</span><br><span class="line">  cd $PROJECT_HOME</span><br><span class="line">  if [ -f &quot;$PROJECT_HOME buildah.sh&quot; ]; then</span><br><span class="line">    echo &quot;buildah.sh does not exist in the specified directory $PROJECT_HOME&quot;</span><br><span class="line">    exit 1</span><br><span class="line">  else</span><br><span class="line">    source $&#123;BUILD_FILE:-buildah.sh&#125; &gt;$LOG_FILE 2&gt;$LOG_FILE</span><br><span class="line">    [ $? -ne 0 ] &amp;&amp; echo &quot;build with buildah failed!&quot; &amp;&amp; exit 1</span><br><span class="line">  fi</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">execute package</span></span><br><span class="line">do_oci_package() &#123;</span><br><span class="line">  echo &quot;begin oci package,PACKAGE_STRATEGY=$PACKAGE_STRATEGY&quot;</span><br><span class="line">  if [ $PACKAGE_STRATEGY = &quot;Dockerfile&quot; ]; then</span><br><span class="line">    package_oci_image_for_docker</span><br><span class="line">  elif [ $PACKAGE_STRATEGY = &quot;buildah&quot; ]; then</span><br><span class="line">    package_oci_image</span><br><span class="line">  else</span><br><span class="line">    echo &quot;unknown package strategy: $PACKAGE_STRATEGY&quot; &amp;&amp; exit 1</span><br><span class="line">  fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[[ -z &quot;$IMAGE_INFO&quot; ]] &amp;&amp; echo &quot;please set image info (like: -i nginx:v1)&quot; &amp;&amp; exit</span><br><span class="line">make_preparations</span><br><span class="line">[ $PACKAGE_FLAG = &quot;true&quot; ] &amp;&amp; do_compile</span><br><span class="line">[ $BUILD_FLAG = &quot;true&quot; ] &amp;&amp; do_oci_package</span><br><span class="line">[ $PUSH_FLAG = &quot;true&quot; ] &amp;&amp; push_image</span><br><span class="line"></span><br><span class="line">echo &quot;--------- done! ---------&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>构建机器执行package-oci.sh</p>
<p>配置环境变量REMOTE_IMAGE_REGISTRY为远程仓库地址，默认使用<code>http://127.0.0.1:5000</code>。</p>
<p>执行<code>./package-oci.sh -p /path/to/project -i demo:v1</code>。即可推送oci镜像到指定远程仓库。</p>
<p>详细配置如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-p, --project-home                      项目根目录，如/home/projects/springboot-demo，默认为当前目录</span><br><span class="line">-i, --image-info                        镜像信息，包含镜像名以及版本，格式同docker，[imageName:version]，如nginx:v1</span><br><span class="line">-s, --package-strategy                  打包策略接受参数[ Dockerfile(default) | buildah ]，是使用Dockerfile的方式，还是使用buildah的方式。如果是Dockerfile方式，项目根目录下需要有Dockerfile文件，如果是buildah方式，则项目根目录下需要有buildah.sh文件</span><br><span class="line">-b, --build-file                        打包执行文件路径，Dockerfile或者buildah.sh，如果值为Dockerfile，将默认使用Dockerfile打包策略，否则使用buildah打包策略</span><br><span class="line">    --push-flag                         是否发布到远程仓库,true or false(default)</span><br><span class="line">-h, --help                  			帮助选项。</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>容器化</category>
        <category>Cloud Native</category>
      </categories>
      <tags>
        <tag>OCI</tag>
      </tags>
  </entry>
  <entry>
    <title>ArcGIS分布式部署方案</title>
    <url>/2019/07/14/ArcGIS%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<p><strong>编写不易，转载还请注明出处，感谢！</strong></p>
<p><img src="/ArcGIS%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2%E6%96%B9%E6%A1%88/hero_banner-temp.png" alt="arcgis"></p>
<!-- toc -->

<span id="more"></span>

<h1 id="服务器规划"><a href="#服务器规划" class="headerlink" title="服务器规划"></a>服务器规划</h1><p>共使用四台Linux服务器，系统为 CentOS7.5</p>
<table>
<thead>
<tr>
<th>服务器ip</th>
<th>域名</th>
<th>软件</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.192.100</td>
<td>base.esri.com</td>
<td>Portal For ArcGIS<br>ArcGIS Server<br>Datastore<br>WebAdaptor</td>
</tr>
<tr>
<td>192.168.192.101</td>
<td>ga1.esri.com</td>
<td>GeoAnalytics Server<br>GA站点nfs共享目录</td>
</tr>
<tr>
<td>192.168.192.102</td>
<td>ga2.esri.com</td>
<td>GeoAnalytics Server</td>
</tr>
<tr>
<td>192.168.192.103</td>
<td>datastore.esri.com</td>
<td>DataStore（时空大数据存储）</td>
</tr>
</tbody></table>
<h1 id="各服务器安装说明"><a href="#各服务器安装说明" class="headerlink" title="各服务器安装说明"></a>各服务器安装说明</h1><h2 id="base-esri-com-192-168-192-100"><a href="#base-esri-com-192-168-192-100" class="headerlink" title="base.esri.com[192.168.192.100]"></a>base.esri.com[192.168.192.100]</h2><h3 id="安装ArcGIS-Server"><a href="#安装ArcGIS-Server" class="headerlink" title="安装ArcGIS Server"></a>安装ArcGIS Server</h3><h4 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h4><ol>
<li>内存&gt;8G </li>
<li>硬盘可用空间&gt;20G</li>
</ol>
<h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><h5 id="修改系统时间"><a href="#修改系统时间" class="headerlink" title="修改系统时间"></a>修改系统时间</h5><p>目前的授权文件只到2018年7月，为个人学习使用，暂时以修改时间的方式规避，商业用途请支持正版。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@base ~]# date -s 20160101</span><br><span class="line">[root@base ~]# hwclock -w</span><br><span class="line">Fri Jan  1 00:00:00 EST 2016</span><br></pre></td></tr></table></figure>

<h5 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h5><p>关闭并禁用开机启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@base ~]# systemctl stop firewalld.service</span><br><span class="line">[root@base ~]# systemctl disable firewalld.service</span><br></pre></td></tr></table></figure>
<h5 id="用户和组的创建"><a href="#用户和组的创建" class="headerlink" title="用户和组的创建"></a>用户和组的创建</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@base ~]# groupadd esrichina</span><br><span class="line">[root@base ~]# useradd -g esrichina -m arcgis</span><br><span class="line">[root@base ~]# passwd arcgis</span><br></pre></td></tr></table></figure>
<h5 id="设置主机名"><a href="#设置主机名" class="headerlink" title="设置主机名"></a>设置主机名</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@base ~]# hostnamectl set-hostname base.esri.com</span><br></pre></td></tr></table></figure>

<h5 id="修改hosts"><a href="#修改hosts" class="headerlink" title="修改hosts"></a>修改hosts</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@base ~]# vim /etc/hosts</span><br><span class="line"></span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.192.100 base.esri.com base</span><br></pre></td></tr></table></figure>
<p><code>注意</code>如果存在多个网卡，建议删除localhost所在行<br>查看网卡：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@base ~]# lspci | grep -i eth</span><br><span class="line">02:01.0 Ethernet controller: Intel Corporation 82545EM Gigabit Ethernet Controller (Copper) (rev 01)</span><br></pre></td></tr></table></figure>

<h5 id="修改系统参数"><a href="#修改系统参数" class="headerlink" title="修改系统参数"></a>修改系统参数</h5><ol>
<li>编辑 limits.conf文件<br>编辑&#x2F;etc&#x2F;security&#x2F;limits.conf文件，添加如下内容：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">arcgis soft nofile 65535</span><br><span class="line">arcgis hard nofile 65535</span><br><span class="line">arcgis soft nproc 25059</span><br><span class="line">arcgis hard nproc 25059</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h4><h5 id="准备安装包"><a href="#准备安装包" class="headerlink" title="准备安装包"></a>准备安装包</h5><p>将安装包放入&#x2F;home&#x2F;arcgis&#x2F;setup  并将ArcGIS Server的压缩包解压</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-rwxr-xr-x. 1 arcgis esrichina  132907649 Feb 20 04:11 ArcGIS_License_Manager_Linux_105_154034.tar.gz</span><br><span class="line">drwxr-sr-x. 5 arcgis esrichina        100 Feb 20 04:18 ArcGISServer</span><br><span class="line">-rwxr-xr-x. 1 arcgis esrichina 2544647382 Feb 20 04:12 ArcGIS_Server_Linux_105_154052.tar.gz</span><br><span class="line">-rwxr-xr-x. 1 arcgis esrichina 1863558498 Feb 20 04:12 Portal_for_ArcGIS_Linux_105_154053.tar.gz</span><br><span class="line">-rwxr-xr-x. 1 arcgis esrichina   97511317 Feb 20 04:12 Web_Adaptor_Java_Linux_105_154055.tar.gz</span><br></pre></td></tr></table></figure>

<h5 id="检验系统是否符合要求"><a href="#检验系统是否符合要求" class="headerlink" title="检验系统是否符合要求"></a>检验系统是否符合要求</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[arcgis@base ~]$ cd /home/arcgis/setup/ArcGISServer/serverdiag</span><br><span class="line">[arcgis@base serverdiag]$ ./serverdiag </span><br><span class="line">========================================================================</span><br><span class="line">                   ArcGIS Server 10.5 Diagnostic Tool</span><br><span class="line">                                    </span><br><span class="line">                        Hostname: base.esri.com</span><br><span class="line">========================================================================</span><br><span class="line"></span><br><span class="line"> DIAG000: Check for installation as root                       [PASSED]</span><br><span class="line"> DIAG001: Check for 64-bit architecture                        [PASSED]</span><br><span class="line"> DIAG002: Check OS version                                     [PASSED]</span><br><span class="line"> DIAG003: Check hostname for invalid characters                [PASSED]</span><br><span class="line"> DIAG024: Check /etc/hosts for hostname entry                  [PASSED]</span><br><span class="line"> DIAG004: Check installed packages                             [PASSED]</span><br><span class="line"> DIAG005: Check system limits                                  [PASSED]</span><br><span class="line"> DIAG008: Check HTTP port                                      [PASSED]</span><br><span class="line"> DIAG009: Check HTTPS port                                     [PASSED]</span><br><span class="line"> DIAG010: Check Xvfb ports                                     [PASSED]</span><br><span class="line"> DIAG020: Check hostname IP address mismatches                 [PASSED]</span><br><span class="line"> DIAG026: Check processes for ArcGIS core services             [N/A]</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line">There were 0 failure(s) and 0 warning(s) found:</span><br></pre></td></tr></table></figure>
<p>出现There were 0 failure(s) and 0 warning(s) found:即为通过</p>
<h5 id="执行安装"><a href="#执行安装" class="headerlink" title="执行安装"></a>执行安装</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[arcgis@base setup]$ cd ArcGISServer</span><br><span class="line">[arcgis@base ArcGISServer]$ ./Setup -m silent -l yes -a /home/arcgis/setup/Server10.5.ecp</span><br><span class="line">========================================================================</span><br><span class="line">                   ArcGIS Server 10.5 Diagnostic Tool</span><br><span class="line">                                    </span><br><span class="line">                        Hostname: base.esri.com</span><br><span class="line">========================================================================</span><br><span class="line"></span><br><span class="line"> DIAG000: Check for installation as root                       [PASSED]</span><br><span class="line"> DIAG001: Check for 64-bit architecture                        [PASSED]</span><br><span class="line"> DIAG002: Check OS version                                     [PASSED]</span><br><span class="line"> DIAG003: Check hostname for invalid characters                [PASSED]</span><br><span class="line"> DIAG024: Check /etc/hosts for hostname entry                  [PASSED]</span><br><span class="line"> DIAG004: Check installed packages                             [PASSED]</span><br><span class="line"> DIAG005: Check system limits                                  [PASSED]</span><br><span class="line"> DIAG008: Check HTTP port                                      [PASSED]</span><br><span class="line"> DIAG009: Check HTTPS port                                     [PASSED]</span><br><span class="line"> DIAG010: Check Xvfb ports                                     [PASSED]</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line">There were 0 failure(s) and 0 warning(s) found:</span><br><span class="line"></span><br><span class="line">[ArcGIS Server 10.5 Installation Details]</span><br><span class="line">UI Mode..................silent</span><br><span class="line">Agreed to Esri License...yes</span><br><span class="line">Authorization File......./home/arcgis/setup/Server10.5.ecp</span><br><span class="line">Installation Directory.../home/arcgis/server</span><br><span class="line"></span><br><span class="line">Starting installation of ArcGIS Server 10.5...</span><br><span class="line">...ArcGIS Server 10.5 installation is complete.</span><br><span class="line"></span><br><span class="line">You will be able to access ArcGIS Server Manager by navigating to http://base.esri.com:6080/arcgis/manager.</span><br></pre></td></tr></table></figure>

<p>当出现<code>You will be able to access ArcGIS Server Manager by navigating to http://base.esri.com:6080/arcgis/manager.</code>说明安装成功。</p>
<h3 id="安装Portal-for-ArcGIS"><a href="#安装Portal-for-ArcGIS" class="headerlink" title="安装Portal for ArcGIS"></a>安装Portal for ArcGIS</h3><h4 id="系统要求-1"><a href="#系统要求-1" class="headerlink" title="系统要求"></a>系统要求</h4><ol>
<li>处理器：4 核（适用于 100 个并发用户）</li>
<li>内存&#x2F;RAM：8 GB</li>
<li>磁盘空间：10 GB</li>
</ol>
<h4 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h4><p>portal端需要安装dos2unix</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[arcgis@base portaldiag]$ sudo yum install dos2unix</span><br></pre></td></tr></table></figure>

<p>其他与安装Server相同，另外需要portal端的ecp授权文件进行授权即可。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[arcgis@base portaldiag]$ pwd</span><br><span class="line">/home/arcgis/setup/PortalForArcGIS/portaldiag</span><br><span class="line">[arcgis@base portaldiag]$ ./portaldiag </span><br><span class="line">========================================================================</span><br><span class="line">                 Portal for ArcGIS 10.5 Diagnostic Tool</span><br><span class="line">                                    </span><br><span class="line">                        Hostname: base.esri.com</span><br><span class="line">========================================================================</span><br><span class="line"></span><br><span class="line"> DIAG000: Check for installation as root                       [PASSED]</span><br><span class="line"> DIAG001: Check for 64-bit architecture                        [PASSED]</span><br><span class="line"> DIAG002: Check OS version                                     [PASSED]</span><br><span class="line"> DIAG003: Check hostname for invalid characters                [PASSED]</span><br><span class="line"> DIAG005: Check system limits                                  [PASSED]</span><br><span class="line"> DIAG004: Check installed packages                             [PASSED]</span><br><span class="line"> DIAG016: Check Portal for ArcGIS ports                        [PASSED]</span><br><span class="line"> DIAG024: Check localhost resolution                           [PASSED]</span><br><span class="line"> DIAG029: Check file system type                               [PASSED]</span><br><span class="line"> DIAG020: Check hostname IP address mismatches                 [PASSED]</span><br><span class="line"> DIAG026: Check processes of Portal for ArcGIS core services   [N/A]</span><br><span class="line"> DIAG028: Check data directory                                 [N/A]</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line">There were 0 failure(s) and 0 warning(s) found:</span><br></pre></td></tr></table></figure>


<p><em><strong>portal端所涉及到的端口</strong></em></p>
<p>Portal for ArcGIS 使用特定的端口进行通信。以下是可能需要防火墙允许的端口的描述。</p>
<ul>
<li>HTTP 端口 7080</li>
</ul>
<p>Portal for ArcGIS 通过端口 7080 进行通信，必须确保防火墙允许通过此端口进行 HTTP 通信。配置 Web Adaptor 以用于门户时，将引用 HTTP URL（例如，<a href="http://portal.domain.com:7080）。">http://portal.domain.com:7080）。</a></p>
<ul>
<li>HTTPS 端口 7443</li>
</ul>
<p>默认情况下，Portal for ArcGIS 使用 HTTPS 端口 7443 为需要用户凭据的通信进行加密。如不需要凭据，则使用 HTTP。如果已将门户配置为在所有通信中使用 HTTPS，则仅使用 HTTPS。有关详细信息，请参阅<a href="http://enterprise.arcgis.com/zh-cn/portal/10.5/install/linux/configure-https.htm">配置 HTTPS</a>。</p>
<ul>
<li>内部使用的端口</li>
</ul>
<p>Portal for ArcGIS 使用端口 5701、7005、7099、7199、7654、7120 和 7220 进行计算机间通信。必须确保防火墙允许在这些端口上进行本地通信，并且其当前未被其他应用程序使用。</p>
<p>配置高可用性门户时，索引服务使用端口 5701 和 5801 在两个门户计算机之间保持用户和项目搜索的同步。</p>
<p>Portal for ArcGIS 可能还需要使用临时端口（有时称为动态端口）进行计算机间通信。临时端口通常是一个范围（通常介于 1024 和 5000 之间或 49152 到 65535 之间，而系统管理员可以自定义该范围）。您必须确保防火墙允许在这些特定端口和临时端口范围上进行计算机间通信。</p>
<h3 id="安装ArcGIS-DataStore"><a href="#安装ArcGIS-DataStore" class="headerlink" title="安装ArcGIS DataStore"></a>安装ArcGIS DataStore</h3><h4 id="系统要求-2"><a href="#系统要求-2" class="headerlink" title="系统要求"></a>系统要求</h4><p>要安装和配置 ArcGIS Data Store，系统驱动器上至少需要有 13 GB 的可用磁盘空间。这是对具有一个空数据存储类型的计算机的最低磁盘空间要求；它没有将您要在该计算机上可能存储的数据存储或备份文件中存储的数据考虑在内。鉴于此，您应计划在具有大量可用磁盘空间的计算机上安装 ArcGIS Data Store。</p>
<p><em><strong>注:</strong></em></p>
<p>当该计算机的可用磁盘空间少于 10 GB 时，ArcGIS Data Store 便会开始记录磁盘空间不足的警告。硬盘驱动器的可用空间低于 1 GB 时，关系数据存储便会以只读模式存储，并且切片缓存和时空大数据存储会被关闭。</p>
<p>为了确定在一台 ArcGIS Data Store 专用计算机上需要的磁盘空间量，需要考虑以下方面：</p>
<ul>
<li><p>软件安装使用 900 MB 的磁盘空间。</p>
</li>
<li><p>每新建一个数据存储（即使是空白的）都会占用额外的空间：</p>
<ul>
<li>切片缓存数据存储 &#x3D; 1 MB</li>
<li>时空大数据存储 &#x3D; 200 MB</li>
<li>关系数据存储 &#x3D; 2.5 GB*</li>
</ul>
<p>*随着时间的推移，一个空的关系数据存储将最多使用 2.5 GB 磁盘空间，以支持高可用性和可靠备份策略。配置关系数据存储后，将使用大约 200 MB 磁盘空间。一个空的关系数据存储所使用的磁盘空间量在 11 小时内将以大约 200 MB&#x2F;小时的速度增长，直到那时稳定在 2.5 GB。在使用过程中存储在系统中的数据是对此基线存储要求的补充。</p>
</li>
<li><p>您需要估算将数据存储在数据存储中时所需的磁盘空间量。</p>
</li>
<li><p>将备份文件存储在数据存储计算机上时也需要消耗磁盘空间。如果您没有将备份配置为写入共享系统驱动中，则必须考虑这部分额外使用的磁盘空间。</p>
</li>
</ul>
<h4 id="安装过程-1"><a href="#安装过程-1" class="headerlink" title="安装过程"></a>安装过程</h4><h5 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[arcgis@base setup]$ tar -zxvf ArcGIS_DataStore_Linux_105_154054.tar.gz</span><br></pre></td></tr></table></figure>
<h5 id="检验系统环境"><a href="#检验系统环境" class="headerlink" title="检验系统环境"></a>检验系统环境</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[arcgis@base ArcGISDataStore_Linux]$ cd datastorediag/</span><br><span class="line">[arcgis@base datastorediag]$ ./datastorediag </span><br><span class="line">========================================================================</span><br><span class="line">                 ArcGIS Data Store 10.5 Diagnostic Tool</span><br><span class="line">                                    </span><br><span class="line">                        Hostname: base.esri.com</span><br><span class="line">========================================================================</span><br><span class="line"></span><br><span class="line"> Check for installation as root                                [PASSED]</span><br><span class="line"> Check for 64-bit architecture                                 [PASSED]</span><br><span class="line"> Check OS version                                              [PASSED]</span><br><span class="line"> Check hostname for invalid characters                         [PASSED]</span><br><span class="line"> Check installed packages                                      [PASSED]</span><br><span class="line"> Check ArcGIS Data Store ports                                 [PASSED]</span><br><span class="line"> Check hostname IP address mismatches                          [PASSED]</span><br><span class="line"> Check Spatiotemporal big data store requirements              [WARNING]</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line">There were 0 failure(s) and 1 warning(s) found:</span><br><span class="line"></span><br><span class="line">WARNINGS:</span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line">*** Check Spatiotemporal big data store requirements: If you will</span><br><span class="line">be using Spatiotemporal big data store, please check the system</span><br><span class="line">requirements.  One or more Spatiotemporal big data store requirements</span><br><span class="line">were not met:</span><br><span class="line"></span><br><span class="line">     1.) The vm.max_map_count is set too low (65530). Run sysctl -w</span><br><span class="line">     vm.max_map_count=262144 or set vm.max_map_count to at least 262144</span><br><span class="line">     in /etc/sysctl.conf:</span><br><span class="line"></span><br><span class="line">	vm.max_map_count = 262144</span><br><span class="line"></span><br><span class="line">     2.) Memory swappiness is set to 30.  Set vm.swappiness to 1 in</span><br><span class="line">     /etc/sysctl.conf:</span><br><span class="line"></span><br><span class="line">	vm.swappiness = 1</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>根据提示，需要修改相关系统参数，切换为root用户，执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@base ~]# sysctl -w vm.swappiness=1</span><br><span class="line">[root@base ~]# sysctl -w vm.max_map_count=262144</span><br><span class="line">[root@base ~]# echo vm.swappiness = 1 &gt;&gt; /etc/sysctl.conf</span><br><span class="line">[root@base ~]# echo vm.max_map_count=262144 &gt;&gt; /etc/sysctl.conf</span><br></pre></td></tr></table></figure>

<h5 id="执行安装-1"><a href="#执行安装-1" class="headerlink" title="执行安装"></a>执行安装</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[arcgis@base ArcGISDataStore_Linux]$ ./Setup -m silent -l Yes</span><br><span class="line">========================================================================</span><br><span class="line">                 ArcGIS Data Store 10.5 Diagnostic Tool</span><br><span class="line">                                    </span><br><span class="line">                        Hostname: base.esri.com</span><br><span class="line">========================================================================</span><br><span class="line"></span><br><span class="line"> Check for installation as root                                [PASSED]</span><br><span class="line"> Check for 64-bit architecture                                 [PASSED]</span><br><span class="line"> Check OS version                                              [PASSED]</span><br><span class="line"> Check hostname for invalid characters                         [PASSED]</span><br><span class="line"> Check installed packages                                      [PASSED]</span><br><span class="line"> Check ArcGIS Data Store ports                                 [PASSED]</span><br><span class="line"> Check hostname IP address mismatches                          [PASSED]</span><br><span class="line"> Check Spatiotemporal big data store requirements              [PASSED]</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line">There were 0 failure(s) and 0 warning(s) found:</span><br><span class="line"></span><br><span class="line">[ArcGIS Data Store 10.5 Installation Details]</span><br><span class="line">UI Mode..................silent</span><br><span class="line">Agreed to Esri License...yes</span><br><span class="line">Installation Directory.../home/arcgis/arcgis/datastore</span><br><span class="line"></span><br><span class="line">Starting installation of ArcGIS Data Store 10.5...</span><br><span class="line">...ArcGIS Data Store 10.5 installation is complete.</span><br><span class="line"></span><br><span class="line">You will be able to configure ArcGIS Data Store 10.5 by navigating to https://localhost:2443/arcgis/datastore.</span><br></pre></td></tr></table></figure>

<h5 id="配置ArcGIS-Server"><a href="#配置ArcGIS-Server" class="headerlink" title="配置ArcGIS Server"></a>配置ArcGIS Server</h5><p><img src="/ArcGIS%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2%E6%96%B9%E6%A1%88/datastore-setting.png" alt="datastore-setting"></p>
<p><img src="/ArcGIS%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2%E6%96%B9%E6%A1%88/datastore-setting-2.png"></p>
<p><img src="/ArcGIS%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2%E6%96%B9%E6%A1%88/datastore-setting-3.png"></p>
<h3 id="安装ArcGIS-Web-Adaptor"><a href="#安装ArcGIS-Web-Adaptor" class="headerlink" title="安装ArcGIS Web Adaptor"></a>安装ArcGIS Web Adaptor</h3><h4 id="系统要求-3"><a href="#系统要求-3" class="headerlink" title="系统要求"></a>系统要求</h4><h4 id="安装过程-2"><a href="#安装过程-2" class="headerlink" title="安装过程"></a>安装过程</h4><h5 id="删除CentOS7自带的OpenJDK"><a href="#删除CentOS7自带的OpenJDK" class="headerlink" title="删除CentOS7自带的OpenJDK"></a>删除CentOS7自带的OpenJDK</h5><p>执行<code>java -version</code>，发现</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[arcgis@base ArcGISDataStore_Linux]$ java -version</span><br><span class="line">openjdk version &quot;1.8.0_191&quot;</span><br><span class="line">OpenJDK Runtime Environment (build 1.8.0_191-b12)</span><br><span class="line">OpenJDK 64-Bit Server VM (build 25.191-b12, mixed mode)</span><br></pre></td></tr></table></figure>

<p>使用的是自带的OpenJDK，所以要先卸载掉，用Oracle JDK1.8。  </p>
<p>执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[arcgis@base ArcGISDataStore_Linux]$ rpm -qa|grep java</span><br><span class="line">javapackages-tools-3.4.1-11.el7.noarch</span><br><span class="line">java-1.7.0-openjdk-headless-1.7.0.201-2.6.16.1.el7_6.x86_64</span><br><span class="line">java-1.7.0-openjdk-1.7.0.201-2.6.16.1.el7_6.x86_64</span><br><span class="line">java-1.8.0-openjdk-1.8.0.191.b12-1.el7_6.x86_64</span><br><span class="line">tzdata-java-2018i-1.el7.noarch</span><br><span class="line">java-1.8.0-openjdk-headless-1.8.0.191.b12-1.el7_6.x86_64</span><br><span class="line">python-javapackages-3.4.1-11.el7.noarch</span><br></pre></td></tr></table></figure>

<p>执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -e --nodeps java-1.7.0-openjdk-headless</span><br><span class="line">rpm -e --nodeps java-1.7.0-openjdk</span><br><span class="line">rpm -e --nodeps java-1.8.0-openjdk</span><br><span class="line">rpm -e --nodeps java-1.8.0-openjdk-headless</span><br></pre></td></tr></table></figure>

<h5 id="安装Oracle-JDK"><a href="#安装Oracle-JDK" class="headerlink" title="安装Oracle JDK"></a>安装Oracle JDK</h5><p>解压Oracle的jdk到&#x2F;usr&#x2F;local&#x2F;java目录下，并配置环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &#x27;export JAVA_HOME=/usr/local/java&#x27; &gt;&gt; /etc/profile.d/java.sh</span><br><span class="line">echo &#x27;export PATH=$PATH:$JAVA_HOME/bin&#x27; &gt;&gt; /etc/profile.d/java.sh</span><br><span class="line">echo &#x27;export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar&#x27; &gt;&gt; /etc/profile.d/java.sh</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>

<h5 id="解压tomcat"><a href="#解压tomcat" class="headerlink" title="解压tomcat"></a>解压tomcat</h5><p>把tomcat解压到<code>/usr/local/tomcat8</code></p>
<h5 id="创建私钥和证书请求"><a href="#创建私钥和证书请求" class="headerlink" title="创建私钥和证书请求"></a>创建私钥和证书请求</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@base tomcat8]# openssl req -newkey rsa:2048 -nodes -keyout /usr/local/tomcat8/esrixa.key -x509 -days 365 -out /usr/local/tomcat8/esrixa.crt</span><br><span class="line">Generating a 2048 bit RSA private key</span><br><span class="line">................................................................+++</span><br><span class="line">........+++</span><br><span class="line">writing new private key to &#x27;/usr/local/tomcat8/esrixa.key&#x27;</span><br><span class="line">-----</span><br><span class="line">You are about to be asked to enter information that will be incorporated</span><br><span class="line">into your certificate request.</span><br><span class="line">What you are about to enter is what is called a Distinguished Name or a DN.</span><br><span class="line">There are quite a few fields but you can leave some blank</span><br><span class="line">For some fields there will be a default value,</span><br><span class="line">If you enter &#x27;.&#x27;, the field will be left blank.</span><br><span class="line">-----</span><br><span class="line">Country Name (2 letter code) [XX]:cn</span><br><span class="line">State or Province Name (full name) []:jiangsu</span><br><span class="line">Locality Name (eg, city) [Default City]:nanjing</span><br><span class="line">Organization Name (eg, company) [Default Company Ltd]:esri</span><br><span class="line">Organizational Unit Name (eg, section) []:esri</span><br><span class="line">Common Name (eg, your name or your server&#x27;s hostname) []:base.esri.com</span><br><span class="line">Email Address []:1029743469@qq.com</span><br></pre></td></tr></table></figure>

<h5 id="创建自签名证书"><a href="#创建自签名证书" class="headerlink" title="创建自签名证书"></a>创建自签名证书</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@base tomcat8]# openssl pkcs12 -inkey /usr/local/tomcat8/esrixa.key -in /usr/local/tomcat8/esrixa.crt -export -out /usr/local/tomcat8/esrixa.pfx</span><br><span class="line">Enter Export Password:</span><br><span class="line">Verifying - Enter Export Password:</span><br></pre></td></tr></table></figure>

<p>此处密码为p@ssw0rd</p>
<p><em><strong>使用自签名证书会出现的问题</strong></em></p>
<p>创建自签名证书不应被视作生产环境的有效选项，因为这将导致异常结果以及所有门户用户的不良用户体验。</p>
<p>仅由网站所有者签名的证书称为自签名证书。自签名证书通常用于仅对组织内部 (LAN) 网络上的用户可用的网站上。如果与外部网络中的使用自签名证书的网站进行通信，您将无法验证颁发证书的站点是否确实代表其声称代表的一方。您可能实际上正与恶意方进行通信，使您的信息处于危险之中。</p>
<p>首次设置门户时，可能会使用自签名证书进行初步测试，以帮助您快速验证是否配置成功。但是，如果使用自签名证书，请注意在测试期间将遇到如下状况：</p>
<ul>
<li>有关不受信任站点的 Web 浏览器和 ArcGIS Desktop 警告。通常，Web 浏览器遇到自签名证书时将显示警告消息并要求您确认是否继续前往该站点。只要您使用自签名证书，许多浏览器就会显示警告图标或对地址栏标红。如果使用自签名证书配置门户，那么您就能够看到这些类型的警告。</li>
<li>无法在门户地图查看器中打开联合服务、无法将受保护的服务项添加到门户、无法在联合服务器中登录到 ArcGIS Server Manager 以及无法从 Esri Maps for Office 连接到门户。</li>
<li>打印托管服务以及从客户端应用程序中访问门户时出现异常行为。</li>
<li>无法从 Esri Maps for Office 登录至门户，除非在运行 Esri Maps for Office 的计算机上将自签名证书安装到<strong>受信任根证书颁发机构</strong>证书库。</li>
</ul>
<h5 id="配置tomcat"><a href="#配置tomcat" class="headerlink" title="配置tomcat"></a>配置tomcat</h5><p>开启https</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@base tomcat8]# vim /usr/local/tomcat8/conf/server.xml</span><br></pre></td></tr></table></figure>
<p>修改Connector的端口为80，443</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 此处省略 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Server</span> <span class="attr">port</span>=<span class="string">&quot;8005&quot;</span> <span class="attr">shutdown</span>=<span class="string">&quot;SHUTDOWN&quot;</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 此处省略 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Service</span> <span class="attr">name</span>=<span class="string">&quot;Catalina&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 此处省略 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;80&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">redirectPort</span>=<span class="string">&quot;443&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;443&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;org.apache.coyote.http11.Http11NioProtocol&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">maxThreads</span>=<span class="string">&quot;150&quot;</span> <span class="attr">SSLEnabled</span>=<span class="string">&quot;true&quot;</span> <span class="attr">scheme</span>=<span class="string">&quot;https&quot;</span> <span class="attr">secure</span>=<span class="string">&quot;true&quot;</span> <span class="attr">clientAuth</span>=<span class="string">&quot;false&quot;</span> <span class="attr">sslProtocol</span>=<span class="string">&quot;TLS&quot;</span> <span class="attr">keystoreFile</span>=<span class="string">&quot;/usr/local/tomcat8/esrixa.pfx&quot;</span> <span class="attr">keystoreType</span>=<span class="string">&quot;pkcs12&quot;</span> <span class="attr">keystorePass</span>=<span class="string">&quot;p@ssw0rd&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Connector</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- A &quot;Connector&quot; using the shared thread pool--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    &lt;Connector executor=&quot;tomcatThreadPool&quot;</span></span><br><span class="line"><span class="comment">               port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;</span></span><br><span class="line"><span class="comment">               connectionTimeout=&quot;20000&quot;</span></span><br><span class="line"><span class="comment">               redirectPort=&quot;8443&quot; /&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 此处省略 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Service</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Server</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="启动和验证Tomcat"><a href="#启动和验证Tomcat" class="headerlink" title="启动和验证Tomcat"></a>启动和验证Tomcat</h5><p>修改root启动tomcat的权限。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@base tomcat8]# chmod -R 777 /usr/local/tomcat8</span><br></pre></td></tr></table></figure>

<p>启动tomcat</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@base tomcat8]# cd bin</span><br><span class="line">[root@base bin]# ./startup.sh</span><br></pre></td></tr></table></figure>

<h5 id="解压Web-Adaptor"><a href="#解压Web-Adaptor" class="headerlink" title="解压Web Adaptor"></a>解压Web Adaptor</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[arcgis@base ArcGISDataStore_Linux]$ cd /home/arcgis/setup</span><br><span class="line">[arcgis@base setup]$ tar -zxvf Web_Adaptor_Java_Linux_105_154055.tar.gz </span><br></pre></td></tr></table></figure>

<h5 id="安装Web-Adaptor"><a href="#安装Web-Adaptor" class="headerlink" title="安装Web Adaptor"></a>安装Web Adaptor</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[arcgis@base WebAdaptor]$ ./Setup -m silent -l yes</span><br><span class="line">[ArcGIS Web Adaptor (Java Platform) 10.5 Installation Details]</span><br><span class="line">UI Mode..................silent</span><br><span class="line">Agreed to Esri License...yes</span><br><span class="line">Installation Directory.../home/arcgis/webadaptor10.5</span><br><span class="line"></span><br><span class="line">Starting installation of ArcGIS Web Adaptor (Java Platform) 10.5...</span><br><span class="line">...ArcGIS Web Adaptor (Java Platform) 10.5 installation is complete.</span><br></pre></td></tr></table></figure>

<h5 id="部署两个web-adaptor的war包"><a href="#部署两个web-adaptor的war包" class="headerlink" title="部署两个web adaptor的war包"></a>部署两个web adaptor的war包</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[arcgis@base java]$ cd /home/arcgis/webadaptor10.5/java</span><br><span class="line">[arcgis@base java]$ ll</span><br><span class="line">total 23292</span><br><span class="line">-rwxr-xr-x.  1 arcgis esrichina 23830437 Nov  3  2016 arcgis.war</span><br><span class="line">-rwxr-xr-x.  1 arcgis esrichina      340 Nov  3  2016 clientaccesspolicy.xml</span><br><span class="line">-rwxr-xr-x.  1 arcgis esrichina      224 Nov  3  2016 crossdomain.xml</span><br><span class="line">-rwxr-xr-x.  1 arcgis esrichina       70 Jan  1 03:50 init_webadaptor.csh</span><br><span class="line">-rwxr-xr-x.  1 arcgis esrichina       87 Jan  1 03:50 init_webadaptor.sh</span><br><span class="line">drwxr-xr-x.  2 arcgis esrichina       22 Jan  1 03:50 License</span><br><span class="line">drwxr-xr-x.  3 arcgis esrichina      122 Jan  1 03:50 Support</span><br><span class="line">drwxrwxr-x.  2 arcgis esrichina       85 Jan  1 03:50 tools</span><br><span class="line">-rwxr-xr-x.  1 arcgis esrichina     1549 Jan  1 03:50 uninstall_WebAdaptor</span><br><span class="line">drwxrwxr-x. 10 arcgis esrichina       92 Jan  1 03:50 WebAdaptorHelp</span><br></pre></td></tr></table></figure>

<p>这里有一个arcgis.war，待会作为portal端的web adaptor，另外，我们复制一份并并命名为server.war，用于server端的web adaptor。都放到之前所配置的tomcat的webapp目录中。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[arcgis@base java]$ cp /home/arcgis/webadaptor10.5/java/arcgis.war /usr/local/tomcat8/webapps/</span><br><span class="line">[arcgis@base java]$ cp /home/arcgis/webadaptor10.5/java/arcgis.war /usr/local/tomcat8/webapps/server.war</span><br></pre></td></tr></table></figure>

<h5 id="配置web-adaptor"><a href="#配置web-adaptor" class="headerlink" title="配置web adaptor"></a>配置web adaptor</h5><p>过程记录如下</p>
<p>___注意：___访问web adaptor需要在其所在的主机进行操作</p>
<p>先配server的，访问base.esri.com&#x2F;server</p>
<p><img src="/ArcGIS%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2%E6%96%B9%E6%A1%88/web-adaport-setting01.png"></p>
<p><img src="/ArcGIS%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2%E6%96%B9%E6%A1%88/web-adaport-setting03.png"></p>
<p>再配portal端的web adaptor，访问base.esri.com&#x2F;arcgis</p>
<p><img src="/ArcGIS%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2%E6%96%B9%E6%A1%88/web-adaport-setting04.png"></p>
<p><img src="/ArcGIS%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2%E6%96%B9%E6%A1%88/web-adaport-setting05.png" alt="web-adaport-setting05"></p>
<blockquote>
<p>这里是portal的用户名及密码<br>user:admin<br>password:admin123</p>
</blockquote>
<h2 id="ga1-esri-com-192-168-192-101"><a href="#ga1-esri-com-192-168-192-101" class="headerlink" title="ga1.esri.com[192.168.192.101]"></a>ga1.esri.com[192.168.192.101]</h2><h3 id="安装ArcGIS-Server-1"><a href="#安装ArcGIS-Server-1" class="headerlink" title="安装ArcGIS Server"></a>安装ArcGIS Server</h3><p>操作过程同base.esri.com</p>
<p>此处遇到一个问题，出现了ArcGIS Server无法启动的情况，报错信息为：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">Thu Feb 21 21:52:42 EST 2019:java.lang.RuntimeException: Failed to start JMX Server</span><br><span class="line">	at com.esri.arcgis.discovery.util.JMXServerController.start(JMXServerController.java:49)</span><br><span class="line">	at com.esri.arcgis.discovery.nodeagent.impl.NodeAgent.startJMXServer(NodeAgent.java:415)</span><br><span class="line">	at com.esri.arcgis.discovery.nodeagent.impl.NodeAgent.start(NodeAgent.java:134)</span><br><span class="line">	at com.esri.arcgis.discovery.nodeagent.impl.Main.start(Main.java:56)</span><br><span class="line">	at com.esri.arcgis.discovery.nodeagent.impl.Main.main(Main.java:299)</span><br><span class="line">Caused by: java.lang.IllegalArgumentException: Port value out of range: 65536</span><br><span class="line">	at java.net.ServerSocket.<span class="tag">&lt;<span class="name">init</span>&gt;</span>(ServerSocket.java:232)</span><br><span class="line">	at java.net.ServerSocket.<span class="tag">&lt;<span class="name">init</span>&gt;</span>(ServerSocket.java:181)</span><br><span class="line">	at com.esri.arcgis.discovery.util.IPUtil.isPortAvailable(IPUtil.java:668)</span><br><span class="line">	at com.esri.arcgis.discovery.util.JMXServerController.a(JMXServerController.java:213)</span><br><span class="line">	at com.esri.arcgis.discovery.util.JMXServerController.start(JMXServerController.java:38)</span><br><span class="line">	... 4 more</span><br><span class="line">Exception in thread &quot;main&quot; com.esri.arcgis.discovery.nodeagent.NodeAgentException: Could not start RMI connector. An instance of NodeAgent may be running or the JMX-RMI port is in use by another process.</span><br><span class="line">	at com.esri.arcgis.discovery.nodeagent.impl.NodeAgent.start(NodeAgent.java:137)</span><br><span class="line">	at com.esri.arcgis.discovery.nodeagent.impl.Main.start(Main.java:56)</span><br><span class="line">	at com.esri.arcgis.discovery.nodeagent.impl.Main.main(Main.java:299)</span><br><span class="line">Caused by: java.lang.RuntimeException: Failed to start JMX Server</span><br><span class="line">	at com.esri.arcgis.discovery.util.JMXServerController.start(JMXServerController.java:49)</span><br><span class="line">	at com.esri.arcgis.discovery.nodeagent.impl.NodeAgent.startJMXServer(NodeAgent.java:415)</span><br><span class="line">	at com.esri.arcgis.discovery.nodeagent.impl.NodeAgent.start(NodeAgent.java:134)</span><br><span class="line">	... 2 more</span><br><span class="line">Caused by: java.lang.IllegalArgumentException: Port value out of range: 65536</span><br><span class="line">	at java.net.ServerSocket.<span class="tag">&lt;<span class="name">init</span>&gt;</span>(ServerSocket.java:232)</span><br><span class="line">	at java.net.ServerSocket.<span class="tag">&lt;<span class="name">init</span>&gt;</span>(ServerSocket.java:181)</span><br><span class="line">	at com.esri.arcgis.discovery.util.IPUtil.isPortAvailable(IPUtil.java:668)</span><br><span class="line">	at com.esri.arcgis.discovery.util.JMXServerController.a(JMXServerController.java:213)</span><br><span class="line">	at com.esri.arcgis.discovery.util.JMXServerController.start(JMXServerController.java:38)</span><br><span class="line">	... 4 more</span><br></pre></td></tr></table></figure>

<p>通过测试发现，在使用虚拟机环境时，该101服务器虚拟机为同一个虚拟机模板复制过来的，无法在两台同源的虚拟机上同时启动ArcGIS Server，具体原因还没找到，暂时的解决办法是，不采用复制虚拟机的方法，而是重新建一个虚拟机并安装CentOS7，在全新的环境安装ArcGIS Server。</p>
<p>启动完成后创建新站点，</p>
<p><strong>PS: 问题原因找到了，每台机器的网卡UUID不能相同，修改了之后重启网络服务就好了。不过按道理来说网卡的UUID只应该在应用层面有效才对，对于不同机器应该不影响。推测可能是arcgis对该变量有引用，会根据此扫描局域网内相关机器，所以导致查询端口查到另一台机器上了，最终端口出现溢出</strong></p>
<h3 id="nfs共享目录创建及本地目录挂载"><a href="#nfs共享目录创建及本地目录挂载" class="headerlink" title="nfs共享目录创建及本地目录挂载"></a>nfs共享目录创建及本地目录挂载</h3><h4 id="nfs安装-创建共享目录"><a href="#nfs安装-创建共享目录" class="headerlink" title="nfs安装+创建共享目录"></a>nfs安装+创建共享目录</h4><h5 id="检查nfs依赖包是否安装"><a href="#检查nfs依赖包是否安装" class="headerlink" title="检查nfs依赖包是否安装"></a>检查nfs依赖包是否安装</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -qa nfs-utils rpcbind</span><br></pre></td></tr></table></figure>

<h5 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y nfs-utils rpcbind</span><br></pre></td></tr></table></figure>

<h5 id="开启nfs以及rpcbind并设为开机启动"><a href="#开启nfs以及rpcbind并设为开机启动" class="headerlink" title="开启nfs以及rpcbind并设为开机启动"></a>开启nfs以及rpcbind并设为开机启动</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@ga1 yum.repos.d]# systemctl start nfs</span><br><span class="line">[root@ga1 yum.repos.d]# systemctl status nfs</span><br><span class="line">● nfs-server.service - NFS server and services</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/nfs-server.service; disabled; vendor preset: disabled)</span><br><span class="line">   Active: active (exited) since Fri 2019-02-22 01:14:36 EST; 2s ago</span><br><span class="line">  Process: 37844 ExecStartPost=/bin/sh -c if systemctl -q is-active gssproxy; then systemctl restart gssproxy ; fi (code=exited, status=0/SUCCESS)</span><br><span class="line">  Process: 37827 ExecStart=/usr/sbin/rpc.nfsd $RPCNFSDARGS (code=exited, status=0/SUCCESS)</span><br><span class="line">  Process: 37825 ExecStartPre=/usr/sbin/exportfs -r (code=exited, status=0/SUCCESS)</span><br><span class="line"> Main PID: 37827 (code=exited, status=0/SUCCESS)</span><br><span class="line">   CGroup: /system.slice/nfs-server.service</span><br><span class="line"></span><br><span class="line">Feb 22 01:14:36 ga1.esri.com systemd[1]: Starting NFS server and services...</span><br><span class="line">Feb 22 01:14:36 ga1.esri.com systemd[1]: Started NFS server and services.</span><br><span class="line">[root@ga1 yum.repos.d]# systemctl start rpcbind</span><br><span class="line">[root@ga1 yum.repos.d]# systemctl status rpcbind</span><br><span class="line">● rpcbind.service - RPC bind service</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/rpcbind.service; enabled; vendor preset: enabled)</span><br><span class="line">   Active: active (running) since Fri 2019-02-22 01:14:31 EST; 26s ago</span><br><span class="line">  Process: 37802 ExecStart=/sbin/rpcbind -w $RPCBIND_ARGS (code=exited, status=0/SUCCESS)</span><br><span class="line"> Main PID: 37803 (rpcbind)</span><br><span class="line">   CGroup: /system.slice/rpcbind.service</span><br><span class="line">           └─37803 /sbin/rpcbind -w</span><br><span class="line"></span><br><span class="line">Feb 22 01:14:31 ga1.esri.com systemd[1]: Starting RPC bind service...</span><br><span class="line">Feb 22 01:14:31 ga1.esri.com systemd[1]: Started RPC bind service.</span><br><span class="line">[root@ga1 yum.repos.d]# systemctl enable nfs</span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/nfs-server.service to /usr/lib/systemd/system/nfs-server.service.</span><br><span class="line">[root@ga1 yum.repos.d]# systemctl enable rpcbind</span><br></pre></td></tr></table></figure>

<h5 id="配置nfs"><a href="#配置nfs" class="headerlink" title="配置nfs"></a>配置nfs</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@ga1 yum.repos.d]# mkdir -p /home/data/gaserver</span><br><span class="line">[root@ga1 yum.repos.d]# chown -R arcgis:esrichina /home/data</span><br><span class="line">[root@ga1 yum.repos.d]# mkdir -p /usr/local/nfsShareFiles</span><br><span class="line">[root@ga1 yum.repos.d]# chmod o+w /usr/local/nfsShareFiles</span><br><span class="line">[root@ga1 yum.repos.d]# vi etc/exports</span><br></pre></td></tr></table></figure>

<p>添加：<code>/usr/local/nfsShareFiles 192.168.192.0/24(rw,sync,all_squash)</code></p>
<p>其中<code>/usr/local/nfsShareFiles</code>即为需要共享的目录</p>
<p>重启nfs</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exportfs -r</span><br></pre></td></tr></table></figure>

<p>查看本机挂在情况</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@ga1 yum.repos.d]# showmount -e 127.0.0.1</span><br><span class="line">Export list for 127.0.0.1:</span><br><span class="line">/usr/local/nfsShareFiles 192.168.192.0/24</span><br></pre></td></tr></table></figure>
<h4 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h4><h5 id="执行挂载"><a href="#执行挂载" class="headerlink" title="执行挂载"></a>执行挂载</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@ga1 yum.repos.d]# mount -t nfs 192.168.192.101:/usr/local/nfsShareFiles /home/data/gaserver</span><br><span class="line">[root@ga1 yum.repos.d]# df -h</span><br><span class="line">Filesystem                                Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/mapper/centos-root                    22G   12G  9.6G  56% /</span><br><span class="line">devtmpfs                                  1.9G     0  1.9G   0% /dev</span><br><span class="line">tmpfs                                     1.9G     0  1.9G   0% /dev/shm</span><br><span class="line">tmpfs                                     1.9G   17M  1.9G   1% /run</span><br><span class="line">tmpfs                                     1.9G     0  1.9G   0% /sys/fs/cgroup</span><br><span class="line">/dev/sda1                                1014M  169M  846M  17% /boot</span><br><span class="line">tmpfs                                     378M     0  378M   0% /run/user/0</span><br><span class="line">tmpfs                                     378M     0  378M   0% /run/user/1000</span><br><span class="line">192.168.192.101:/usr/local/nfsShareFiles   22G   12G  9.6G  56% /home/data/gaserver</span><br></pre></td></tr></table></figure>

<h5 id="重启自动挂载"><a href="#重启自动挂载" class="headerlink" title="重启自动挂载"></a>重启自动挂载</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@ga2 ~]# chmod +x /etc/rc.d/rc.local</span><br><span class="line">[root@ga2 ~]# vim /etc/rc.local</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加下面一行</span></span><br><span class="line">bin/mount -t nfs 192.168.192.101:/usr/local/nfsShareFiles /home/data/gaserver</span><br></pre></td></tr></table></figure>



<p><em><strong>[相关参考资料]</strong></em></p>
<p>[nfs服务权限配置][<a href="https://blog.51cto.com/12332766/2126316]">https://blog.51cto.com/12332766/2126316]</a></p>
<p>[CentOS7上实现NFS共享][<a href="https://www.linuxidc.com/Linux/2017-06/144467.htm]">https://www.linuxidc.com/Linux/2017-06/144467.htm]</a></p>
<h4 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h4><p>将&#x2F;home&#x2F;data&#x2F;gaserver作为配置目录</p>
<p><img src="/ArcGIS%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2%E6%96%B9%E6%A1%88/nfs%E5%85%B1%E4%BA%AB%E9%85%8D%E7%BD%AE01.png"></p>
<p>一直下一步直到完成。</p>
<p>进入服务器-&gt;站点-&gt;GIS服务器&gt;目录，可见：</p>
<p><img src="/ArcGIS%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2%E6%96%B9%E6%A1%88/nfs%E5%85%B1%E4%BA%AB%E9%85%8D%E7%BD%AE02.png"></p>
<p>nfs配置完成</p>
<h2 id="ga2-esri-com-192-168-192-102"><a href="#ga2-esri-com-192-168-192-102" class="headerlink" title="ga2.esri.com[192.168.192.102]"></a>ga2.esri.com[192.168.192.102]</h2><h3 id="nfs挂载"><a href="#nfs挂载" class="headerlink" title="nfs挂载"></a>nfs挂载</h3><p>作为nfs所配置的网段下的客户端，需要进行挂载</p>
<p>nfs相关软件安装及启动可参照101服务器，下面是挂载操作，也与101服务器相同。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@ga1 yum.repos.d]# mkdir -p /home/data/gaserver</span><br><span class="line">[root@ga1 yum.repos.d]# chown -R arcgis:esrichina /home/data</span><br><span class="line">[root@ga1 yum.repos.d]# mkdir -p /usr/local/nfsShareFiles</span><br><span class="line">[root@ga1 yum.repos.d]# chmod o+w /home/data/gaserver</span><br><span class="line">[root@ga1 yum.repos.d]# chmod o+w /usr/local/nfsShareFiles</span><br><span class="line">[root@ga1 yum.repos.d]# mount -t nfs 192.168.192.101:/usr/local/nfsShareFiles /home/data/gaserver</span><br></pre></td></tr></table></figure>

<h3 id="安装ArcGIS-Server-2"><a href="#安装ArcGIS-Server-2" class="headerlink" title="安装ArcGIS Server"></a>安装ArcGIS Server</h3><p>操作过程同base.esri.com，但</p>
<p>此处ArcGIS Server在首次访问&#x2F;arcgis&#x2F;manager时，选择<strong>加入现有站点</strong></p>
<p>URL填写<code>https://ga1.esri.com:6443</code></p>
<p><strong>注意：各台服务器的hosts文件都需要加上相应配置，不然访问不到。</strong></p>
<p>之后一直下一步即可。</p>
<p>完成后可登陆ga1中，查看[集群]下是否存在ga2，以及[计算机]选项中的ga2是否处于启动状态。</p>
<p><img src="/ArcGIS%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2%E6%96%B9%E6%A1%88/ga%E9%9B%86%E7%BE%A401.png"></p>
<p><img src="/ArcGIS%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2%E6%96%B9%E6%A1%88/ga%E9%9B%86%E7%BE%A402.png" alt="ga集群02"></p>
<h2 id="datastore-esri-com-192-168-192-103"><a href="#datastore-esri-com-192-168-192-103" class="headerlink" title="datastore.esri.com[192.168.192.103]"></a>datastore.esri.com[192.168.192.103]</h2><h3 id="安装ArcGIS-DataStore-1"><a href="#安装ArcGIS-DataStore-1" class="headerlink" title="安装ArcGIS DataStore"></a>安装ArcGIS DataStore</h3><p>安装过程与100服务器中的datastore相同</p>
<p>此处的datastore需要配置为时空大数据存储，服务器URL填写100服务器的url</p>
<p><img src="/ArcGIS%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2%E6%96%B9%E6%A1%88/%E6%97%B6%E7%A9%BA%E5%A4%A7%E6%95%B0%E6%8D%AEdatastore01.png"></p>
<p><img src="/ArcGIS%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2%E6%96%B9%E6%A1%88/%E6%97%B6%E7%A9%BA%E5%A4%A7%E6%95%B0%E6%8D%AEdatastore02.png"></p>
<p><img src="/ArcGIS%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2%E6%96%B9%E6%A1%88/%E6%97%B6%E7%A9%BA%E5%A4%A7%E6%95%B0%E6%8D%AEdatastore03.png"></p>
<p><img src="/ArcGIS%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2%E6%96%B9%E6%A1%88/%E6%97%B6%E7%A9%BA%E5%A4%A7%E6%95%B0%E6%8D%AEdatastore04.png" alt="时空大数据datastore04"></p>
<p><em><strong>[参考资料]</strong></em></p>
<p>[ArcGIS Server和Data Store的注销与重新配置][<a href="https://blog.csdn.net/smss007/article/details/76154962]">https://blog.csdn.net/smss007/article/details/76154962]</a></p>
<h1 id="服务器配置-1"><a href="#服务器配置-1" class="headerlink" title="服务器配置"></a>服务器配置</h1><p>登录<a href="https://base.esri.com/arcgis/home%E9%97%A8%E6%88%B7%E5%85%A5%E5%8F%A3">https://base.esri.com/arcgis/home门户入口</a></p>
<p>user:admin  password:admin123</p>
<h2 id="联合ArcGIS-Server"><a href="#联合ArcGIS-Server" class="headerlink" title="联合ArcGIS Server"></a>联合ArcGIS Server</h2><p>需要进入My Organization-&gt;Edit Settings-&gt;Servers-&gt;Federated Servers-&gt;add server进行编辑。</p>
<p>通过web adaptor访问portal端后发现，无法进行编辑设置？</p>
<p><img src="/ArcGIS%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2%E6%96%B9%E6%A1%88/%E9%85%8D%E7%BD%AE%E8%81%94%E5%90%88%E6%9C%8D%E5%8A%A1%E5%99%A801.png"></p>
<p>查阅资料：<a href="https://community.esri.com/thread/189808-edit-settings-is-disabled-when-accessing-portal-using-the-web-adaptor">https://community.esri.com/thread/189808-edit-settings-is-disabled-when-accessing-portal-using-the-web-adaptor</a></p>
<p>解决方法是：</p>
<p>访问<a href="https://base.esri.com/arcgis/portaladmin/federation/servers/federate">https://base.esri.com/arcgis/portaladmin/federation/servers/federate</a></p>
<p>通过其REST API来完成联合</p>
<p><img src="/ArcGIS%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2%E6%96%B9%E6%A1%88/%E9%85%8D%E7%BD%AE%E8%81%94%E5%90%88%E6%9C%8D%E5%8A%A1%E5%99%A802.png"></p>
<p><img src="/ArcGIS%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2%E6%96%B9%E6%A1%88/%E9%85%8D%E7%BD%AE%E8%81%94%E5%90%88%E6%9C%8D%E5%8A%A1%E5%99%A803.png"></p>
<p>Service Url为webadaptor的访问地址</p>
<p>Admin Url为不通过webadaptor访问arcgis server的地址</p>
<p><strong>原因：</strong> <a href="https://support.esri.com/zh-cn/bugs/nimbus/QlVHLTAwMDEwMjU0NA==">https://support.esri.com/zh-cn/bugs/nimbus/QlVHLTAwMDEwMjU0NA==</a></p>
<h2 id="配置托管服务器"><a href="#配置托管服务器" class="headerlink" title="配置托管服务器"></a>配置托管服务器</h2><p>由于web adaptor不知道啥原因，没办法进入edit setting界面，所以这里通过访问<a href="https://base.esri.com:7443/arcgis/home%E6%9D%A5%E7%BB%95%E8%BF%87web">https://base.esri.com:7443/arcgis/home来绕过web</a> adaptor。</p>
<p>如图所示，上面一个框就是刚刚已经配置好的联合服务器，而下面一个框则是需要将hosting server（托管服务器）选择为之前配置的联合服务器中的<em><strong>base.esri.com&#x2F;arcgis</strong></em>即可</p>
<p><img src="/ArcGIS%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2%E6%96%B9%E6%A1%88/%E9%85%8D%E7%BD%AE%E6%89%98%E7%AE%A1%E6%9C%8D%E5%8A%A1%E5%99%A801.png"></p>
<h2 id="联合ArcGIS-GeoAnalytics-Server"><a href="#联合ArcGIS-GeoAnalytics-Server" class="headerlink" title="联合ArcGIS GeoAnalytics Server"></a>联合ArcGIS GeoAnalytics Server</h2><p><em><strong>什么是ArcGIS GeoAnalytics Server？</strong></em></p>
<p>ArcGIS GeoAnalytics Server 引入了基于矢量的要素数据的分布式计算，可用于分析大数据或通过 ArcGIS Pro 和 Portal for ArcGIS 提高传统 ArcGIS Desktop 分析工作流的速度。还可以从 GeoAnalytics Server 应用程序中使用 Insights for ArcGIS 功能。</p>
<p><em><strong>如何部署ArcGIS GeoAnalytics Server？</strong></em></p>
<p>需要三个站点：</p>
<ul>
<li><p>站点 1：基础 ArcGIS Enterprise 部署  <em><strong>base.esri.com[192.168.192.100]</strong></em><br>其中包括以下组件：</p>
<ul>
<li><p>Portal for ArcGIS</p>
</li>
<li><p>已授权为 GIS 服务器并设置为门户托管服务器的 ArcGIS Server</p>
</li>
<li><p>两个 ArcGIS Web Adaptor 安装程序 - 一个配置在门户中，另一个配置在 GIS 服务器中。</p>
</li>
<li><p>至少两个 ArcGIS Data Store 安装程序 - 一个配置为关系数据存储，另一个配置为时空大数据存储(站点3)。您应该将时空大数据存储部署在与其他任何 ArcGIS Enterprise 组件所位于计算机不同的计算机上。您可以在时空大数据存储中包含多台计算机。有关站点架构建议的详细信息，请参阅<a href="http://enterprise.arcgis.com/zh-cn/server/latest/get-started/windows/additional-server-deployment.htm">其他服务器部署</a>。</p>
</li>
</ul>
</li>
<li><p>站点2：ArcGIS GeoAnalytics Server  <em><strong>ga1.esri.com[192.168.192.101&#x2F;102]</strong></em></p>
<p>此站点需要许可为 ArcGIS Server 并使用以下步骤进行配置的 ArcGIS GeoAnalytics Server 站点。</p>
</li>
<li><p>站点3：时空大数据 ArcGIS DataStore  <em><strong>datastore.esri.com[192.168.192.103]</strong></em></p>
</li>
</ul>
<h1 id="ArcGIS-相关文档连接"><a href="#ArcGIS-相关文档连接" class="headerlink" title="ArcGIS 相关文档连接"></a>ArcGIS 相关文档连接</h1><p>[SDK&amp;Documents][<a href="https://developers.arcgis.com/downloads/apis-and-sdks]">https://developers.arcgis.com/downloads/apis-and-sdks]</a></p>
<p>[<a href="https://developers.arcgis.com/downloads/apis-and-sdks]">https://developers.arcgis.com/downloads/apis-and-sdks]</a>: <a href="https://developers.arcgis.com/downloads/apis-and-sdks">https://developers.arcgis.com/downloads/apis-and-sdks</a>	“SDK&amp;Documents”</p>
]]></content>
      <categories>
        <category>ArcGIS</category>
      </categories>
      <tags>
        <tag>环境搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS-7 安装Oracle</title>
    <url>/2018/11/04/CentOS-7%20%E5%AE%89%E8%A3%85Oracle/</url>
    <content><![CDATA[<blockquote>
<p>由于客户生产环境Oracle需要做交叉备份及归档备份，且自己Oracle水平又不高，不敢直接在生产环境动手。但公司的集成环境也有很多项目要跑，所以干脆自己虚拟机装一个测。因为虚拟机已有装好的ubuntu，前两天就直接在ubuntu上装了。但是中间遇到了不小的阻碍，主要是某些依赖拉不到，而ubuntu的依赖安装又和yum冲突，所以昨天决定直接不用ubuntu，改用CentOS-7，总算是顺利完成了。详细过程记录如下。</p>
</blockquote>
<!-- toc -->

<span id="more"></span>

<h4 id="安装JDK1-8"><a href="#安装JDK1-8" class="headerlink" title="安装JDK1.8"></a>安装JDK1.8</h4><h6 id="删除预装的jdk"><a href="#删除预装的jdk" class="headerlink" title="删除预装的jdk"></a>删除预装的jdk</h6><p>如果系统中事先存在自带的jdk，则需要删除<br>卸载centos原本自带的openjdk，运行命令：rpm -qa | grep java<br>然后通过    rpm -e –nodeps   后面跟系统自带的jdk名    这个命令来删除系统自带的jdk<br>例如：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -e --nodeps java-1.8.0-openjdk-1.8.0.102-4.b14.el7.x86_64</span><br><span class="line">rpm -e --nodeps java-1.8.0-openjdk-headless-1.8.0.102-4.b14.el7.x86_64</span><br><span class="line">rpm -e --nodeps java-1.7.0-openjdk-headless-1.7.0.111-2.6.7.8.el7.x86_64</span><br><span class="line">rpm -e --nodeps java-1.7.0-openjdk-1.7.0.111-2.6.7.8.el7.x86_64</span><br></pre></td></tr></table></figure>

<h6 id="下载jdk"><a href="#下载jdk" class="headerlink" title="下载jdk"></a>下载jdk</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget http://download.oracle.com/otn-pub/java/jdk/8u161-b12/2f38c3b165be4555a1fa6e98c45e0808/jdk-8u161-linux-x64.tar.gz</span><br></pre></td></tr></table></figure>
<p>可以wget下，我这里本地有jdk-8u161-linux-x64.tar.gz就直接用了<br>执行步骤如下<br>上传安装包至&#x2F;root&#x2F;java目录下，执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -zxvf jdk-8u161-linux-x64.tar.gz</span><br></pre></td></tr></table></figure>
<h6 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h6><p>全局环境变量是通过&#x2F;etc&#x2F;profile配置的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@192 jdk1.8.0_161]# vi /etc/profile</span><br></pre></td></tr></table></figure>
<p>在文件最下面添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/root/java/jdk1.8.0_161</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br></pre></td></tr></table></figure>
<p>wq保存后执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">. /etc/profile</span><br></pre></td></tr></table></figure>
<p>使环境变量生效，注意 . 与 &#x2F; 之间的空格  </p>
<h6 id="检查jdk是否生效"><a href="#检查jdk是否生效" class="headerlink" title="检查jdk是否生效"></a>检查jdk是否生效</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@192 jdk1.8.0_161]# java -version</span><br><span class="line">java version &quot;1.8.0_161&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_161-b12)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.161-b12, mixed mode)</span><br></pre></td></tr></table></figure>



<h4 id="通过yum快速安装Oracle依赖"><a href="#通过yum快速安装Oracle依赖" class="headerlink" title="通过yum快速安装Oracle依赖"></a>通过yum快速安装Oracle依赖</h4><p>之前用ubuntu，各种依赖下不到（撞墙）。换了CentOS，yum还是挺好用的，依赖也比较好找。关键是不需要一个个去找依赖（ubuntu的apt-get很多东西下不到，比如很重要的一个glibc）<br>最简便的方法：<br>执行  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget http://public-yum.oracle.com/public-yum-ol7.repo -O /etc/yum.repos.d/public-yum-ol7.repo</span><br><span class="line">wget http://public-yum.oracle.com/RPM-GPG-KEY-oracle-ol7 -O /etc/pki/rpm-gpg/RPM-GPG-KEY-oracle</span><br></pre></td></tr></table></figure>
<p>执行结果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@bogon yum.repos.d]# wget http://public-yum.oracle.com/public-yum-ol7.repo -O /etc/yum.repos.d/public-yum-ol7.repo</span><br><span class="line">--2018-10-25 20:05:26--  http://public-yum.oracle.com/public-yum-ol7.repo</span><br><span class="line">Resolving public-yum.oracle.com (public-yum.oracle.com)... 69.192.9.199</span><br><span class="line">Connecting to public-yum.oracle.com (public-yum.oracle.com)|69.192.9.199|:80... connected.</span><br><span class="line">HTTP request sent, awaiting response... 200 OK</span><br><span class="line">Length: 14368 (14K) [text/plain]</span><br><span class="line">Saving to: ‘/etc/yum.repos.d/public-yum-ol7.repo’</span><br><span class="line"></span><br><span class="line">100%[====================================================================================================================================================================================================================================&gt;] 14,368      --.-K/s   in 0.01s   </span><br><span class="line"></span><br><span class="line">2018-10-25 20:05:26 (1.33 MB/s) - ‘/etc/yum.repos.d/public-yum-ol7.repo’ saved [14368/14368]</span><br><span class="line"></span><br><span class="line">[root@bogon yum.repos.d]# wget http://public-yum.oracle.com/RPM-GPG-KEY-oracle-ol7 -O /etc/pki/rpm-gpg/RPM-GPG-KEY-oracle</span><br><span class="line">--2018-10-25 20:05:40--  http://public-yum.oracle.com/RPM-GPG-KEY-oracle-ol7</span><br><span class="line">Resolving public-yum.oracle.com (public-yum.oracle.com)... 69.192.9.199</span><br><span class="line">Connecting to public-yum.oracle.com (public-yum.oracle.com)|69.192.9.199|:80... connected.</span><br><span class="line">HTTP request sent, awaiting response... 200 OK</span><br><span class="line">Length: 1011 [text/plain]</span><br><span class="line">Saving to: ‘/etc/pki/rpm-gpg/RPM-GPG-KEY-oracle’</span><br><span class="line"></span><br><span class="line">100%[====================================================================================================================================================================================================================================&gt;] 1,011       --.-K/s   in 0s      </span><br><span class="line"></span><br><span class="line">2018-10-25 20:05:41 (296 MB/s) - ‘/etc/pki/rpm-gpg/RPM-GPG-KEY-oracle’ saved [1011/1011]</span><br></pre></td></tr></table></figure>
<p><strong>注意：这里有个坑，CentOS-7的linux版本需要下public-yum-ol7.repo，网上很多教程都是让下public-yum-ol6.repo，其实是CentOS-6用的，yum install的时候会有依赖冲突，在这里卡了很久。。。</strong><br>完成后备份一下这个目录的文件到其他目录，这个文件夹是修改系统后日志和原本的内核配置备份</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/var/log/oracle-rdbms-server-11gR2-preinstall</span><br></pre></td></tr></table></figure>


<h4 id="系统中的参数设置"><a href="#系统中的参数设置" class="headerlink" title="系统中的参数设置"></a>系统中的参数设置</h4><h6 id="修改-x2F-etc-x2F-sysctl-conf"><a href="#修改-x2F-etc-x2F-sysctl-conf" class="headerlink" title="修改&#x2F;etc&#x2F;sysctl.conf"></a>修改&#x2F;etc&#x2F;sysctl.conf</h6><p>在&#x2F;etc&#x2F;sysctl.conf文件中，添加以下内核参数  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fs.aio-max-nr = 1048576</span><br><span class="line">fs.file-max = 6815744</span><br><span class="line">kernel.shmall = 2097152</span><br><span class="line">kernel.shmmax = 536870912</span><br><span class="line">kernel.shmmni = 4096</span><br><span class="line">kernel.sem = 250 32000 100 128</span><br><span class="line">net.ipv4.ip_local_port_range = 9000 65500</span><br><span class="line">net.core.rmem_default = 262144</span><br><span class="line">net.core.rmem_max = 4194304</span><br><span class="line">net.core.wmem_default = 262144</span><br><span class="line">net.core.wmem_max = 1048586</span><br></pre></td></tr></table></figure>
<p>输入wq保存即可</p>
<h6 id="加载内核参数"><a href="#加载内核参数" class="headerlink" title="加载内核参数"></a>加载内核参数</h6><p>执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@bogon yum.repos.d]# sysctl -f</span><br><span class="line">fs.file-max = 6815744</span><br><span class="line">kernel.sem = 250 32000 100 128</span><br><span class="line">kernel.shmmni = 4096</span><br><span class="line">kernel.shmall = 1073741824</span><br><span class="line">kernel.shmmax = 4398046511104</span><br><span class="line">kernel.panic_on_oops = 1</span><br><span class="line">net.core.rmem_default = 262144</span><br><span class="line">net.core.rmem_max = 4194304</span><br><span class="line">net.core.wmem_default = 262144</span><br><span class="line">net.core.wmem_max = 1048576</span><br><span class="line">net.ipv4.conf.all.rp_filter = 2</span><br><span class="line">net.ipv4.conf.default.rp_filter = 2</span><br><span class="line">fs.aio-max-nr = 1048576</span><br><span class="line">net.ipv4.ip_local_port_range = 9000 65500</span><br><span class="line">fs.aio-max-nr = 1048576</span><br><span class="line">fs.file-max = 6815744</span><br><span class="line">kernel.shmall = 2097152</span><br><span class="line">kernel.shmmax = 536870912</span><br><span class="line">kernel.shmmni = 4096</span><br><span class="line">kernel.sem = 250 32000 100 128</span><br><span class="line">net.ipv4.ip_local_port_range = 9000 65500</span><br><span class="line">net.core.rmem_default = 262144</span><br><span class="line">net.core.rmem_max = 4194304</span><br><span class="line">net.core.wmem_default = 262144</span><br><span class="line">net.core.wmem_max = 1048586</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>该命令sysctl.conf -p的效果一样</p>
<h6 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl disable firewalld.service</span><br></pre></td></tr></table></figure>
<p>执行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@192 ~]# systemctl disable firewalld.service</span><br><span class="line">Removed symlink /etc/systemd/system/multi-user.target.wants/firewalld.service.</span><br><span class="line">Removed symlink /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h6 id="关闭SELINUX（需重启生效）"><a href="#关闭SELINUX（需重启生效）" class="headerlink" title="关闭SELINUX（需重启生效）"></a>关闭SELINUX（需重启生效）</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@192 ~]# vi /etc/selinux/config</span><br><span class="line">[root@192 ~]# cat /etc/selinux/config</span><br><span class="line"></span><br><span class="line"># This file controls the state of SELinux on the system.</span><br><span class="line"># SELINUX= can take one of these three values:</span><br><span class="line">#     enforcing - SELinux security policy is enforced.</span><br><span class="line">#     permissive - SELinux prints warnings instead of enforcing.</span><br><span class="line">#     disabled - No SELinux policy is loaded.</span><br><span class="line">#SELINUX=enforcing</span><br><span class="line">SELINUX=disabled #此处修改为disabled</span><br><span class="line"># SELINUXTYPE= can take one of three two values:</span><br><span class="line">#     targeted - Targeted processes are protected,</span><br><span class="line">#     minimum - Modification of targeted policy. Only selected processes are protected. </span><br><span class="line">#     mls - Multi Level Security protection.</span><br><span class="line">SELINUXTYPE=targeted </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="配置oracle系统配置文件-amp-授权"><a href="#配置oracle系统配置文件-amp-授权" class="headerlink" title="配置oracle系统配置文件&amp;授权"></a>配置oracle系统配置文件&amp;授权</h4><p>执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat &gt;&gt; /etc/oraInst.loc &lt;&lt;EOF</span><br><span class="line">inventory_loc=/home/oracle/ora11g/oraInventory</span><br><span class="line">inst_group=oinstall</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<p>执行结果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@bogon ~]# pwd</span><br><span class="line">/root</span><br><span class="line">[root@bogon ~]# cat &gt;&gt; /etc/oraInst.loc &lt;&lt;EOF</span><br><span class="line">&gt; inventory_loc=/home/oracle/ora11g/oraInventory</span><br><span class="line">&gt; inst_group=oinstall</span><br><span class="line">&gt; EOF</span><br><span class="line">[root@bogon ~]# ll</span><br><span class="line">total 4</span><br><span class="line">-rw-------. 1 root root 1528 Oct 25 16:03 anaconda-ks.cfg</span><br><span class="line">[root@bogon ~]# chmod 664 /etc/oraInst.loc</span><br></pre></td></tr></table></figure>



<h4 id="创建oracle安装的目录-amp-授权"><a href="#创建oracle安装的目录-amp-授权" class="headerlink" title="创建oracle安装的目录&amp;授权"></a>创建oracle安装的目录&amp;授权</h4><p>依次执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@bogon ~]# mkdir -p /u01/app/</span><br><span class="line">[root@bogon ~]# mkdir /u01/tmp</span><br><span class="line">[root@bogon ~]# chown -R oracle:oinstall /u01/app/</span><br><span class="line">[root@bogon ~]# chmod -R 775 /u01/app/</span><br><span class="line">[root@bogon ~]# chmod a+wr /u01/tmp</span><br><span class="line">[root@bogon ~]# passwd oracle</span><br><span class="line">Changing password for user oracle.</span><br><span class="line">New password: </span><br><span class="line">Retype new password: </span><br><span class="line">passwd: all authentication tokens updated successfully.</span><br></pre></td></tr></table></figure>
<p>给oinstall组添加oracle用户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@bogon ~]# usermod -a -G oinstall oracle</span><br></pre></td></tr></table></figure>

<hr>
<p><strong>新建oracle用户连接，切换至oracle用户</strong></p>
<h4 id="配置用户环境-amp-上传安装包"><a href="#配置用户环境-amp-上传安装包" class="headerlink" title="配置用户环境&amp;上传安装包"></a>配置用户环境&amp;上传安装包</h4><h6 id="为oracle用户添加一些必要的环境"><a href="#为oracle用户添加一些必要的环境" class="headerlink" title="为oracle用户添加一些必要的环境"></a>为oracle用户添加一些必要的环境</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat &gt;&gt; /home/oracle/.bash_profile &lt;&lt;EOF</span><br><span class="line">TMP=/u01/tmp</span><br><span class="line">TMPDIR=/u01/tmp</span><br><span class="line">export TMP TMPDIR</span><br><span class="line">ORACLE_BASE=/u01/app/oracle</span><br><span class="line">ORACLE_HOME=/u01/app/oracle/product/11.2.0/dbhome_1</span><br><span class="line">ORACLE_SID=orcl</span><br><span class="line">PATH=$ORACLE_HOME/bin:$PATH</span><br><span class="line">export ORACLE_BASE ORACLE_SID ORACLE_HOME PATH</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<p>最后执行以下命令使环境变量生效</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source .bash_profile</span><br></pre></td></tr></table></figure>

<p>执行结果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[oracle@bogon ~]$ cat &gt;&gt; /home/oracle/.bash_profile &lt;&lt;EOF</span><br><span class="line">&gt; TMP=/u01/tmp</span><br><span class="line">&gt; TMPDIR=/u01/tmp</span><br><span class="line">&gt; export TMP TMPDIR</span><br><span class="line">&gt; ORACLE_BASE=/u01/app/oracle</span><br><span class="line">&gt; ORACLE_HOME=/u01/app/oracle/product/11.2.0/dbhome_1</span><br><span class="line">&gt; ORACLE_SID=orcl</span><br><span class="line">&gt; PATH=$ORACLE_HOME/bin:$PATH</span><br><span class="line">&gt; export ORACLE_BASE ORACLE_SID ORACLE_HOME PATH</span><br><span class="line">&gt; EOF</span><br><span class="line">[oracle@bogon ~]$ source .bash_profile</span><br><span class="line">[oracle@bogon ~]$ $ORACLE_HOME</span><br><span class="line">-bash: /u01/app/oracle/product/11.2.0/dbhome_1: No such file or directory</span><br></pre></td></tr></table></figure>
<h6 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h6><p>将<br>linux.x64_11gR2_database_1of2.zip<br>linux.x64_11gR2_database_2of2.zip<br>上传至&#x2F;home&#x2F;oracle</p>
<h6 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h6><p>这个没啥好说的，直接解压</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unzip linux.x64_11gR2_database_1of2.zip </span><br><span class="line">unzip linux.x64_11gR2_database_2of2.zip </span><br></pre></td></tr></table></figure>

<h6 id="检查文件夹权限（root操作）"><a href="#检查文件夹权限（root操作）" class="headerlink" title="检查文件夹权限（root操作）"></a>检查文件夹权限（root操作）</h6><p>database文件夹需要切换成oracle用户权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chown -R oracle:oinstall /home/oracle/database</span><br></pre></td></tr></table></figure>


<h4 id="安装数据库"><a href="#安装数据库" class="headerlink" title="安装数据库"></a>安装数据库</h4><h6 id="配置db-install-rsp"><a href="#配置db-install-rsp" class="headerlink" title="配置db_install.rsp"></a>配置db_install.rsp</h6><p>该文件用于静默安装使用<br>备份&#x2F;home&#x2F;oracle&#x2F;database&#x2F;response到&#x2F;home&#x2F;oracle&#x2F;rsp&#x2F;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp -r /home/oracle/database/response /home/oracle/rsp</span><br></pre></td></tr></table></figure>
<p>进入rsp文件夹，新建安装响应文件db_install.rsp</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[oracle@bogon ~]$ cd rsp</span><br><span class="line">[oracle@bogon rsp]$ touch db_install.rsp</span><br></pre></td></tr></table></figure>
<p>编辑该文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">##我的/home/oracle/rsp/db_install.rsp</span><br><span class="line">oracle.install.responseFileVersion=/oracle/install/rspfmt_dbinstall_response_schema_v11_2_0</span><br><span class="line">#INSTALL_DB_AND_CONFIG安装并自动配置数据库实例和监听 建议首次安装用这个</span><br><span class="line">#不然配置另外两个文件，新建实例和监听</span><br><span class="line">oracle.install.option=INSTALL_DB_AND_CONFIG</span><br><span class="line">ORACLE_HOSTNAME=localhost</span><br><span class="line">UNIX_GROUP_NAME=oinstall</span><br><span class="line">INVENTORY_LOCATION=/home/oracle/ora11g/oraInventory</span><br><span class="line">SELECTED_LANGUAGES=zh_CN,en</span><br><span class="line">ORACLE_HOME=/u01/app/oracle/product/11.2.0/dbhome_1</span><br><span class="line">ORACLE_BASE=/u01/app/oracle</span><br><span class="line">oracle.install.db.InstallEdition=EE</span><br><span class="line">oracle.install.db.isCustomInstall=true</span><br><span class="line">oracle.install.db.customComponents=oracle.server:11.2.0.1.0,oracle.sysman.ccr:10.2.7.0.0,oracle.xdk:11.2.0.1.0,oracle.rdbms.oci:11.2.0.1.0,oracle.network:11.2.0.1.0,oracle.network.listener:11.2.0.1.0,oracle.rdbms:11.2.0.1.0,oracle.options:11.2.0.1.0,oracle.rdbms.partitioning:11.2.0.1.0,oracle.oraolap:11.2.0.1.0,oracle.rdbms.dm:11.2.0.1.0,oracle.rdbms.dv:11.2.0.1.0,orcle.rdbms.lbac:11.2.0.1.0,oracle.rdbms.rat:11.2.0.1.0</span><br><span class="line">oracle.install.db.DBA_GROUP=dba</span><br><span class="line">oracle.install.db.OPER_GROUP=oinstall</span><br><span class="line">oracle.install.db.config.starterdb.type=GENERAL_PURPOSE</span><br><span class="line">#这个是服务名</span><br><span class="line">oracle.install.db.config.starterdb.globalDBName=orcl.lts</span><br><span class="line">#实例sid</span><br><span class="line">oracle.install.db.config.starterdb.SID=orcl</span><br><span class="line">oracle.install.db.config.starterdb.characterSet=AL32UTF8</span><br><span class="line">oracle.install.db.config.starterdb.memoryOption=true</span><br><span class="line">#最小256M</span><br><span class="line">oracle.install.db.config.starterdb.memoryLimit=1024</span><br><span class="line">#是否安装scott和hr</span><br><span class="line">oracle.install.db.config.starterdb.installExampleSchemas=true</span><br><span class="line">oracle.install.db.config.starterdb.enableSecuritySettings=true</span><br><span class="line">#密码全设置成Helloworld_123，初始的sys的dba账号会是这个密码 (需要大小写字母加某些特殊符号，比如下划线，井号，很多其他特殊字符不支持)</span><br><span class="line">oracle.install.db.config.starterdb.password.ALL=Helloworld_123</span><br><span class="line">oracle.install.db.config.starterdb.control=DB_CONTROL</span><br><span class="line">oracle.install.db.config.starterdb.dbcontrol.enableEmailNotification=false</span><br><span class="line">oracle.install.db.config.starterdb.automatedBackup.enable=false</span><br><span class="line">oracle.install.db.config.starterdb.storageType=FILE_SYSTEM_STORAGE</span><br><span class="line">oracle.install.db.config.starterdb.fileSystemStorage.dataLocation=/u01/app/oracle/oradata</span><br><span class="line">#true</span><br><span class="line">DECLINE_SECURITY_UPDATES=true</span><br></pre></td></tr></table></figure>

<h6 id="执行静默安装"><a href="#执行静默安装" class="headerlink" title="执行静默安装"></a>执行静默安装</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/home/oracle/database/runInstaller -silent -ignorePrereq  -responseFile /home/oracle/rsp/db_install.rsp</span><br></pre></td></tr></table></figure>
<p>可以用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tail -f /home/oracle/ora11g/oraInventory/logs/installActions2018-10-25_11-30-37PM.log 400</span><br></pre></td></tr></table></figure>
<p>追踪日志</p>
<p>安装成功后会有这样一段提示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INFO: Read: Look at the log file &quot;/u01/app/oracle/cfgtoollogs/dbca/orcl/orcl.log&quot; for further details.</span><br><span class="line">The following configuration scripts need to be executed as the &quot;root&quot; user. </span><br><span class="line"> #!/bin/sh </span><br><span class="line"> #Root scripts to run</span><br><span class="line"></span><br><span class="line">/u01/app/oracle/product/11.2.0/dbhome_1/root.sh</span><br><span class="line">To execute the configuration scripts:</span><br><span class="line">	 1. Open a terminal window </span><br><span class="line">	 2. Log in as &quot;root&quot; </span><br><span class="line">	 3. Run the scripts </span><br><span class="line">	 4. Return to this window and hit &quot;Enter&quot; key to continue </span><br><span class="line"></span><br><span class="line">Successfully Setup Software.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>提示说需要用root去执行一下&#x2F;u01&#x2F;app&#x2F;oracle&#x2F;product&#x2F;11.2.0&#x2F;dbhome_1&#x2F;root.sh  </p>
<hr>
<p>切换到root账号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@192 ~]# cd /u01/app/oracle/product/11.2.0/dbhome_1/</span><br><span class="line">[root@192 dbhome_1]# ./root.sh </span><br><span class="line">Check /u01/app/oracle/product/11.2.0/dbhome_1/install/root_192.168.192.142_2018-10-25_23-46-33.log for the output of root script</span><br><span class="line">[root@192 dbhome_1]# cat /u01/app/oracle/product/11.2.0/dbhome_1/install/root_192.168.192.142_2018-10-25_23-46-33.log</span><br><span class="line"></span><br><span class="line">Running Oracle 11g root.sh script...</span><br><span class="line"></span><br><span class="line">The following environment variables are set as:</span><br><span class="line">    ORACLE_OWNER= oracle</span><br><span class="line">    ORACLE_HOME=  /u01/app/oracle/product/11.2.0/dbhome_1</span><br><span class="line"></span><br><span class="line">Creating /etc/oratab file...</span><br><span class="line">Entries will be added to the /etc/oratab file as needed by</span><br><span class="line">Database Configuration Assistant when a database is created</span><br><span class="line">Finished running generic part of root.sh script.</span><br><span class="line">Now product-specific root actions will be performed.</span><br><span class="line">Finished product-specific root actions.</span><br></pre></td></tr></table></figure>

<p>搞定了！！！</p>
<hr>
<p>切换到oracle用户</p>
<h4 id="测试连接"><a href="#测试连接" class="headerlink" title="测试连接"></a>测试连接</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[oracle@192 ~]$ sqlplus</span><br><span class="line">-bash: sqlplus: command not found</span><br></pre></td></tr></table></figure>
<p>WTF？？？<br>先添加环境变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[oracle@192 ~]$ vim /home/oracle/.bash_profile</span><br><span class="line">[oracle@192 ~]$ source .bash_profile</span><br><span class="line">[oracle@192 ~]$ cat /home/oracle/.bash_profile</span><br><span class="line"># .bash_profile</span><br><span class="line"></span><br><span class="line"># Get the aliases and functions</span><br><span class="line">if [ -f ~/.bashrc ]; then</span><br><span class="line">	. ~/.bashrc</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># User specific environment and startup programs</span><br><span class="line"></span><br><span class="line">PATH=$PATH:$HOME/.local/bin:$HOME/bin</span><br><span class="line"></span><br><span class="line">export PATH</span><br><span class="line">TMP=/u01/tmp</span><br><span class="line">TMPDIR=/u01/tmp</span><br><span class="line">export TMP TMPDIR</span><br><span class="line">ORACLE_BASE=/u01/app/oracle</span><br><span class="line">ORACLE_HOME=/u01/app/oracle/product/11.2.0/dbhome_1</span><br><span class="line">ORACLE_SID=orcl</span><br><span class="line">PATH=/bin:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/oracle/.local/bin:/home/oracle/bin:$PATH:$HOME/bin:$ORACLE_HOME/bin</span><br><span class="line">export ORACLE_BASE ORACLE_SID ORACLE_HOME PATH</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>PATH后面多添了一些<br>如果还是不行，试试下面的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[oracle@dg1 ~]$ sqlplus /nolog</span><br><span class="line">bash: sqlplus: command not found</span><br><span class="line">[oracle@dg1 ~]$ ln -s $ORACLE_HOME/bin/sqlplus /usr/bin</span><br><span class="line">ln: creating symbolic link `/usr/bin/sqlplus&#x27; to `/bin/sqlplus&#x27;: Permission deni ed</span><br><span class="line">[oracle@dg1 ~]$ su - root</span><br><span class="line">Password:</span><br><span class="line">[root@dg1 ~]# ln -s $ORACLE_HOME/bin/sqlplus /usr/bin</span><br><span class="line">[root@dg1 ~]# su - oracle</span><br></pre></td></tr></table></figure>
<p>再不行，没有什么是重启服务器解决不了的。。。</p>
<p>至此就可以用sqlplus连接数据库了</p>
<p>但是window上配置net manager测试却无法访问，错误为ORA-12514 : TNS:监听程序当前无法识别连接描述符中请求的服务<br>处理方法如下<br>修改listener.ora  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># listener.ora Network Configuration File: /u01/app/oracle/product/11.2.0/dbhome_1/network/admin/listener.ora</span><br><span class="line"># Generated by Oracle configuration tools.</span><br><span class="line">SID_LIST_LISTENER =</span><br><span class="line">    (SID_DESC =</span><br><span class="line">      (GLOBAL_DBNAME = orcl.lts)</span><br><span class="line">      (ORACLE_HOME = /u01/app/oracle/product/11.2.0/dbhome_1)</span><br><span class="line">      (SID_NAME = orcl)</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line">LISTENER =</span><br><span class="line">  (DESCRIPTION_LIST =</span><br><span class="line">    (DESCRIPTION =</span><br><span class="line">      (ADDRESS = (PROTOCOL = IPC)(KEY = EXTPROC1521))</span><br><span class="line">      (ORACLE_HOME = /u01/app/oracle/product/11.2.0/dbhome_1)</span><br><span class="line">      (ADDRESS = (PROTOCOL = TCP)(HOST = 192.168.192.142)(PORT = 1521))</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">ADR_BASE_LISTENER = /u01/app/oracle</span><br></pre></td></tr></table></figure>
<p>重启监听</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lsnrctl stop</span><br><span class="line">lsnrctl start</span><br></pre></td></tr></table></figure>

<p>net manager中的服务名为orcl.lts，与tnsnames.ora中的SERVICE_NAME对应</p>
<p>好了  大功告成！</p>
<hr>
<p><code>注</code><br>出现TNS超时，检查lsnrctl status<br>出现ORA-01034和ORA-27101，检查数据库实例是否启动。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[oracle@arcgisserver ~]$ sqlplus sys/admin as sysdba</span><br><span class="line"></span><br><span class="line">SQL*Plus: Release 11.2.0.1.0 Production on Wed Jul 24 09:05:23 2019</span><br><span class="line"></span><br><span class="line">Copyright (c) 1982, 2009, Oracle.  All rights reserved.</span><br><span class="line"></span><br><span class="line">Connected to an idle instance.</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">SQL&gt; </span><span class="language-bash">startup</span></span><br><span class="line">ORACLE instance started.</span><br><span class="line"></span><br><span class="line">Total System Global Area 1068937216 bytes</span><br><span class="line">Fixed Size		    2220200 bytes</span><br><span class="line">Variable Size		  725618520 bytes</span><br><span class="line">Database Buffers	  335544320 bytes</span><br><span class="line">Redo Buffers		    5554176 bytes</span><br><span class="line">Database mounted.</span><br><span class="line">Database opened.</span><br><span class="line"><span class="meta prompt_">SQL&gt; </span></span><br></pre></td></tr></table></figure>
<p>输入startup，启动oracle，如果显示 ORA-01081：无法启动已在运行的ORACLE-请首先关闭它。输入shutdown immediate先将数据库关闭，</p>
]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>环境搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS-7下安装RabbitMQ</title>
    <url>/2019/05/01/CentOS-7%E4%B8%8B%E5%AE%89%E8%A3%85RabbitMQ/</url>
    <content><![CDATA[<!-- toc -->

<span id="more"></span>

<blockquote>
<p>当前用户 root<br>当前目录 &#x2F;root&#x2F;app&#x2F;rabbitmq</p>
</blockquote>
<h2 id="相关依赖"><a href="#相关依赖" class="headerlink" title="相关依赖"></a>相关依赖</h2><h3 id="安装erlang"><a href="#安装erlang" class="headerlink" title="安装erlang"></a>安装erlang</h3><p>访问<a href="https://packagecloud.io/rabbitmq/erlang/install">https://packagecloud.io/rabbitmq/erlang/install</a><br>执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -s https://packagecloud.io/install/repositories/rabbitmq/erlang/script.rpm.sh | sudo bash</span><br><span class="line">yum install erlang-20.3.8.18-1.el7.centos.x86_64</span><br></pre></td></tr></table></figure>
<h2 id="安装rabbitmq-server"><a href="#安装rabbitmq-server" class="headerlink" title="安装rabbitmq-server"></a>安装rabbitmq-server</h2><h3 id="添加仓库并安装"><a href="#添加仓库并安装" class="headerlink" title="添加仓库并安装"></a>添加仓库并安装</h3><p>访问<a href="https://packagecloud.io/rabbitmq/rabbitmq-server/install#bash-rpm">https://packagecloud.io/rabbitmq/rabbitmq-server/install#bash-rpm</a><br>执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -s https://packagecloud.io/install/repositories/rabbitmq/rabbitmq-server/script.rpm.sh | sudo bash</span><br><span class="line">yum install rabbitmq-server</span><br></pre></td></tr></table></figure>
<p>更多安装方式参见RabbitMQ官方说明<br><a href="https://www.rabbitmq.com/install-rpm.html#package-cloud">https://www.rabbitmq.com/install-rpm.html#package-cloud</a><br>推荐使用Package Cloud提供的脚本</p>
<h3 id="开启远程访问限制"><a href="#开启远程访问限制" class="headerlink" title="开启远程访问限制"></a>开启远程访问限制</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/rabbitmq/rabbitmq.config</span><br></pre></td></tr></table></figure>
<p>添加如下内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[&#123;rabbit,[&#123;loopback_users,[]&#125;]&#125;].</span><br></pre></td></tr></table></figure>
<p><strong>注意，最后面的 . 不要漏掉</strong></p>
<h3 id="开启web访问（需要先开远程访问限制）"><a href="#开启web访问（需要先开远程访问限制）" class="headerlink" title="开启web访问（需要先开远程访问限制）"></a>开启web访问（需要先开远程访问限制）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@arcgisserver app]# rabbitmq-plugins enable rabbitmq_management</span><br></pre></td></tr></table></figure>
<p>这里报了个错：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">19:54:27.271 [error] Cookie file /var/lib/rabbitmq/.erlang.cookie must be accessible by owner only</span><br><span class="line"></span><br><span class="line">19:54:28.070 [error] Cookie file /var/lib/rabbitmq/.erlang.cookie must be accessible by owner only</span><br><span class="line">...</span><br><span class="line">Distribution failed: &#123;&#123;:shutdown, &#123;:failed_to_start_child, :auth, &#123;&#x27;Cookie file /var/lib/rabbitmq/.erlang.cookie must be accessible by owner only&#x27;, [&#123;:auth, :init_cookie, 0, [file: &#x27;auth.erl&#x27;, line: 286]&#125;, &#123;:auth, :init, 1, [file: &#x27;auth.erl&#x27;, line: 140]&#125;, &#123;:gen_server, :init_it, 2, [file: &#x27;gen_server.erl&#x27;, line: 374]&#125;, &#123;:gen_server, :init_it, 6, [file: &#x27;gen_server.erl&#x27;, line: 342]&#125;, &#123;:proc_lib, :init_p_do_apply, 3, [file: &#x27;proc_lib.erl&#x27;, line: 249]&#125;]&#125;&#125;&#125;, &#123;:child, :undefined, :net_sup_dynamic, &#123;:erl_distribution, :start_link, [[:rabbitmqcli61, :shortnames], false]&#125;, :permanent, 1000, :supervisor, [:erl_distribution]&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>看起来貌似是当前用户没权限，那就赋各权限吧。。。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@arcgisserver app]# chmod 600 /var/lib/rabbitmq/.erlang.cookie</span><br></pre></td></tr></table></figure>
<p>重新执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@arcgisserver app]# rabbitmq-plugins enable rabbitmq_management</span><br><span class="line">The following plugins have been configured:</span><br><span class="line">  rabbitmq_management</span><br><span class="line">  rabbitmq_management_agent</span><br><span class="line">  rabbitmq_web_dispatch</span><br><span class="line">Applying plugin configuration to rabbit@arcgisserver...</span><br><span class="line">The following plugins have been enabled:</span><br><span class="line">  rabbitmq_management</span><br><span class="line">  rabbitmq_management_agent</span><br><span class="line">  rabbitmq_web_dispatch</span><br><span class="line"></span><br><span class="line">set 3 plugins.</span><br><span class="line">Offline change; changes will take effect at broker restart.</span><br></pre></td></tr></table></figure>
<p>搞定</p>
<h3 id="安装消息延迟插件"><a href="#安装消息延迟插件" class="headerlink" title="安装消息延迟插件"></a>安装消息延迟插件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@arcgisserver plugins]# cd /usr/lib/rabbitmq/lib/rabbitmq_server-3.7.14/plugins</span><br><span class="line"></span><br><span class="line">[root@arcgisserver plugins]# wget https://dl.bintray.com/rabbitmq/community-plugins/rabbitmq_delayed_message_exchange-0.0.1.ez</span><br><span class="line">--2018-11-11 21:29:43--  https://dl.bintray.com/rabbitmq/community-plugins/rabbitmq_delayed_message_exchange-0.0.1.ez</span><br><span class="line">Resolving dl.bintray.com (dl.bintray.com)... 75.126.118.188</span><br><span class="line">Connecting to dl.bintray.com (dl.bintray.com)|75.126.118.188|:443... connected.</span><br><span class="line">HTTP request sent, awaiting response... 200 OK</span><br><span class="line">Length: 32019 (31K) [application/octet-stream]</span><br><span class="line">Saving to: ‘rabbitmq_delayed_message_exchange-0.0.1.ez’</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">100%</span><span class="language-bash">[=================================================================================================&gt;] 32,019      22.7KB/s   <span class="keyword">in</span> 1.4s</span>   </span><br><span class="line">2018-11-11 21:29:46 (22.7 KB/s) - ‘rabbitmq_delayed_message_exchange-0.0.1.ez’ saved [32019/32019]</span><br><span class="line"></span><br><span class="line">[root@arcgisserver plugins]# rabbitmq-plugins enable rabbitmq_delayed_message_exchange</span><br><span class="line">The following plugins have been configured:</span><br><span class="line">  rabbitmq_delayed_message_exchange</span><br><span class="line">  rabbitmq_management</span><br><span class="line">  rabbitmq_management_agent</span><br><span class="line">  rabbitmq_web_dispatch</span><br><span class="line">Applying plugin configuration to rabbit@arcgisserver...</span><br><span class="line">The following plugins have been enabled:</span><br><span class="line">  rabbitmq_delayed_message_exchange</span><br><span class="line"></span><br><span class="line">set 4 plugins.</span><br><span class="line">Offline change; changes will take effect at broker restart.</span><br></pre></td></tr></table></figure>

<h3 id="放行端口"><a href="#放行端口" class="headerlink" title="放行端口"></a>放行端口</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=15672/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=5672/tcp --permanent</span><br><span class="line">systemctl restart firewalld.service</span><br></pre></td></tr></table></figure>

<h3 id="启动-x2F-停止-x2F-重启服务"><a href="#启动-x2F-停止-x2F-重启服务" class="headerlink" title="启动&#x2F;停止&#x2F;重启服务"></a>启动&#x2F;停止&#x2F;重启服务</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start rabbitmq-server.service</span><br><span class="line">systemctl stop rabbitmq-server.service</span><br><span class="line">systemctl restart rabbitmq-server.service</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启动rabbitmq，-detached代表后台守护进程方式启动。</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">rabbitmq-server -detached</span> </span><br></pre></td></tr></table></figure>
<h3 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rabbitmqctl status</span><br></pre></td></tr></table></figure>


<h3 id="设为开机自动启动"><a href="#设为开机自动启动" class="headerlink" title="设为开机自动启动"></a>设为开机自动启动</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chkconfig rabbitmq-server on</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>RabbitMQ</category>
      </categories>
      <tags>
        <tag>环境搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>DBeaver连接Hive</title>
    <url>/2020/01/06/DBeaver%E8%BF%9E%E6%8E%A5Hive/</url>
    <content><![CDATA[<!-- toc -->

<span id="more"></span>

<h1 id="DBeaver连接Hive"><a href="#DBeaver连接Hive" class="headerlink" title="DBeaver连接Hive"></a>DBeaver连接Hive</h1><h2 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h2><table>
<thead>
<tr>
<th>Component</th>
<th>Version</th>
</tr>
</thead>
<tbody><tr>
<td>DBeaver</td>
<td>6.3.0.201912081802-zip64</td>
</tr>
<tr>
<td>Hadoop</td>
<td>2.7.7</td>
</tr>
<tr>
<td>Hive</td>
<td>2.3.5</td>
</tr>
</tbody></table>
<h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><h3 id="新建数据库连接"><a href="#新建数据库连接" class="headerlink" title="新建数据库连接"></a>新建数据库连接</h3><p>数据库-&gt;新建连接-&gt;Apache Hive</p>
<h3 id="配置常规信息"><a href="#配置常规信息" class="headerlink" title="配置常规信息"></a>配置常规信息</h3><p><img src="/DBeaver%E8%BF%9E%E6%8E%A5Hive/image-20200106142925501.png" alt="image-20200106142925501"></p>
<p>主机为Hive所在主机IP</p>
<p>端口默认10000</p>
<p><strong>注</strong>：</p>
<ul>
<li><p>9083  :  metastore服务默认监听端口</p>
</li>
<li><p>10000：Hive 的JDBC端口</p>
</li>
</ul>
<p>数据库为hive中创建的数据库名称</p>
<p>hive用户即为linux用户，hive本身不提供用户管理，只提供权限控制。</p>
<h3 id="编辑驱动设置"><a href="#编辑驱动设置" class="headerlink" title="编辑驱动设置"></a>编辑驱动设置</h3><h4 id="下载方式"><a href="#下载方式" class="headerlink" title="下载方式"></a>下载方式</h4><p><img src="/DBeaver%E8%BF%9E%E6%8E%A5Hive/image-20200106142909646.png" alt="image-20200106142909646"></p>
<p><img src="/DBeaver%E8%BF%9E%E6%8E%A5Hive/image-20200106143030011.png" alt="image-20200106143030011"></p>
<p><img src="/DBeaver%E8%BF%9E%E6%8E%A5Hive/image-20200106143106600.png" alt="image-20200106143106600"></p>
<p><img src="/DBeaver%E8%BF%9E%E6%8E%A5Hive/image-20200106143327866.png" alt="image-20200106143327866"></p>
<h5 id="hive-jdbc"><a href="#hive-jdbc" class="headerlink" title="hive-jdbc"></a>hive-jdbc</h5><p><img src="/DBeaver%E8%BF%9E%E6%8E%A5Hive/image-20200106143842980.png" alt="image-20200106143842980"></p>
<p><img src="/DBeaver%E8%BF%9E%E6%8E%A5Hive/image-20200106143817169.png" alt="image-20200106143817169"></p>
<p><img src="/DBeaver%E8%BF%9E%E6%8E%A5Hive/image-20200106143941341.png" alt="image-20200106143941341"></p>
<h5 id="hadoop-common"><a href="#hadoop-common" class="headerlink" title="hadoop-common"></a>hadoop-common</h5><p>添加工件</p>
<p>org.apache.hadoop</p>
<p>hadoop-common</p>
<p>2.7.7</p>
<p>其余同上</p>
<h4 id="本地添加方式"><a href="#本地添加方式" class="headerlink" title="本地添加方式"></a>本地添加方式</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@master jdbc]# pwd</span><br><span class="line">/usr/local/hive-2.3.5/jdbc</span><br><span class="line">[root@master jdbc]# ll |grep jdbc</span><br><span class="line">-rw-r--r--. 1 root root 59694792 May  7  2019 hive-jdbc-2.3.5-standalone.jar</span><br></pre></td></tr></table></figure>

<p>从hive的jdbc目录下拷出<code>hive-jdbc-2.3.5-standalone.jar</code>到本地，手动添加。</p>
<p><img src="/DBeaver%E8%BF%9E%E6%8E%A5Hive/image-20200106153918251.png" alt="image-20200106153918251"></p>
<p><img src="/DBeaver%E8%BF%9E%E6%8E%A5Hive/image-20200106154256921.png" alt="image-20200106154256921"></p>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol>
<li><p>User root is not allowed to impersonate anonymous</p>
<p><strong>问题描述：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Failed to open new session: java.lang.RuntimeException: org.apache.hadoop.ipc.RemoteException(org.apache.hadoop.security.authorize.AuthorizationException): User:xxx not allowed to impersonate anonymous</span><br></pre></td></tr></table></figure>

<p><strong>解决方案：</strong></p>
<p>修改hadoop 配置文件 etc&#x2F;hadoop&#x2F;core-site.xml,加入如下配置项</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.root.hosts<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.root.groups<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>备注</p>
<p>hadoop.proxyuser.XXX.hosts 与 hadoop.proxyuser.XXX.groups 中XXX为异常信息中User:* 中的用户名部分</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.[username].hosts<span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>The superuser can connect only from host1 and host2 to impersonate a user<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.[username].groups<span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Allow the superuser oozie to impersonate any members of the group group1 and group2<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Hive</category>
      </categories>
      <tags>
        <tag>环境搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker Compose入门</title>
    <url>/2021/07/31/Docker%20Compose%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="Docker-Compose入门"><a href="#Docker-Compose入门" class="headerlink" title="Docker Compose入门"></a>Docker Compose入门</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>一般一个宿主机中会生成多个容器，容器与容器之间需要协调工作，有时多个容器之间也需要进行环境的隔离，而Docker Compose就是用来定义和运行多个容器的工具。可以通过一个yaml文件来配置应用程序的服务，并通过命令来管理所有服务的生命周期。</p>
<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><p>一般可以在<a href="https://github.com/docker/compose/releases">Compose repository release page on GitHub</a>获取到最新版的Docker Compse。</p>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>执行以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>

<p>如果需要其他版本的Docker Compse，只需要把命令中的<code>1.29.2</code>替换成需要的版本即可。</p>
<p>如果curl安装有问题，可以参照<a href="https://docs.docker.com/compose/install/#alternative-install-options">Alternative Install Options</a> 进行安装。</p>
<h3 id="赋予执行权限"><a href="#赋予执行权限" class="headerlink" title="赋予执行权限"></a>赋予执行权限</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>

<h3 id="检查是否安装成功"><a href="#检查是否安装成功" class="headerlink" title="检查是否安装成功"></a>检查是否安装成功</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">docker-compose --version</span></span><br><span class="line">docker-compose version 1.29.2, build 5becea4c</span><br></pre></td></tr></table></figure>

<h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><p>在docker compose下，存在服务的概念，一个compose配置可以由多个服务来组成，参考如下yaml配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.9&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">db_mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">my-mysql</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">10001</span><span class="string">:3306</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">new_password_xxx</span></span><br><span class="line">    <span class="attr">command:</span> </span><br><span class="line">      <span class="string">--default-authentication-plugin=mysql_native_password</span></span><br><span class="line">      <span class="string">--character-set-server=utf8mb4</span></span><br><span class="line">      <span class="string">--collation-server=utf8mb4_unicode_ci</span></span><br><span class="line">    <span class="attr">volumes:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">/usr/local/docker/mysql/data/:/var/lib/mysql</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/usr/local/docker/mysql/conf.d:/etc/mysql/conf.d</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">redis:</span> </span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">redis-server</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">my-redis</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">10002</span><span class="string">:6379</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">redis-server</span> <span class="string">/etc/redis/redis.conf</span> <span class="string">--appendonly</span> <span class="literal">yes</span></span><br><span class="line">    <span class="attr">volumes:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">/usr/local/docker/redis/conf/redis.conf:/etc/redis/redis.conf</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">my-nginx</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">80</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">volumes:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">/usr/local/docker/nginx/nginx.conf:/etc/nginx/nginx.conf</span></span><br><span class="line">      </span><br><span class="line">  <span class="attr">redis-commander:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis-commander</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">redis-commander</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">rediscommander/redis-commander:latest</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">REDIS_HOSTS=local:redis-server:6379</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">11002</span><span class="string">:8081</span></span><br></pre></td></tr></table></figure>

<p>存在一个services节点，该节点下定义了三个服务。每个服务会对应到一个镜像，当执行<code>docker-compose up</code>之后，会根据每个服务对应的镜像，生成对应的容器。服务的名称可以自行定义，无强制要求。</p>
<p>在yaml所在目录下执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">docker-compose up -d</span></span><br><span class="line">Creating network &quot;docker-compose_default&quot; with the default driver</span><br><span class="line">Creating my-mysql ... done</span><br><span class="line">Creating my-nginx ... done</span><br><span class="line">Creating my-redis ... done</span><br></pre></td></tr></table></figure>

<p><code>up</code>为创建并启动所有容器，<code>-d</code>表示守护态运行。这里不指定配置文件名称，则默认当前目录下的名为<code>docker-compose.yml</code>的文件。不指定项目名称，则默认该配置文件所在的目录名称作为项目名称。</p>
<p>可以看到配置文件所定义的所有服务均正常启动。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS         PORTS                                                    NAMES</span><br><span class="line">ea6c7d60903d   redis     &quot;docker-entrypoint.s…&quot;   2 minutes ago   Up 2 minutes   0.0.0.0:10002-&gt;6379/tcp, :::10002-&gt;6379/tcp              my-redis</span><br><span class="line">49062f5891e7   nginx     &quot;/docker-entrypoint.…&quot;   2 minutes ago   Up 2 minutes   0.0.0.0:80-&gt;80/tcp, :::80-&gt;80/tcp                        my-nginx</span><br><span class="line">d63a6ed103f5   mysql     &quot;docker-entrypoint.s…&quot;   2 minutes ago   Up 2 minutes   33060/tcp, 0.0.0.0:10001-&gt;3306/tcp, :::10001-&gt;3306/tcp   my-mysql</span><br></pre></td></tr></table></figure>

<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p>对于<code>docker-compose</code>有如下选项。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Commands:</span><br><span class="line">  build              Build or rebuild services</span><br><span class="line">  config             Validate and view the Compose file</span><br><span class="line">  create             Create services</span><br><span class="line">  down               Stop and remove resources</span><br><span class="line">  events             Receive real time events from containers</span><br><span class="line">  exec               Execute a command in a running container</span><br><span class="line">  help               Get help on a command</span><br><span class="line">  images             List images</span><br><span class="line">  kill               Kill containers</span><br><span class="line">  logs               View output from containers</span><br><span class="line">  pause              Pause services</span><br><span class="line">  port               Print the public port for a port binding</span><br><span class="line">  ps                 List containers</span><br><span class="line">  pull               Pull service images</span><br><span class="line">  push               Push service images</span><br><span class="line">  restart            Restart services</span><br><span class="line">  rm                 Remove stopped containers</span><br><span class="line">  run                Run a one-off command</span><br><span class="line">  scale              Set number of containers for a service</span><br><span class="line">  start              Start services</span><br><span class="line">  stop               Stop services</span><br><span class="line">  top                Display the running processes</span><br><span class="line">  unpause            Unpause services</span><br><span class="line">  up                 Create and start containers</span><br><span class="line">  version            Show version information and quit</span><br></pre></td></tr></table></figure>

<p>讲一些比较常用的。</p>
<p><code>up</code>命令，用于创建并启动compose项目。</p>
<p>然后就是<code>start</code>、<code>stop</code>等，仅进行启动和停止服务。</p>
<p>如果是执行<code>down</code>命令，在停止所有服务容器的同时，也会删除所有容器以及网络。</p>
<p>如果改变了一个服务的Dockerfile或者构建目录的内容，可以使用<code>build</code>命令对其进行重建。</p>
<p><code>ps</code>的用法都差不多，查看所有正在运行的容器。</p>
<p>每个命令具体用法，还是要参见<code>--help</code>。</p>
<h3 id="容器与容器间的访问"><a href="#容器与容器间的访问" class="headerlink" title="容器与容器间的访问"></a>容器与容器间的访问</h3><h4 id="一般创建容器"><a href="#一般创建容器" class="headerlink" title="一般创建容器"></a>一般创建容器</h4><p>当docker创建一个容器时，会将它纳入一个网络。如果是单独创建容器，则会纳入默认的<code>bridge</code>网络中（默认为bridge模式），如：</p>
<p>新建一个tomcat容器：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">docker pull tomcat</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">docker run --name my-tomcat --<span class="built_in">rm</span> -p 8080:8080 -d tomcat</span></span><br></pre></td></tr></table></figure>

<p>通过<code>dockers network</code>命令查看</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">docker network <span class="built_in">ls</span></span></span><br><span class="line">NETWORK ID     NAME                     DRIVER    SCOPE</span><br><span class="line">3d18fe44fe65   bridge                   bridge    local</span><br><span class="line">de7157fb3e93   docker-compose_default   bridge    local</span><br><span class="line">da3cd2189967   host                     host      local</span><br><span class="line">098d7dd513d5   none                     null      local</span><br></pre></td></tr></table></figure>

<p>可以看到，有一个name为<code>brideg</code>的网络，查看详细信息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">docker network inspect bridge</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;bridge&quot;,</span><br><span class="line">        &quot;Id&quot;: &quot;3d18fe44fe65f8d4f370adc558ce41a92897ce58288fa2f16aa2787dcebd9e0c&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2021-07-11T17:04:49.64883344+08:00&quot;,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;bridge&quot;,</span><br><span class="line">        &quot;EnableIPv6&quot;: false,</span><br><span class="line">        &quot;IPAM&quot;: &#123;</span><br><span class="line">            &quot;Driver&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;Options&quot;: null,</span><br><span class="line">            &quot;Config&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;Subnet&quot;: &quot;172.17.0.0/16&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;172.17.0.1&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Internal&quot;: false,</span><br><span class="line">        &quot;Attachable&quot;: false,</span><br><span class="line">        &quot;Ingress&quot;: false,</span><br><span class="line">        &quot;ConfigFrom&quot;: &#123;</span><br><span class="line">            &quot;Network&quot;: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ConfigOnly&quot;: false,</span><br><span class="line">        &quot;Containers&quot;: &#123;</span><br><span class="line">            &quot;e42b6c1b108d756cc266cb29d0f6d779c396d62fbc5eef556ad42356ec275b9e&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;my-tomcat&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;00e0c410554cb08d4c4c65861d844fc98297f32ca9be628087c934f44bccb82b&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;172.17.0.2/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Options&quot;: &#123;</span><br><span class="line">            &quot;com.docker.network.bridge.default_bridge&quot;: &quot;true&quot;,</span><br><span class="line">            &quot;com.docker.network.bridge.enable_icc&quot;: &quot;true&quot;,</span><br><span class="line">            &quot;com.docker.network.bridge.enable_ip_masquerade&quot;: &quot;true&quot;,</span><br><span class="line">            &quot;com.docker.network.bridge.host_binding_ipv4&quot;: &quot;0.0.0.0&quot;,</span><br><span class="line">            &quot;com.docker.network.bridge.name&quot;: &quot;docker0&quot;,</span><br><span class="line">            &quot;com.docker.network.driver.mtu&quot;: &quot;1500&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Labels&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>其中Containers有刚刚创建的<code>my-tomcat</code>容器。</p>
<h4 id="docker-compose创建的网络"><a href="#docker-compose创建的网络" class="headerlink" title="docker-compose创建的网络"></a>docker-compose创建的网络</h4><p>在使用<code>docker-compose</code>创建一个项目后，会将该项目中所有的服务(services)都纳入到同一个网络当中，默认的网络名称为项目名加上<code>_default</code>，如上面的<code>docker-compose_default</code>网络。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">docker network inspect docker-compose_default</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;docker-compose_default&quot;,</span><br><span class="line">        &quot;Id&quot;: &quot;de7157fb3e937908299c17cd3d21380a5dca2960a93bcb9da0ed392f5a4d74d7&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2021-08-01T10:46:49.281728229+08:00&quot;,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;bridge&quot;,</span><br><span class="line">        &quot;EnableIPv6&quot;: false,</span><br><span class="line">        &quot;IPAM&quot;: &#123;</span><br><span class="line">            &quot;Driver&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;Options&quot;: null,</span><br><span class="line">            &quot;Config&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;Subnet&quot;: &quot;172.19.0.0/16&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;172.19.0.1&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Internal&quot;: false,</span><br><span class="line">        &quot;Attachable&quot;: true,</span><br><span class="line">        &quot;Ingress&quot;: false,</span><br><span class="line">        &quot;ConfigFrom&quot;: &#123;</span><br><span class="line">            &quot;Network&quot;: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ConfigOnly&quot;: false,</span><br><span class="line">        &quot;Containers&quot;: &#123;</span><br><span class="line">            &quot;49062f5891e7d12eccbefb19875bcc0bd16b8e79906abb4952bb0420c1d09d72&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;my-nginx&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;c3e9773c7cb20222762f37784a24d35912e48edaf332408f61c6be19033382c2&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:ac:13:00:04&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;172.19.0.4/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;d63a6ed103f525148402f57919648e2e7caadd43d51a36597b058a7ecfedf8e4&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;my-mysql&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;391283e8835fa8107c6eb95ef946ffabaff8daa9ac5f6325274224f40925cead&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:ac:13:00:03&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;172.19.0.3/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;ea6c7d60903ded82d4c26d5fa47cdcdb005eba94ff5ff825e65e3815e44aab88&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;my-redis&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;1dc8f641e6599117fbc9ba605a0940ed1f71b630646db2553670d64fd361d853&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:ac:13:00:02&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;172.19.0.2/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Labels&quot;: &#123;</span><br><span class="line">            &quot;com.docker.compose.network&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;com.docker.compose.project&quot;: &quot;docker-compose&quot;,</span><br><span class="line">            &quot;com.docker.compose.version&quot;: &quot;1.29.2&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>其中包含了我们创建的三个服务容器。</p>
<p>容器与容器间需要进行网络通信，使用的是<code>CONTAINER_IP:CONTAINER_PORT</code>，而不是映射到宿主机的ip和端口。</p>
<p>举个例子，新加入一个服务到上面的docker-compose.yml中。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="number">3.9</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="comment"># 省略之前的内容</span></span><br><span class="line">  <span class="attr">redis-commander:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis-commander</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">redis-commander</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">rediscommander/redis-commander:latest</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">REDIS_HOSTS=local:redis:6379</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">11002</span><span class="string">:8081</span></span><br></pre></td></tr></table></figure>

<p><code>environment</code>需要配置redis容器的地址，这里使用<code>local:redis:6379</code>，其中的<code>redis</code>为compose中定义的服务名，通过服务名，docker可以自己获取该服务的当前ip。端口使用的是6379，而非映射的10002。</p>
<p>保存yml后，重新执行<code>docker-compose up -d</code>，会更新有变化的容器。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">docker-compose up -d</span></span><br><span class="line">Pulling redis-commander (rediscommander/redis-commander:latest)...</span><br><span class="line">latest: Pulling from rediscommander/redis-commander</span><br><span class="line">339de151aab4: Pull complete</span><br><span class="line">f732fa32fc61: Pull complete</span><br><span class="line">ef60bb667d5a: Pull complete</span><br><span class="line">4f50fa5032a4: Pull complete</span><br><span class="line">Digest: sha256:19cd0c49f418779fa2822a0496c5e6516d0c792effc39ed20089e6268477e40a</span><br><span class="line">Status: Downloaded newer image for rediscommander/redis-commander:latest</span><br><span class="line">my-redis is up-to-date</span><br><span class="line">my-nginx is up-to-date</span><br><span class="line">Creating redis-commander ... </span><br><span class="line">Creating redis-commander ... done</span><br></pre></td></tr></table></figure>

<p>访问11002端口，可以看到redis-commander已成功部署，并正常连接到了我们所配置的redis服务。</p>
<p><img src="https://i.loli.net/2021/08/01/jnETB6mZbQ9KkGC.png" alt="image-20210801154319824"></p>
]]></content>
      <categories>
        <category>容器化</category>
        <category>Cloud Native</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>ETL简介及开发流程概述</title>
    <url>/2019/08/26/ETL%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<p><img src="https://s2.loli.net/2022/04/16/OQJ1G4NTCcgKkZa.jpg" alt="l57o5cb4lzuzn7e1.jpg"></p>
<!-- toc -->

<span id="more"></span>

<p>[TOC]</p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>ETL是BI项目最重要的一个环节</strong></p>
<p><strong>ETL将企业中的分散、零乱、标准不统一的数据整合到一起，为企业的决策提供分析依据。</strong></p>
<p><strong>ETL通常情况下会花掉整个项目的1&#x2F;3的时间，ETL设计的好坏直接关接到BI项目的成败。</strong></p>
<p><img src="https://s2.loli.net/2022/04/16/SMWOXe94vqRZkls.png" alt="1566750986512"></p>
<h2 id="名词简介"><a href="#名词简介" class="headerlink" title="名词简介"></a>名词简介</h2><h3 id="数据仓库"><a href="#数据仓库" class="headerlink" title="数据仓库"></a>数据仓库</h3><p>英文全称为<strong>Data Warehouse</strong>，简称为<strong>DW</strong>。</p>
<p>数据仓库之父<strong>比尔·恩门（Bill Inmon）</strong>在1991年出版的《Building the Data Warehouse》（《建立数据仓库》）一书中所提出的定义被广泛接受——<strong>数据仓库（Data Warehouse）是一个面向主题的（Subject Oriented）、集成的（Integrated）、相对稳定的（Non-Volatile）、反映历史变化（Time Variant）的数据集合，用于支持管理决策(Decision Making Support)。</strong></p>
<p>换句话说，<strong>数据仓库是一个以实现特定分析决策为目的，能够随时间的变化，稳定地、持续地为这个需求提供所需要的数据的集合</strong>。</p>
<p><strong>业务库与数据仓库的不同：</strong></p>
<ul>
<li><p>业务库通常是面向事务来设计的，而数据仓库则是面向主题来设计的。</p>
</li>
<li><p>业务库尽量避免冗余，而数据仓库则会有意引入冗余，以便于快速分析。</p>
</li>
<li><p>业务库为捕获数据而设计，数据仓库是为分析数据而设计。</p>
</li>
</ul>
<h3 id="操作型数据存储"><a href="#操作型数据存储" class="headerlink" title="操作型数据存储"></a>操作型数据存储</h3><p>英文全称为<strong>Operational Data Store</strong>，简称<strong>ODS</strong>。</p>
<p>是数据仓库体系结构中的一个可选部分，也被称为<strong>贴源层</strong>。</p>
<p><strong>ODS</strong>具备数据仓库的部分特征和<strong>OLTP</strong>( On-Line Transaction Processing  联机事务处理过程， 前台接收的用户数据可以立即传送到计算中心进行处理，并在很短的时间内给出处理结果) 系统的部分特征。</p>
<p><strong>它是“面向主题的、集成的、当前或接近当前的、不断变化的”数据。</strong></p>
<p><strong>ODS</strong>的特征如下：</p>
<ul>
<li>支持大量并发用户定期添加和修改数据。</li>
<li>反映随时变化的单位状态，但不保存其历史记录。</li>
<li>包含大量数据。</li>
<li>可以进行优化以对<a href="https://baike.baidu.com/item/%E4%BA%8B%E5%8A%A1">事务</a>活动做出响应。</li>
<li>……</li>
</ul>
<p><strong>ODS</strong>的作用如下：</p>
<ol>
<li><p><strong>在业务系统和数据仓库之间形成一个隔离层</strong></p>
<p>降低数据来源复杂性</p>
</li>
<li><p><strong>转移一部分业务系统细节查询的功能</strong></p>
<p>降低业务系统查询压力</p>
</li>
<li><p><strong>完成数据仓库中不能完成的一些功能</strong></p>
<p>数据仓库中存储的数据粒度是根据需要而确定的，有时DW并不存储过于细节的数据，但ODS可以。</p>
</li>
</ol>
<p><img src="https://s2.loli.net/2022/04/16/FceMVxkTtADIKhP.png" alt="img"></p>
<h3 id="数据集市"><a href="#数据集市" class="headerlink" title="数据集市"></a>数据集市</h3><p>数据集市（Data Mart），也叫数据市场，为满足特定的部门或者用户需求，按照多维的方式进行存储，包括定义维度、需要计算的指标、维度的层次等，生成面向决策分析需求的数据立方体。</p>
<p>数据集市，是企业级数据仓库的一个子集，主要面向部门级业务，只面向某个特定的主题。</p>
<p>数据集市数据来源于企业范围的数据库、专业的数据仓库。</p>
<p><img src="https://s2.loli.net/2022/04/16/u2JE1spq8voFjGQ.png" alt="1567419696532"></p>
<p><img src="/ETL%E5%BC%80%E5%8F%91/2142737-16cfb58d9c0f4f22.webp" alt="img"></p>
<hr>
<h2 id="ETL简介"><a href="#ETL简介" class="headerlink" title="ETL简介"></a>ETL简介</h2><h3 id="抽取-Extract"><a href="#抽取-Extract" class="headerlink" title="抽取(Extract)"></a>抽取(Extract)</h3><p>一般抽取过程需要连接到不同的数据源，在业务库与ODS之间建立同步机制，将不同数据源的数据统一放至ODS中，共清洗转换使用。</p>
<h3 id="转换-Transform"><a href="#转换-Transform" class="headerlink" title="转换(Transform)"></a>转换(Transform)</h3><p>任何对数据的处理过程都是转换。通常包括且不限于以下操作：</p>
<ul>
<li>移动数据</li>
<li>根据规则验证数据</li>
<li>数据内容和数据结构的修改</li>
<li>将多个数据源的数据集成</li>
<li>根据处理后的数据计算派生值和聚合值</li>
</ul>
<p>此部分最为繁琐，通常会占用ETL开发时间的2&#x2F;3左右</p>
<h3 id="加载-Load"><a href="#加载-Load" class="headerlink" title="加载(Load)"></a>加载(Load)</h3><p>将清洗、转换完的数据加载到数据仓库中。</p>
<hr>
<h2 id="ETL开发流程"><a href="#ETL开发流程" class="headerlink" title="ETL开发流程"></a>ETL开发流程</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR;</span><br><span class="line">    业务库-- &quot;抽取[E]、清洗&quot; --&gt;ODS;</span><br><span class="line">    ODS-- &quot;转换[T]、加载[L]&quot; --&gt;DW;</span><br><span class="line">    DW-- &quot;转换[T]、加载[L]&quot; --&gt;DW;</span><br><span class="line">    DW-- &quot;转换[T]、加载[L]&quot; --&gt;DM;</span><br><span class="line">    DM-- &quot;转换[T]、加载[L]&quot; --&gt;DM;</span><br><span class="line">    DM--&gt;BI前端工具;</span><br></pre></td></tr></table></figure>

<h3 id="抽取数据源中的数据"><a href="#抽取数据源中的数据" class="headerlink" title="抽取数据源中的数据"></a>抽取数据源中的数据</h3><h4 id="对于不同数据源"><a href="#对于不同数据源" class="headerlink" title="对于不同数据源"></a>对于不同数据源</h4><p>通常我们需要将多个不同的数据源中的数据整合到统一的BI数据仓库中。</p>
<ol>
<li><p>ODBC</p>
<p>可以通过ODBC的方式创建DBLink——如SQL Server和Oracle之间。如果不能建立数据库链接，可以有两种方式完成，一种是通过工具将源数据导出成.txt或者是.xls文件，然后再将这些源系统文件导入到ODS中。</p>
</li>
<li><p>使用程序接口</p>
<p>常用的ETL工具为**Spoon(Kettle)**。使用Spoon定义输入输出，两端可为文件、数据库、流等。文件包括规范的日志文件以及Excel等。</p>
<p>以及一些其他带有类似功能的数据库工具，也可以完成此类操作。</p>
</li>
</ol>
<h4 id="对于相同数据源"><a href="#对于相同数据源" class="headerlink" title="对于相同数据源"></a>对于相同数据源</h4><p>对于相同的数据源，如同在Oracle中，可在DBMS自带的dblink基础上访问自身数据，使用Oracle procedure（存储过程）通过进行抽取，存放至DW中。亦或者是类似于SQL Server间可使用SSIS服务等等。</p>
<h4 id="选择数据更新方式"><a href="#选择数据更新方式" class="headerlink" title="选择数据更新方式"></a>选择数据更新方式</h4><ul>
<li><p>全量加载：全表删除后再进行数据加载的方式。</p>
<p>如果每次更新的数据量占总量1&#x2F;4以上，则可以考虑全量更新。</p>
</li>
<li><p>增量加载：目标表仅更新源表变化的数据。</p>
<ul>
<li>数据量巨大的目标表。</li>
<li>源表变化数据比较规律，例如按时间序列增长或减少。</li>
<li>源表变化数据相对数据总量较小。</li>
<li>目标表需要记录过期信息或者冗余信息</li>
<li>业务系统能直接提供增量（delta）数据</li>
</ul>
</li>
</ul>
<p>一般情况下，业务系统会记录业务发生的时间。</p>
<p>我们可以用来做增量的标志,每次抽取之前首先判断ODS中记录最大的时间，然后根据这个时间去业务系统取大于这个时间所有的记录。利用业务系统的时间戳，一般情况下，业务系统没有或者部分有时间戳。</p>
<h3 id="处理不合格数据"><a href="#处理不合格数据" class="headerlink" title="处理不合格数据"></a>处理不合格数据</h3><p>首先加载来自ODS中的数据，在加载的过程中，通常有三类不合格数据需要我们去处理：</p>
<p>在加载的过程中，通常有<strong>三类</strong>不合格数据需要我们去处理：</p>
<ol>
<li><p>不完整数据</p>
<p>包括客户名称缺失、联系方式确实、地址缺失等。通常需要将这类数据过滤出来，写入Excel向数据产生者确认补全。</p>
</li>
<li><p>错误数据</p>
<p>包括字符集错误、日期格式错误、长度过长等等。这类问题会导致ETL流程执行失败，需要在ETL相关操作中添加操作日志，记录这些错误。事先也需要通过写SQL的方式去排查问题数据，交给业务部门处理，保证数据可靠。</p>
</li>
<li><p>重复数据</p>
<p>如相同维度下出现多条数据，如果重复量过多则需要制定过滤规则，并需要向业务部门确认。</p>
</li>
</ol>
<h3 id="对数据进行整合计算"><a href="#对数据进行整合计算" class="headerlink" title="对数据进行整合计算"></a>对数据进行整合计算</h3><p>这块需要更具具体的BI分析规则来定。通常包括以下部分：</p>
<ol>
<li><p>数据整理</p>
<p>将不同数据规则的数据统一成相同格式，便于聚合操作。</p>
</li>
<li><p>数据聚合</p>
<p>ODS中的数据粒度过细，需要将数据以数据仓库的规则进行聚合，以便于分析使用。</p>
<p>以Oracle为例，通常转换步骤使用存储过程(procedure)来完成。</p>
<p>首先使用存储过程将ODS中的数据加载到DW中，此时的数据字段较为冗余，相对的DW表数据符合某种业务主题，比如“用户的录单信息”，需要整合多张ODS中的表，存放到同一张DW表中，便于计算。此处也会过滤一些不必要的字段，以及添加一些冗余字段等。</p>
</li>
<li><p>数据计算</p>
<p>整合完成后可以按照BI需求，对数据进行分组计算，加载到DM层中，以供BI工具直接调用展示。如根据部门BI业务规则，计算KPI数据，通常会将事实表与维度表相关联，形成符合业务模型的多维数据集。</p>
</li>
</ol>
<h2 id="一个简单的流程示例"><a href="#一个简单的流程示例" class="headerlink" title="一个简单的流程示例"></a>一个简单的流程示例</h2><h3 id="使用Kettle将MySQL的数据加载入Oracle"><a href="#使用Kettle将MySQL的数据加载入Oracle" class="headerlink" title="使用Kettle将MySQL的数据加载入Oracle"></a>使用Kettle将MySQL的数据加载入Oracle</h3><p><img src="https://s2.loli.net/2022/04/16/A6vPDhcHoZR2SEf.png" alt="1567443246869"></p>
<h3 id="对数据进行整合计算-1"><a href="#对数据进行整合计算-1" class="headerlink" title="对数据进行整合计算"></a>对数据进行整合计算</h3><p>示例：</p>
<p><strong>ETL_DM_SHOPPING_INFO.prc</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">PROCEDURE</span> ETL_DM_SHOPPING_INFO(START_TIME   <span class="type">DATE</span>,</span><br><span class="line">                                                 END_TIME     <span class="type">DATE</span>,</span><br><span class="line">                                                 V_ETL_NUMBER <span class="type">INT</span>,</span><br><span class="line">                                                 V_FORCE_FLAG <span class="type">INT</span>) <span class="keyword">IS</span></span><br><span class="line">  V_SQL        VARCHAR2(<span class="number">100</span>);</span><br><span class="line">  V_INSERT     <span class="type">INT</span> :<span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">  V_UPDATE     <span class="type">INT</span> :<span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">  V_DELETE     <span class="type">INT</span> :<span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">  V_DATE       <span class="type">DATE</span> :<span class="operator">=</span> START_TIME;</span><br><span class="line">  V_TABLE_NAME VARCHAR2(<span class="number">100</span>) :<span class="operator">=</span> <span class="string">&#x27;dm_shopping_info&#x27;</span>;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">FOR</span> REC <span class="keyword">IN</span> (<span class="keyword">SELECT</span> CAL_NUMBER, CAL_DATE</span><br><span class="line">                <span class="keyword">FROM</span> DIM_CALENDAR</span><br><span class="line">               <span class="keyword">WHERE</span> CAL_DATE <span class="operator">&gt;=</span> START_TIME <span class="operator">-</span> <span class="number">1</span></span><br><span class="line">                 <span class="keyword">AND</span> CAL_DATE <span class="operator">&lt;</span> END_TIME</span><br><span class="line">               <span class="keyword">ORDER</span> <span class="keyword">BY</span> CAL_NUMBER) LOOP</span><br><span class="line">    <span class="keyword">DELETE</span> <span class="keyword">FROM</span> DM_SHOPPING_INFO <span class="keyword">WHERE</span> CAL_NUMBER <span class="operator">=</span> REC.CAL_NUMBER;</span><br><span class="line">    <span class="keyword">COMMIT</span>;</span><br><span class="line">    <span class="comment">-- 16-20</span></span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> DM_SHOPPING_INFO</span><br><span class="line">      (CAL_NUMBER, AGE_RANGE, QUANTITY)</span><br><span class="line">      <span class="keyword">SELECT</span> REC.CAL_NUMBER, <span class="string">&#x27;16-20岁&#x27;</span>, nvl(<span class="built_in">SUM</span>(T.QUANTITY),<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">FROM</span> DW_SHOPPING_INFO T</span><br><span class="line">       <span class="keyword">WHERE</span> TO_CHAR(T.ADD_TIME, <span class="string">&#x27;yyyymmdd&#x27;</span>) <span class="operator">=</span></span><br><span class="line">             TO_CHAR(REC.CAL_DATE, <span class="string">&#x27;yyyymmdd&#x27;</span>)</span><br><span class="line">         <span class="keyword">AND</span> T.AGE <span class="operator">&gt;=</span> <span class="number">16</span></span><br><span class="line">         <span class="keyword">AND</span> T.AGE <span class="operator">&lt;=</span> <span class="number">20</span>;</span><br><span class="line">    <span class="comment">-- 21-25</span></span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> DM_SHOPPING_INFO</span><br><span class="line">      (CAL_NUMBER, AGE_RANGE, QUANTITY)</span><br><span class="line">      <span class="keyword">SELECT</span> REC.CAL_NUMBER, <span class="string">&#x27;21-25岁&#x27;</span>, nvl(<span class="built_in">SUM</span>(T.QUANTITY),<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">FROM</span> DW_SHOPPING_INFO T</span><br><span class="line">       <span class="keyword">WHERE</span> TO_CHAR(T.ADD_TIME, <span class="string">&#x27;yyyymmdd&#x27;</span>) <span class="operator">=</span></span><br><span class="line">             TO_CHAR(REC.CAL_DATE, <span class="string">&#x27;yyyymmdd&#x27;</span>)</span><br><span class="line">         <span class="keyword">AND</span> T.AGE <span class="operator">&gt;=</span> <span class="number">21</span></span><br><span class="line">         <span class="keyword">AND</span> T.AGE <span class="operator">&lt;=</span> <span class="number">25</span>;</span><br><span class="line">    <span class="comment">-- 26-30</span></span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> DM_SHOPPING_INFO</span><br><span class="line">      (CAL_NUMBER, AGE_RANGE, QUANTITY)</span><br><span class="line">      <span class="keyword">SELECT</span> REC.CAL_NUMBER, <span class="string">&#x27;26-30岁&#x27;</span>, nvl(<span class="built_in">SUM</span>(T.QUANTITY),<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">FROM</span> DW_SHOPPING_INFO T</span><br><span class="line">       <span class="keyword">WHERE</span> TO_CHAR(T.ADD_TIME, <span class="string">&#x27;yyyymmdd&#x27;</span>) <span class="operator">=</span></span><br><span class="line">             TO_CHAR(REC.CAL_DATE, <span class="string">&#x27;yyyymmdd&#x27;</span>)</span><br><span class="line">         <span class="keyword">AND</span> T.AGE <span class="operator">&gt;=</span> <span class="number">26</span></span><br><span class="line">         <span class="keyword">AND</span> T.AGE <span class="operator">&lt;=</span> <span class="number">30</span>;</span><br><span class="line">    <span class="keyword">COMMIT</span>;</span><br><span class="line">  <span class="keyword">END</span> LOOP;</span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span> ETL_DM_SHOPPING_INFO;</span><br></pre></td></tr></table></figure>


<h3 id="加载展示"><a href="#加载展示" class="headerlink" title="加载展示"></a>加载展示</h3><p>加载的展现形式有很多种，比如使用QlikView作为前端报表工具。</p>
<p><img src="https://s2.loli.net/2022/04/16/1QNjLyECwFdAqfB.png" alt="1567580138912"></p>
]]></content>
      <categories>
        <category>BI</category>
      </categories>
      <tags>
        <tag>数据分析</tag>
        <tag>ETL</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA集成Resin启动Maven项目</title>
    <url>/2019/06/13/IDEA%E9%9B%86%E6%88%90Resin%E5%90%AF%E5%8A%A8Maven%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<p><img src="https://s2.loli.net/2022/04/16/osJV59hLerfZtlM.png" alt="Resin"></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>目前公司大部分的项目都是基于JDK1.6，使用Eclipse开发的。不过我还是想在IDEA上进行开发，用着比较顺手。但是在尝试使用IDEA启动公司项目的过程中遇到了很多问题。在不断尝试下，终于一一解决，特在此记录，以防遗忘。</p>
</blockquote>
<!-- toc -->


<span id="more"></span>




<h2 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h2><table>
<thead>
<tr>
<th>名称</th>
<th>版本</th>
</tr>
</thead>
<tbody><tr>
<td>项目JRE</td>
<td>1.6</td>
</tr>
<tr>
<td>maven</td>
<td>3.2.5</td>
</tr>
<tr>
<td>maven jre</td>
<td>1.6</td>
</tr>
<tr>
<td>Resin</td>
<td>3.0.28</td>
</tr>
<tr>
<td>IntelliJ IDEA</td>
<td>2019.1.2</td>
</tr>
</tbody></table>
<h2 id="所遇到的各种坑"><a href="#所遇到的各种坑" class="headerlink" title="所遇到的各种坑"></a>所遇到的各种坑</h2><h3 id="IDEA如何与resin集成"><a href="#IDEA如何与resin集成" class="headerlink" title="IDEA如何与resin集成"></a>IDEA如何与resin集成</h3><p>先来说一说在Eclipse中是如何配置的。</p>
<p>之前一直都是用的tomcat，resin算是刚接触。公司对于resin的配置采用项目对应其特有配置文件的形式进行web容器初始化的。比如，resin默认的配置文件为resin.xml，当resin启动时自身会读取该xml中相关的集群配置、数据源配置、工作目录配置等等。</p>
<p>在resin与Eclipse的集成过程中，是通过定义主启动函数，并设置其相关参数来进行初始化启动的。示例如下：</p>
<ol>
<li><p>添加<strong>Java Application</strong></p>
<p>点击<em><strong>debug</strong></em>按钮右侧的小箭头，右键左侧菜单中的<em><strong>Java Application</strong></em>，选择<em><strong>new</strong></em>。</p>
</li>
<li><p>启动配置</p>
<ul>
<li><p><strong>Main</strong>选项卡 </p>
<p>在右侧新的窗口中，点击第一行<em><strong>Project</strong></em>文本框右侧的***Browse…***按钮，选择需要进行部署的项目。</p>
<p><img src="https://s2.loli.net/2022/04/16/3eMyhfj9zSC8rq5.jpg" alt="img"></p>
<p>在第二行<em><strong>Main Class</strong></em>文本框中输入<code>com.caucho.resin.Resin</code>，指定主启动函数。</p>
<p>下面的三个复选框可以忽略。</p>
</li>
<li><p><strong>Arguments</strong>选项卡</p>
<p>在第一个<em><strong>Program arguments</strong></em>文本框中，指定项目所用的Resin配置文件。</p>
<p>在第二个配置文件中指定Resin的home目录、日志实现以及相关jvm参数配置。</p>
<p><img src="https://s2.loli.net/2022/04/16/oZEwkFOUIDX2GuY.jpg" alt="image"></p>
</li>
</ul>
</li>
</ol>
<p>至此，Eclipse与Resin的集成就完成了。</p>
<p>但是，软件不一样，很多菜单的配置、软件的默认参数都不一样。比如，并没有要求配置Main Class以及Resin Home。</p>
<p>网上对于IDEA与Resin的集成方法文章较少，照抄是不太现实了，中间遇到了很多报错无法启动。只有自己摸索，不断尝试。具体的操作步骤见<strong>操作步骤</strong>章节中的<strong>Resin相关配置</strong>。</p>
<h3 id="Maven版本–JDK版本–AspectJ版本之间出现的问题"><a href="#Maven版本–JDK版本–AspectJ版本之间出现的问题" class="headerlink" title="Maven版本–JDK版本–AspectJ版本之间出现的问题"></a>Maven版本–JDK版本–AspectJ版本之间出现的问题</h3><p>这块内容尝试了很长时间，如需最终结论，请看本段最后。</p>
<ul>
<li><p><strong>Maven版本与JDK版本</strong></p>
<p>最开始，我的windows环境中安装了两种JDK版本，分别为1.6与1.8。我将JAVA_HOME设置为1.8，然后在拉完项目后，将项目运行环境以及编译环境（Eclipse中的Compiler）设置为1.6。</p>
<p>IDEA的Project Structure-&gt;Project选项卡-&gt;Project SDK设置为1.6。但发现此时maven无法clean install，因为我的maven使用的是3.3.6版本，并不支持JDK1.6。</p>
<p>经过查找，我在IDEA的maven设置中找到可以设置maven自身的运行环境。点击设置中Maven下的Runner选项卡，将JRE调整为了1.8(默认跟随项目jdk版本，所以不调整就是1.6)。</p>
<p>至此项目至少是可以clean install了。但却发生了下面的问题，见<strong>JDK版本–AspectJ版本</strong>。</p>
</li>
<li><p><strong>JDK版本–AspectJ版本</strong></p>
<p>在集成完成后，出现了这样的报错：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">org.aspectj.apache.bcel.classfile.ClassFormatException: Invalid byte tag in constant pool: 18</span><br></pre></td></tr></table></figure>

<p>经过查找资料，得知是aspectj版本过低的原因导致。可我项目已经配置了1.6的jre了啊？奇了怪了。我详细查看了AspectJ的报错日志，发现了问题所在。其中有一行是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sun.boot.library.path=C:\Program Files\Java\jdk1.8.0_112\jre\bin</span><br></pre></td></tr></table></figure>

<p>原来在AspectJ进行编译的时候，读取的还是系统环境变量中的JAVA_HOME啊。找到了问题所在，便想从IDEA的项目环境配置入手，可是找了半天还是没找到如何给AspectJ配置环境变量。</p>
</li>
<li><p><strong>最终解决思路</strong></p>
<p>由于AspectJ的限制，所以决定更换系统的JAVA_HOME为1.6的路径。maven也更换为支持jdk1.6的3.2.5版本。IDEA项目中无论是project sdk还是maven的runner等等，都更换为了1.6。终于，项目能够正常打包，AspectJ也可以正常编译了。</p>
</li>
</ul>
<h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><h3 id="Resin相关配置"><a href="#Resin相关配置" class="headerlink" title="Resin相关配置"></a>Resin相关配置</h3><p>如mic，对应resin&#x2F;conf目录下的mic-site.conf文件</p>
<h4 id="修改启动端口"><a href="#修改启动端口" class="headerlink" title="修改启动端口"></a>修改启动端口</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 修改port --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">http</span> <span class="attr">server-id</span>=<span class="string">&quot;&quot;</span> <span class="attr">host</span>=<span class="string">&quot;*&quot;</span> <span class="attr">port</span>=<span class="string">&quot;8081&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="修改compiling-loader"><a href="#修改compiling-loader" class="headerlink" title="修改compiling-loader"></a>修改compiling-loader</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">host-default</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">class-loader</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这里不确定是写</span></span><br><span class="line"><span class="comment">			Project Structure-&gt;Project中配置的compile output目录</span></span><br><span class="line"><span class="comment"> 			还是写生成的target中的classes目录，有待后续验证</span></span><br><span class="line"><span class="comment">		--&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">compiling-loader</span> <span class="attr">path</span>=<span class="string">&quot;D:\projects\ccs\ccs-web\target\classes&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- library-loade未研究有何影响 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">library-loader</span> <span class="attr">path</span>=<span class="string">&quot;webapps/WEB-INF/lib&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">class-loader</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">host-default</span>&gt;</span>    </span><br></pre></td></tr></table></figure>

<h4 id="修改工作空间目录"><a href="#修改工作空间目录" class="headerlink" title="修改工作空间目录"></a>修改工作空间目录</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">host</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">root-directory</span>=<span class="string">&quot;.&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">web-app</span> <span class="attr">id</span>=<span class="string">&quot;/&quot;</span> <span class="attr">document-directory</span>=<span class="string">&quot;D:\projects\ccs\ccs-web\src\main\webapp&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="IDEA相关配置"><a href="#IDEA相关配置" class="headerlink" title="IDEA相关配置"></a>IDEA相关配置</h3><h4 id="新建Resin配置界面"><a href="#新建Resin配置界面" class="headerlink" title="新建Resin配置界面"></a>新建Resin配置界面</h4><p><img src="https://s2.loli.net/2022/04/16/GOJyCUTKVNagkt1.png" alt="image"></p>
<h4 id="Server选项卡"><a href="#Server选项卡" class="headerlink" title="Server选项卡"></a>Server选项卡</h4><p>先来个总图，大概长这样。</p>
<p><img src="https://s2.loli.net/2022/04/16/KGTHIgduS9eihtk.png" alt="image"></p>
<h5 id="配置Application-Server"><a href="#配置Application-Server" class="headerlink" title="配置Application Server"></a>配置Application Server</h5><p>选择<em><strong>Application Server</strong></em>右侧的***Configure…***按钮，打开其配置界面。</p>
<p>设置<em><strong>Resin Home</strong></em>为本地Resin所在目录，并勾选<em><strong>Include all resin JARs</strong></em>复选框。</p>
<p>设置<em><strong>Default resin configuration file</strong></em>，定义默认的Resin配置文件。</p>
<p>点击OK完成配置。</p>
<p><img src="https://s2.loli.net/2022/04/16/GF6E9UKO7wtfyuR.png" alt="image"></p>
<h5 id="设置VM-options"><a href="#设置VM-options" class="headerlink" title="设置VM options"></a>设置VM options</h5><p>这里经过测试，不设置resin_home也是可以的，应该是idea会根据之前的配置自动读进去。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-Djava.util.logging.manager=com.caucho.log.LogManagerImpl</span><br><span class="line">-Xms512m</span><br><span class="line">-Xmx512m</span><br><span class="line">-XX:MaxPermSize=256m</span><br></pre></td></tr></table></figure>



<h5 id="设置JRE"><a href="#设置JRE" class="headerlink" title="设置JRE"></a>设置JRE</h5><p>这里当然选择<strong>1.6</strong></p>
<h5 id="设置Resin-configuration-template"><a href="#设置Resin-configuration-template" class="headerlink" title="设置Resin configuration template"></a>设置Resin configuration template</h5><p>这里定义自己需要配置的自定义启动文件。如：</p>
<p><img src="https://s2.loli.net/2022/04/16/q3kRQJzcSwIDGW7.png" alt="1560138919190"></p>
<p><strong>注意！</strong>，下面有一个复选框，叫做<em><strong>Do not alter Resin configuration</strong></em></p>
<p><img src="https://s2.loli.net/2022/04/16/boMDBEr3ZkIvju7.png" alt="1560138982055"></p>
<p>这里一定要勾上，亲测如果不勾会读不到上面的配置文件。</p>
<h5 id="添加compiler-output目录到classpath"><a href="#添加compiler-output目录到classpath" class="headerlink" title="添加compiler output目录到classpath"></a>添加compiler output目录到classpath</h5><p>如果不勾选<em><strong>Include compiler output and libraries on classpath</strong></em>，则会出现类似以下的报错信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java.lang.ClassNotFoundException: org.springframework.web.filter.CharacterEncodingFilter</span><br></pre></td></tr></table></figure>

<p>一定要勾上这个复选框。</p>
<p><img src="https://s2.loli.net/2022/04/16/63LxtwRBCTlYPFS.png" alt="1560139156989"></p>
<h5 id="端口及字符集配置"><a href="#端口及字符集配置" class="headerlink" title="端口及字符集配置"></a>端口及字符集配置</h5><p>如果上面勾选了<em><strong>Do not alter Resin configuration</strong></em>，那么无论这里设置什么http端口，都是以配置文件为准。</p>
<p><em><strong>JMX port</strong></em>需要每个应用设置的不一样。</p>
<p><em><strong>charset</strong></em>根据需要进行配置。</p>
<p><em><strong>Deploy mode</strong></em>设置为<em>automatic</em>即可。</p>
<h4 id="Deployment选项卡"><a href="#Deployment选项卡" class="headerlink" title="Deployment选项卡"></a>Deployment选项卡</h4><h5 id="添加所需要发布的Artifact"><a href="#添加所需要发布的Artifact" class="headerlink" title="添加所需要发布的Artifact"></a>添加所需要发布的Artifact</h5><p><img src="https://s2.loli.net/2022/04/16/BjQvTOpP3EiXSDa.png" alt="1560144659492"></p>
<p><img src="https://s2.loli.net/2022/04/16/orQwkiCdJvpKGF2.png" alt="1560144708369"></p>
<p><img src="https://s2.loli.net/2022/04/16/7Pw4rqV9O5dE8mj.png" alt="1560144802192"></p>
<p><em><strong>Deployment method</strong></em>需要修改为resin.xml。</p>
<p>JMX是把项目打包的文件 放在resin服务器下webapp下 只有在服务器启动时 才把项目给拷贝过去  无法在intellij中实时更新。</p>
<p>resin.xml是在C盘C:\Users\xxx\AppData\Local\Temp目录下 copy了一份resin.xml的配置文件 然后把服务器目录空间指向了你的项目工作空间  可以实现intellij修改实时更新</p>
<p>去掉***Use default context name(always true if deployment method is JMX)***的复选框。</p>
<p><em><strong>Application context name</strong></em> 保持默认<code>/</code>不变。</p>
<p>至此，项目已经可以正常启动了。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>由于算是初次的尝试，没有现有实例可供参考，难免会有错误，所以开发过程中一定还会遇到各种问题。但我相信，路都是一步步走出来的，<strong>如有问题，恳请指出</strong>。</p>
]]></content>
      <categories>
        <category>Resin</category>
      </categories>
      <tags>
        <tag>环境搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>Java并发-AQS解析</title>
    <url>/2022/01/08/Java%E5%B9%B6%E5%8F%91-AQS%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<h2 id="什么是AQS"><a href="#什么是AQS" class="headerlink" title="什么是AQS"></a>什么是AQS</h2><p>AQS全名为AbstractQueuedSynchronizer，即队列同步器。</p>
<p>它创始于JDK1.5，作者是很牛的Doug Lea，也是J.U.C的作者。</p>
<p>它是构建Lock、CountDownLatch等同步组件的基础框架。</p>
<p><img src="https://s2.loli.net/2022/01/05/CJvYDj1EmuxrNtZ.png" alt="image-20220105205641626"></p>
<p>常见的Lock实现，比如重入锁，读写锁等，内部都聚合一个AQS，一般会以内部类的形式出现。</p>
<p><img src="https://s2.loli.net/2022/01/05/elhEDTPn6qI1yxQ.png" alt="image-20220105202646793"></p>
<p>我们在使用Lock提供的API时，其内部会适配到AQS的抽象方法上去。</p>
<p><img src="https://s2.loli.net/2022/01/05/MmqesTUd1SjWGFi.png" alt="image-20220105203116151"></p>
<p>AQS同步的实现较为复杂，内含了同步状态的管理、线程队列、等待、通知、唤醒等一系列底层操作。</p>
<p>而我们只需要关注Lock的API，如何去真正实现同步的则交由AQS就可以了。</p>
<p>通过AQS，我们可以实现各种定制化的线程同步需求，将锁以及其他同步组件的实现难度降低了。</p>
<h2 id="为何要使用AQS"><a href="#为何要使用AQS" class="headerlink" title="为何要使用AQS"></a>为何要使用AQS</h2><p>java不是提供了synchronized关键字么，不是也可以实现锁么？它不够香么？主要原因有以下几点：</p>
<ul>
<li><p>性能方面</p>
<p>早期的JDK（JDK 1.6以前），synchronized的真正实现完全依赖于系统机制（monitor模式），造成频繁的用户态到内核态的转变，性能较差，而从1.6开始，JDK对synchronized进行了优化，为我们带来了<strong>锁升级机制</strong>。</p>
<p>与synchronized不同的是，AQS不仅使用了系统级API，还将一部分工作交给了JAVA层面，保持了用户态，它维护了一个FIFO同步队列。</p>
</li>
<li><p>功能方面</p>
<p>synchronized控制力度较粗，没有办法设置超时，重试，也没有办法相应中断，而AQS可以。正因为AQS控制力度更细，所以成为了各种同步组件的基础，实现了五花八门的功能。而要是用synchronized来实现的话属实乏力。</p>
</li>
</ul>
<h2 id="如何使用AQS"><a href="#如何使用AQS" class="headerlink" title="如何使用AQS"></a>如何使用AQS</h2><p>先不管AQS底层细节，需要知道的是：<strong>AQS依赖一个volatile的state来管理同步状态</strong></p>
<p>以及几个常用的API。还有其他的不一一例举。</p>
<p><strong>需要我们重写的API</strong></p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>protected boolean tryAcquire(int arg)</td>
<td>尝试设置state，设置成功则代表获取锁，此时AQS被置为了占用状态。</td>
</tr>
<tr>
<td>protected boolean tryRelease(int arg)</td>
<td>尝试设置state，设置成功则代表释放锁，此时AQS被置为空闲状态。</td>
</tr>
<tr>
<td>protected int tryAcquiredShared(int arg)</td>
<td>共享式获取同步状态，如果返回值大于0则表示获取成功，小于0则获取失败。</td>
</tr>
<tr>
<td>protected boolean tryReleaseShared(int arg)</td>
<td>共享式释放同步状态</td>
</tr>
</tbody></table>
<p><strong>需要我们调用的模板方法</strong></p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>public final void acquire(int arg)</td>
<td>独占式获取同步状态，如果获取失败，则会将当前线程加入同步队列等待。该方法会调用tryAcquire(int arg)</td>
</tr>
<tr>
<td>public final void acquireInterruptibly(int arg)</td>
<td>和acquire类似，但是会响应中断。如果当前线程被中断会抛出InterruptedException返回。</td>
</tr>
<tr>
<td>public final boolean release(int arg)</td>
<td>独占式释放同步状态。会调用tryRelease()，成功修改同步状态后将会唤醒头节点的后继节点。</td>
</tr>
<tr>
<td>public final void acquireShared(int arg)</td>
<td>共享式获取同步状态，如果获取失败，则会将当前线程加入同步队列等待。该方法会调用tryAcquireShared(int arg)。同一时刻，可以有多个线程获取同步状态，state判断是大于0或小于0，而独占式只能有一个线程获取占用，tryAcquire返回的是boolean，cas要么成功要么失败。</td>
</tr>
<tr>
<td>public final void acquireSharedInterruptibly(int arg)</td>
<td>和acquireShared类似，可以响应中断，抛出InterruptedException并返回。</td>
</tr>
<tr>
<td>public final releaseShared(int arg)</td>
<td>共享式释放同步状态。</td>
</tr>
</tbody></table>
<p>AQS实现锁，当然要告诉每个线程，他们是否获取到了锁。state就是一个标识位，当前线程调用AQS时会检查当前state是否满足预期，来判断自己是否可以继续执行，还是说进入队列等待。</p>
<p>一般使用AQS时，我们会把它聚合到我们自己的类当中，作为一个内部类来使用。</p>
<p>如下可以实现一个互斥锁。</p>
<ol>
<li><p>定义互斥锁，实现Lock接口</p>
</li>
<li><p>聚合AQS</p>
</li>
<li><p>维护AQS的state</p>
<p>因为可能会有竞争出现，所以需要CAS来对state进行更新</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 定义互斥锁，实现Lock接口。这里互斥锁是一种独占锁。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Mutex</span> <span class="keyword">implements</span> <span class="title class_">Lock</span>, java.io.Serializable &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 聚合AQS</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Sync</span> <span class="keyword">extends</span> <span class="title class_">AbstractQueuedSynchronizer</span> &#123;</span><br><span class="line">        <span class="comment">// 如果同步状态state为1，那么则判定为被当前线程占用。</span></span><br><span class="line">        <span class="comment">// 当然，可以是其他数字，按自己爱好或者需要来即可，只要上下文能对的上。</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">isHeldExclusively</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> getState() == <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义尝试获取锁，具体怎么样算获取到锁？我们自己定义。但是AQS规定了，抢到了返回true，没抢到要返回false。</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryAcquire</span><span class="params">(<span class="type">int</span> acquires)</span> &#123;</span><br><span class="line">            <span class="comment">// 比如这里，将state通过cas方式更新为1则判定抢到了锁。</span></span><br><span class="line">            <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>)) &#123;</span><br><span class="line">                <span class="comment">// 抢到锁可以调用父类的setExclusiveOwnerThread表明这个锁被该线程独占了。</span></span><br><span class="line">                setExclusiveOwnerThread(Thread.currentThread());</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 没抢到？返回false</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义释放锁，我们约定，如果state是0，那么就算是释放状态。</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">tryRelease</span><span class="params">(<span class="type">int</span> releases)</span> &#123;</span><br><span class="line">            <span class="comment">// 当然，如果本来就不是占用锁的线程，是不能被释放的，这里抛出异常。</span></span><br><span class="line">            <span class="keyword">if</span> (getState() == <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalMonitorStateException</span>();</span><br><span class="line">            setExclusiveOwnerThread(<span class="literal">null</span>);</span><br><span class="line">            <span class="comment">// 设置state为0。直到释放完毕，另一个线程就可以通过tryAcuqire来获取到锁了。</span></span><br><span class="line">            <span class="comment">// 这里不需要cas，也不需要原子操作。没有必要，能释放掉就行。</span></span><br><span class="line">            setState(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提供一个Condition</span></span><br><span class="line">        Condition <span class="title function_">newCondition</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ConditionObject</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同步器隐藏了复杂的实现，lock只需要调用sync即可。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Sync</span> <span class="variable">sync</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Sync</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lock</span><span class="params">()</span> &#123;</span><br><span class="line">        sync.acquire(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sync.tryAcquire(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span> &#123;</span><br><span class="line">        sync.release(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Condition <span class="title function_">newCondition</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sync.newCondition();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isLocked</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sync.isHeldExclusively();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasQueuedThreads</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sync.hasQueuedThreads();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        sync.acquireInterruptibly(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(<span class="type">long</span> timeout, TimeUnit unit)</span></span><br><span class="line">            <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">return</span> sync.tryAcquireNanos(<span class="number">1</span>, unit.toNanos(timeout));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="AQS内部实现逻辑"><a href="#AQS内部实现逻辑" class="headerlink" title="AQS内部实现逻辑"></a>AQS内部实现逻辑</h2><p>AQS内部主要办了四件事：</p>
<ul>
<li>维护共享同步状态state</li>
<li>为获取到同步状态的线程加入FIFO同步队列</li>
<li>阻塞其他未获取同步状态的线程</li>
<li>释放时唤醒后继节点</li>
</ul>
<p>结合起来，一般流程就是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">acquire()&#123;</span><br><span class="line">    if(AQS的实现类没有获取到同步状态)&#123;</span><br><span class="line">        生成节点</span><br><span class="line">        [	</span><br><span class="line">            加入队列  </span><br><span class="line">            节点循环检查</span><br><span class="line">        ]	</span><br><span class="line">        阻塞当前线程	</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">release()&#123;</span><br><span class="line">	if(设置同步状态成功)&#123;</span><br><span class="line">		设置头节点状态</span><br><span class="line">		唤醒后继节点来竞争</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="同步队列"><a href="#同步队列" class="headerlink" title="同步队列"></a>同步队列</h3><p>AQS维护了一个FIFO同步队列。</p>
<p>类似于CLH锁，该队列每个节点维护了一个线程，每个节点会自旋检查状态是否可以获取锁。头节点是当前获取到锁的线程节点。</p>
<p><img src="https://s2.loli.net/2022/01/05/KLR3ojnPk28NIqH.png" alt="image-20220105211238209"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Node</span> <span class="variable">SHARED</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Node</span> <span class="variable">EXCLUSIVE</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">CANCELLED</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SIGNAL</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">CONDITION</span> <span class="operator">=</span> -<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">PROPAGATE</span> <span class="operator">=</span> -<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">int</span> waitStatus;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">volatile</span> Node prev;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">volatile</span> Node next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">volatile</span> Thread thread;</span><br><span class="line"></span><br><span class="line">    Node nextWaiter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">isShared</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">return</span> <span class="variable">nextWaiter</span> <span class="operator">=</span>= SHARED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Node <span class="title function_">predecessor</span><span class="params">()</span> <span class="keyword">throws</span> NullPointerException &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">p</span> <span class="operator">=</span> prev;</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Node() &#123;    <span class="comment">// Used to establish initial head or SHARED marker</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Node(Thread thread, Node mode) &#123;     <span class="comment">// Used by addWaiter</span></span><br><span class="line">        <span class="built_in">this</span>.nextWaiter = mode;</span><br><span class="line">        <span class="built_in">this</span>.thread = thread;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Node(Thread thread, <span class="type">int</span> waitStatus) &#123; <span class="comment">// Used by Condition</span></span><br><span class="line">        <span class="built_in">this</span>.waitStatus = waitStatus;</span><br><span class="line">        <span class="built_in">this</span>.thread = thread;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Node属性以及方法描述：</p>
<p>每个node都含有其前驱节点和后继节点，分别为<strong>prev</strong>与<strong>next</strong>。</p>
<p>当前节点维护的线程即为<strong>thread</strong>。</p>
<p><strong>nextWaiter</strong>与condition队列有关，本次暂不讨论。</p>
<p>重点关注<strong>waitStatus</strong>的几个状态：</p>
<table>
<thead>
<tr>
<th>状态名</th>
<th>状态值</th>
<th>状态描述</th>
</tr>
</thead>
<tbody><tr>
<td>CANCELLED</td>
<td>1</td>
<td>该节点由于超时或中断而被取消。该状态不会再转变为其他状态，而且该节点的线程再也不会被阻塞</td>
</tr>
<tr>
<td>INITIAL</td>
<td>0</td>
<td>初始状态</td>
</tr>
<tr>
<td>SIGNAL</td>
<td>-1</td>
<td>其后继节点需要被唤醒，即该线程被释放或被取消时，必须唤醒其后继节点</td>
</tr>
<tr>
<td>CONDITION</td>
<td>-2</td>
<td>表示该节点的线程在条件队列中等待，而非在同步队列中。当其他线程对Condition调用了signal()方法后，该节点会被转移到同步队列中参与资源竞争</td>
</tr>
<tr>
<td>PROPAGATE</td>
<td>-3</td>
<td>只有共享模式下才会用到，为无条件传播状态。下一次共享式同步状态获取将会无条件被传播下去。共享锁会有很多线程获取到锁或者释放锁，所以有些方法是并发执行的，就会产生很多中间状态，而PROPAGATE就是为了让这些中间状态不影响程序的正常运行。</td>
</tr>
</tbody></table>
<h3 id="独占式"><a href="#独占式" class="headerlink" title="独占式"></a>独占式</h3><p>贴一张网上copy的图：</p>
<p><img src="https://yangsanity.me/images/43-6.png" alt="diagram-of-acquire"></p>
<h4 id="锁的获取"><a href="#锁的获取" class="headerlink" title="锁的获取"></a>锁的获取</h4><h5 id="acquire-int-arg"><a href="#acquire-int-arg" class="headerlink" title="acquire(int arg)"></a>acquire(int arg)</h5><p>该方法如果执行成功则表示当前线程获取到了锁。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">acquire</span><span class="params">(<span class="type">int</span> arg)</span> &#123;</span><br><span class="line">    <span class="comment">// 调用子类的tryAcquire具体实现，如果成功则当前线程获取到锁，失败则生成Node并加入队列。</span></span><br><span class="line">    <span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp;</span><br><span class="line">        <span class="comment">// 生成Node并加入队列尾部，队列中的node引用的线程会出现阻塞和唤醒。</span></span><br><span class="line">        <span class="comment">// 如果唤醒时tryAcquire获取同步状态成功，则退出队列。</span></span><br><span class="line">        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class="line">        <span class="comment">// 如果能进入这里，那么acquireQueued返回的就是true。</span></span><br><span class="line">        selfInterrupt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="addWaiter-Node-mode"><a href="#addWaiter-Node-mode" class="headerlink" title="addWaiter(Node mode)"></a>addWaiter(Node mode)</h5><p>如果竞争锁失败，则会需要通过addWaiter生成node。</p>
<p>node有两种，Node.EXCLUSIVE 用于独占，Node.SHARED 用于共享。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将当前争用锁的线程生成对应的node，并设置prev与next节点。</span></span><br><span class="line"><span class="keyword">private</span> Node <span class="title function_">addWaiter</span><span class="params">(Node mode)</span> &#123;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(Thread.currentThread(), mode);</span><br><span class="line">    <span class="comment">// 先获取队列当前的尾节点。</span></span><br><span class="line">    <span class="type">Node</span> <span class="variable">pred</span> <span class="operator">=</span> tail;</span><br><span class="line">    <span class="comment">// 如果尾节点不为空，，将并后继设置为当前线程node。</span></span><br><span class="line">    <span class="keyword">if</span> (pred != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 则将当前线程节点node的前驱节点设置为原尾节点node</span></span><br><span class="line">        node.prev = pred;</span><br><span class="line">        <span class="comment">// CAS方式将当前尾节点node的后继节点更新为当前线程节点node。</span></span><br><span class="line">        <span class="comment">// 源码表述为：Try the fast path of enq; backup to full enq on failure</span></span><br><span class="line">        <span class="comment">// 简单尝试设置一次，成功直接返回，失败则进入enq进行较复杂逻辑。这不是原子操作！</span></span><br><span class="line">        <span class="keyword">if</span> (compareAndSetTail(pred, node)) &#123;</span><br><span class="line">            pred.next = node;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果原本一个节点都没有，或者是第一次尝试设置尾节点时CAS失败了，则会走enq方法。</span></span><br><span class="line">    enq(node);</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="enq-Node-node"><a href="#enq-Node-node" class="headerlink" title="enq(Node node)"></a>enq(Node node)</h5><p>生成CLH节点，并设置前驱与后继，形成CLH。这里生成尾节点时需要循环CAS的方式保证原子性。</p>
<p><img src="https://s2.loli.net/2022/01/05/oGcDzke4WwY5VMP.png" alt="image-20220105222649483"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一个典型的无限循环CAS，也就是实现一个原子操作。是的尾节点的设置具有原子性，不会出错。</span></span><br><span class="line"><span class="keyword">private</span> Node <span class="title function_">enq</span><span class="params">(<span class="keyword">final</span> Node node)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">t</span> <span class="operator">=</span> tail;</span><br><span class="line">        <span class="comment">// 如果当前原有的尾节点为空，也就是说一个节点都没有时，就一定要初始化一个节点作为头节点。</span></span><br><span class="line">        <span class="keyword">if</span> (t == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (compareAndSetHead(<span class="keyword">new</span> <span class="title class_">Node</span>()))</span><br><span class="line">                tail = head;</span><br><span class="line">            <span class="comment">// 头节点生成成功，继续for循环，这次将会走else部分。</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果当前存在尾节点，那么就如同之前addWaiter中的操作，设置相关前驱和后继。</span></span><br><span class="line">            node.prev = t;</span><br><span class="line">            <span class="keyword">if</span> (compareAndSetTail(t, node)) &#123;</span><br><span class="line">                t.next = node;</span><br><span class="line">                <span class="comment">// 设置尾节点成功才会退出无限循环。</span></span><br><span class="line">                <span class="keyword">return</span> t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="acquireQueued-final-Node-node-int-arg"><a href="#acquireQueued-final-Node-node-int-arg" class="headerlink" title="acquireQueued(final Node node, int arg)"></a>acquireQueued(final Node node, int arg)</h5><p>生成node后，通过acquireQueued来维护队列，每个节点通过自旋方式检查前驱节点状态，以及维护前驱与自身的状态。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 队列操作，无限循环校验当前node是否有资格竞争锁以及是否需要阻塞。</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">acquireQueued</span><span class="params">(<span class="keyword">final</span> Node node, <span class="type">int</span> arg)</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">failed</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">interrupted</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="comment">// 获取当前node的前驱节点</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">Node</span> <span class="variable">p</span> <span class="operator">=</span> node.predecessor();</span><br><span class="line">            <span class="comment">// 如果前驱节点是头节点了，那么他就有资格去tryAcquire竞争锁，否则老老实实继续排队。</span></span><br><span class="line">            <span class="keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;</span><br><span class="line">                <span class="comment">// tryAcquire竞争成功，那么就删除原来的头节点（p.next = null去除头节点多余引用来帮助GC），</span></span><br><span class="line">                <span class="comment">// 并将该node设置为头节点。setHead实现很简单，可以看下文。</span></span><br><span class="line">                setHead(node);</span><br><span class="line">                p.next = <span class="literal">null</span>; <span class="comment">// help GC</span></span><br><span class="line">                failed = <span class="literal">false</span>;</span><br><span class="line">                <span class="comment">// 这里返回false，线程不会被acquire方法中的selfInterrupt()中断</span></span><br><span class="line">                <span class="keyword">return</span> interrupted;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果没有抢到锁，则要判断这个节点的线程是否需要阻塞以及是否已经中断。</span></span><br><span class="line">            <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class="line">                parkAndCheckInterrupt())</span><br><span class="line">                <span class="comment">// 如果执行到这，那么node在排队的时候被检测到中断了。</span></span><br><span class="line">                interrupted = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (failed)</span><br><span class="line">            cancelAcquire(node);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>只有前驱节点是头节点的线程才能去获取AQS的state同步状态。原因有两点：</p>
<ol>
<li><p>头节点为正在执行的线程节点。如果头节点执行完毕，那么将会释放同步状态（见后面的release方法详解），并唤醒后继节点。</p>
<p>后继节点被唤醒后，继续执行acquireQueued方法的自旋逻辑，判断前驱节点是否是头节点，是的话去tryAcquire。</p>
</li>
<li><p>实现FIFO，最先加入队列的节点第一个被通知来竞争锁。竞争成功后node会被后面的shouldParkAfterFailedAcquire方法设置waitStatus为SIGNAL。</p>
</li>
</ol>
<h5 id="setHead-Node-node"><a href="#setHead-Node-node" class="headerlink" title="setHead(Node node)"></a>setHead(Node node)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setHead</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">    head = node;</span><br><span class="line">    node.thread = <span class="literal">null</span>;</span><br><span class="line">    node.prev = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="shouldParkAfterFailedAcquire-Node-pred-Node-node"><a href="#shouldParkAfterFailedAcquire-Node-pred-Node-node" class="headerlink" title="shouldParkAfterFailedAcquire(Node pred, Node node)"></a>shouldParkAfterFailedAcquire(Node pred, Node node)</h5><p>当CLH的非头节点自旋检测前驱节点状态时，需要判断自身是否需要阻塞，毕竟老是自旋会非常消耗CPU。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">shouldParkAfterFailedAcquire</span><span class="params">(Node pred, Node node)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ws</span> <span class="operator">=</span> pred.waitStatus;</span><br><span class="line">    <span class="keyword">if</span> (ws == Node.SIGNAL)</span><br><span class="line">        <span class="comment">// 如果前驱节点的waitStatus是SIGNAL，值为-1，则表示前驱节点线程正在执行，后续节点都需要阻塞。</span></span><br><span class="line">        <span class="comment">// 于是直接返回true表示当前线程需要阻塞。</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (ws &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果前驱节点的waitStatus大于0，比如CANCELLED为1，则表示前驱线程已经取消了，</span></span><br><span class="line">        <span class="comment">// 就需要把当前节点node的前驱节点前移，跳过已取消的节点，并再次判断状态。</span></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            node.prev = pred = pred.prev;</span><br><span class="line">        &#125; <span class="keyword">while</span> (pred.waitStatus &gt; <span class="number">0</span>);</span><br><span class="line">        pred.next = node;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 回想一下Node的waitStatus有哪几种状态？</span></span><br><span class="line">        <span class="comment">// CANCELLED:1,INITIAL:0,SIGNAL:-1,CONDITION:-2,PROPAGATE:-3</span></span><br><span class="line">        <span class="comment">// 已经排除了-1 和 1，且不会是condition状态下，所以只会是0和-3，也就是INITIAL和PROPAGATE</span></span><br><span class="line">        compareAndSetWaitStatus(pred, ws, Node.SIGNAL);</span><br><span class="line">        <span class="comment">// 不论获取成功和失败，继续循环CAS，当然，如果成功了，下次循环就不会执行这块else，而是第一个if，</span></span><br><span class="line">        <span class="comment">// 返回true。当前线程将会被阻塞。</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上就是独占式获取锁的流程，接下来讲释放锁。</p>
<h4 id="锁的释放"><a href="#锁的释放" class="headerlink" title="锁的释放"></a>锁的释放</h4><h5 id="release-int-arg"><a href="#release-int-arg" class="headerlink" title="release(int arg)"></a>release(int arg)</h5><p>步骤不多，主要是两步</p>
<ol>
<li>调用子类实现的tryRelease方法，判断是否需要去释放掉队列头节点</li>
<li>如果头节点不为空且头节点不是初始化状态，那么会唤醒后继节点。</li>
</ol>
<p><img src="https://s2.loli.net/2022/01/05/kCXPdHc5BwrKojO.png" alt="image-20220105222956649"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">release</span><span class="params">(<span class="type">int</span> arg)</span> &#123;</span><br><span class="line">    <span class="comment">// 交由子类实现，子类可以判断AQS中的同步状态state的值是否满足预期，设置新的state并让tryRelease返回true或false。</span></span><br><span class="line">    <span class="comment">// true则为释放成功，false则为释放失败。</span></span><br><span class="line">    <span class="keyword">if</span> (tryRelease(arg)) &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">h</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">if</span> (h != <span class="literal">null</span> &amp;&amp; h.waitStatus != <span class="number">0</span>)</span><br><span class="line">            <span class="comment">// 唤醒后继节点</span></span><br><span class="line">            unparkSuccessor(h);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>具体看下unparkSuccessor的实现。</p>
<h5 id="unparkSuccessor-Node-node"><a href="#unparkSuccessor-Node-node" class="headerlink" title="unparkSuccessor(Node node)"></a>unparkSuccessor(Node node)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">unparkSuccessor</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">    <span class="comment">// 如果头节点waitStatus为取消状态，那么就需要对其置为初始化。</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">ws</span> <span class="operator">=</span> node.waitStatus;</span><br><span class="line">    <span class="keyword">if</span> (ws &lt; <span class="number">0</span>)</span><br><span class="line">        compareAndSetWaitStatus(node, ws, <span class="number">0</span>);</span><br><span class="line">	<span class="comment">// 先直接查看后继节点，如果后继节点被取消或者是空，那么从队列尾部向前检测，是否有node的状态为初始化或者是SIGNAL。</span></span><br><span class="line">    <span class="comment">// 如果有符合条件的后继，那么唤醒它，继续执行acquireQueued中的自旋来竞争锁。</span></span><br><span class="line">    <span class="type">Node</span> <span class="variable">s</span> <span class="operator">=</span> node.next;</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="literal">null</span> || s.waitStatus &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        s = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">Node</span> <span class="variable">t</span> <span class="operator">=</span> tail; t != <span class="literal">null</span> &amp;&amp; t != node; t = t.prev)</span><br><span class="line">            <span class="keyword">if</span> (t.waitStatus &lt;= <span class="number">0</span>)</span><br><span class="line">                s = t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (s != <span class="literal">null</span>)</span><br><span class="line">        LockSupport.unpark(s.thread);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="共享式"><a href="#共享式" class="headerlink" title="共享式"></a>共享式</h3><p>共享式与独占式的不同在于，独占式只允许一个线程获取到资源，其他线程直接阻塞，如ReentrantLock，在调用lock()方法后，其他线程无法执行lock后续的逻辑。而共享式则可以有多个线程同时访问共享资源。</p>
<p>以常用的CountDownLatch为例：</p>
<p>只有调用await()时主线程才会阻塞，实际上调用await()也就是再调用AQS的acquireSharedInterruptibly()。</p>
<p>而其他所有线程都可以同时对一个共享变量进行操作。等待所有其他线程处理完毕后，再执行await()的后续操作。</p>
<p><img src="C:\Users\skywater\AppData\Roaming\Typora\typora-user-images\image-20220105224258395.png" alt="image-20220105224258395"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CountDownLatch</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Sync</span> <span class="keyword">extends</span> <span class="title class_">AbstractQueuedSynchronizer</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">4982264981922014374L</span>;</span><br><span class="line"></span><br><span class="line">        Sync(<span class="type">int</span> count) &#123;</span><br><span class="line">            setState(count);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> getState();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果当前state值不为零，则可以获取这个共享锁，返回复数-1，否则coutDown结束了，返回正数1</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">tryAcquireShared</span><span class="params">(<span class="type">int</span> acquires)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (getState() == <span class="number">0</span>) ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">tryReleaseShared</span><span class="params">(<span class="type">int</span> releases)</span> &#123;</span><br><span class="line">            <span class="comment">// 每次对state减去1，直到减到0，返回true，锁被释放。</span></span><br><span class="line">            <span class="comment">// 这里需要循环CAS实现原子操作。</span></span><br><span class="line">            <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> getState();</span><br><span class="line">                <span class="keyword">if</span> (c == <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="type">int</span> <span class="variable">nextc</span> <span class="operator">=</span> c - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (compareAndSetState(c, nextc))</span><br><span class="line">                    <span class="type">return</span> <span class="variable">nextc</span> <span class="operator">=</span>= <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> java.util.concurrent.CountDownLatch.Sync sync;</span><br><span class="line">    <span class="comment">// 初始化一个count作为state值，当这个值被countDown消耗完，锁就会被释放。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CountDownLatch</span><span class="params">(<span class="type">int</span> count)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (count &lt; <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;count &lt; 0&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.sync = <span class="keyword">new</span> <span class="title class_">java</span>.util.concurrent.CountDownLatch.Sync(count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 阻塞线程</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">await</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        sync.acquireSharedInterruptibly(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 每次release掉一个</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">countDown</span><span class="params">()</span> &#123;</span><br><span class="line">        sync.releaseShared(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主要看下await()方法，也其实就是acquireSharedInterruptibly的实现。</p>
<h4 id="锁的获取-1"><a href="#锁的获取-1" class="headerlink" title="锁的获取"></a>锁的获取</h4><h5 id="acquireSharedInterruptibly-int-arg"><a href="#acquireSharedInterruptibly-int-arg" class="headerlink" title="acquireSharedInterruptibly(int arg)"></a>acquireSharedInterruptibly(int arg)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">acquireSharedInterruptibly</span><span class="params">(<span class="type">int</span> arg)</span></span><br><span class="line">        <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="keyword">if</span> (Thread.interrupted())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InterruptedException</span>();</span><br><span class="line">    <span class="comment">// 重点在这里，会调用子类的tryAcquireShared，如果小于0，则会阻塞。</span></span><br><span class="line">    <span class="keyword">if</span> (tryAcquireShared(arg) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="comment">// 实际的阻塞操作，会生成共享式节点加入队列中。</span></span><br><span class="line">        doAcquireSharedInterruptibly(arg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="doAcquireSharedInterruptibly-int-arg"><a href="#doAcquireSharedInterruptibly-int-arg" class="headerlink" title="doAcquireSharedInterruptibly(int arg)"></a>doAcquireSharedInterruptibly(int arg)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doAcquireSharedInterruptibly</span><span class="params">(<span class="type">int</span> arg)</span></span><br><span class="line">    <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="comment">// 和独占式相同的是，都是调用addWaiter方法，生成节点加入队列。</span></span><br><span class="line">    <span class="comment">// 和独占式不同的是这里是共享节点。</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> addWaiter(Node.SHARED);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">failed</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 老样子，循环CAS来维护节点</span></span><br><span class="line">        <span class="comment">// 和独占式相同的是，一样是必须前驱节点是头节点才可以tryAcquireShared</span></span><br><span class="line">        <span class="comment">// 和独占式不同的是，如果成功获取到了(tryAcquireShared返回值大于等于0)，调用的是setHeadAndPropagate。</span></span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">Node</span> <span class="variable">p</span> <span class="operator">=</span> node.predecessor();</span><br><span class="line">            <span class="keyword">if</span> (p == head) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> tryAcquireShared(arg);</span><br><span class="line">                <span class="keyword">if</span> (r &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    setHeadAndPropagate(node, r);</span><br><span class="line">                    p.next = <span class="literal">null</span>; <span class="comment">// help GC</span></span><br><span class="line">                    failed = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 这里获取锁失败了，继续阻塞，和独占式相同</span></span><br><span class="line">            <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class="line">                parkAndCheckInterrupt())</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InterruptedException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (failed)</span><br><span class="line">            cancelAcquire(node);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="锁的释放-1"><a href="#锁的释放-1" class="headerlink" title="锁的释放"></a>锁的释放</h4><p>CountDownLatch中调用的是countDown()，代表一个线程执行完毕了，需要扣去AQS的state值。</p>
<p>实际上也是调用和独占式release(int arg)类似的一个方法：releaseShared(int arg)。</p>
<h5 id="releaseShared-int-arg"><a href="#releaseShared-int-arg" class="headerlink" title="releaseShared(int arg)"></a>releaseShared(int arg)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">releaseShared</span><span class="params">(<span class="type">int</span> arg)</span> &#123;</span><br><span class="line">    <span class="comment">// 子类中实现，CountDownLatch中每次都会从state中扣除arg的值。</span></span><br><span class="line">    <span class="keyword">if</span> (tryReleaseShared(arg)) &#123;</span><br><span class="line">        <span class="comment">// 释放共享状态成功，则执行释放同步</span></span><br><span class="line">        doReleaseShared();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="doReleaseShared"><a href="#doReleaseShared" class="headerlink" title="doReleaseShared()"></a>doReleaseShared()</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doReleaseShared</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">h</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">if</span> (h != <span class="literal">null</span> &amp;&amp; h != tail) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">ws</span> <span class="operator">=</span> h.waitStatus;</span><br><span class="line">            <span class="keyword">if</span> (ws == Node.SIGNAL) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!compareAndSetWaitStatus(h, Node.SIGNAL, <span class="number">0</span>))</span><br><span class="line">                    <span class="keyword">continue</span>;            <span class="comment">// loop to recheck cases</span></span><br><span class="line">                unparkSuccessor(h);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (ws == <span class="number">0</span> &amp;&amp;</span><br><span class="line">                     !compareAndSetWaitStatus(h, <span class="number">0</span>, Node.PROPAGATE))</span><br><span class="line">                <span class="keyword">continue</span>;                <span class="comment">// loop on failed CAS</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (h == head)                   <span class="comment">// loop if head changed</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从网上copy的一张图。有空再自己画一遍加深印象。</p>
<p><img src="https://s2.loli.net/2022/01/05/sFSkt2TNZBoX4lK.png" alt="img"></p>
<h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><ol>
<li>AQS如何保证的内存可见性？</li>
<li>acquire()流程为何多次调用了tryAcquire()？</li>
<li>为何监测waitStatus总是从队列尾部向头部检测？</li>
</ol>
]]></content>
      <categories>
        <category>后端</category>
        <category>maven</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java并发-CPU如何实现的多线程</title>
    <url>/2020/09/06/Java%E5%B9%B6%E5%8F%91-CPU%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<!-- toc -->

<span id="more"></span>

<h2 id="时间片"><a href="#时间片" class="headerlink" title="时间片"></a>时间片</h2><p>CPU通过给现成分配时间片的形式来实现多线程。所以单核CPU也支持多线程执行。</p>
<p>多个线程看起来像同时运行，实则是轮番运行，由于时间片通常很短（在Linux上为5ms－800ms），用户不会感觉到。</p>
<h2 id="上下文切换"><a href="#上下文切换" class="headerlink" title="上下文切换"></a>上下文切换</h2><p>CPU通过时间片分配算法来循环执行任务。切换时间片的同时，会保存上一个执行线程任务的状态，用于切回。从切换出到切换回，算作一次上下文的切换。</p>
<p>比如，从英语课下课切换成数学课，老师和同学需要记住上节英语课上到哪一节了。上完其他课程再上英语课，就接着上一节讲到的位置接着上。</p>
<p>但是，如果一直上英语课不切换成其他课程，学英语的效率就会变得更高，因为节省了思维切换的开销。</p>
<p>同理，多线程在上下文切换时，也会造成开销。这就导致多线程在某些情况下，执行速度并不会比单线程要快。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcurrencyTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">10000l</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        concurrency();</span><br><span class="line">        serial();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">concurrency</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">long</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">                    a += <span class="number">5</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        thread.start();</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">long</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">            b--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> System.currentTimeMillis() - start;</span><br><span class="line">        thread.join();</span><br><span class="line">        System.out.println(<span class="string">&quot;concurrency :&quot;</span> + time + <span class="string">&quot;ms,b=&quot;</span> + b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serial</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">long</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">            a += <span class="number">5</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">long</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">            b--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> System.currentTimeMillis() - start;</span><br><span class="line">        System.out.println(<span class="string">&quot;serial:&quot;</span> + time + <span class="string">&quot;ms,b=&quot;</span> + b + <span class="string">&quot;,a=&quot;</span> + a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">concurrency :2ms,b=-10000</span><br><span class="line">serial:0ms,b=-10000,a=50000</span><br></pre></td></tr></table></figure>

<p>可见，多线程效率反而低了，这便体现了上下文切换所造成的多余的耗费。</p>
<h2 id="如何减少上下文的切换"><a href="#如何减少上下文的切换" class="headerlink" title="如何减少上下文的切换"></a>如何减少上下文的切换</h2><p>减少上下文切换的方法有无锁并发编程、CAS算法、使用最少线程和使用协程。</p>
<ul>
<li><p>无锁并发编程：</p>
<p>多线程竞争锁时，会引起上下文切换，</p>
<p>可将数据的ID按照Hash算法取模分段，不同的线程处理不同段的数据，可以避免使用锁。</p>
</li>
<li><p>CAS算法：</p>
<p>Java的Atomic包使用CAS算法来更新数据，而不需要加锁。</p>
</li>
<li><p>避免创建不需要的线程：</p>
<p>比如任务很少，但是创建了很多线程来处理，这样会造成大量线程都处于等待状态。</p>
</li>
<li><p>协程：</p>
<p>在单线程里实现多任务的调度，并在单线程里维持多个任务间的切换。</p>
<hr>
</li>
</ul>
<blockquote>
<p><strong>参考</strong></p>
<p>&lt;&lt;<a href="https://book.douban.com/subject/26591326/">Java并发编程的艺术</a>&gt;&gt;</p>
</blockquote>
]]></content>
      <categories>
        <category>后端</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>Java并发-Synchronized的实现</title>
    <url>/2020/09/06/Java%E5%B9%B6%E5%8F%91-Synchronized%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<!-- toc -->

<span id="more"></span>

<h2 id="Monitor基础"><a href="#Monitor基础" class="headerlink" title="Monitor基础"></a>Monitor基础</h2><h3 id="为什么要学习Monitor"><a href="#为什么要学习Monitor" class="headerlink" title="为什么要学习Monitor"></a>为什么要学习Monitor</h3><p>在JDK1.6之前，Synchronized为重量级锁，其实现只依赖于Monitor，效率较低。学习Monitor，是为学习Synchronized打下基础。</p>
<h3 id="什么是Monitor"><a href="#什么是Monitor" class="headerlink" title="什么是Monitor"></a>什么是Monitor</h3><p>Monitor是一种同步机制。它并不单单属于Java，而是一种系统级别的设计理念。</p>
<p>开发并发应用时，经常需要设计这样的对象，该对象的方法会在多线程的环境下被调用，而这些方法的执行都会改变该对象本身的状态。为了防止竞争条件 (race condition) 的出现，对于这类对象的设计，需要考虑解决以下问题：</p>
<ul>
<li><p>在任一时间内，只有唯一的公共的成员方法，被唯一的线程所执行。</p>
</li>
<li><p>对于对象的调用者来说，如果总是需要在调用方法之前进行拿锁，而在调用方法之后进行放锁，这将会使并发应用编程变得更加困难。合理的设计是，该对象本身确保任何针对它的方法请求的同步被透明的进行，而不需要调用者的介入。</p>
</li>
<li><p>如果一个对象的方法执行过程中，由于某些条件不能满足而阻塞，应该允许其它的客户端线程的方法调用可以访问该对象。</p>
</li>
</ul>
<p>Monitor Object 设计模式就是为了解决这类问题：</p>
<p>将被客户线程并发访问的对象定义为一个 monitor 对象。客户线程仅仅通过 monitor 对象的同步方法才能使用 monitor 对象定义的服务。为了防止陷入竞争条件，在任一时刻只能有一个同步方法被执行。</p>
<p>每一个 monitor 对象包含一个 monitor 锁，被同步方法用于串行访问对象的行为和状态。此外，同步方法可以根据一个或多个与 monitor 对象相关的 monitor conditions 来决定在何种情况下挂起或恢复他们的执行。</p>
<h3 id="Monitor结构"><a href="#Monitor结构" class="headerlink" title="Monitor结构"></a>Monitor结构</h3><p>Monitor机制中，共有四种角色：</p>
<ul>
<li><p><strong>监视者对象 Monitor Object</strong></p>
<p>负责公共的接口方法，这些公共的接口方法会在多线程的环境下被调用执行。</p>
</li>
<li><p><strong>同步方法：</strong></p>
<p>这些方法是监视者对象所定义。为了防止竞争条件，无论是否同时有多个线程并发调用同步方法，还是监视者对象含有多个同步方法，在任一时间内只有监视者对象的一个同步方法能够被执行。</p>
</li>
<li><p><strong>监视锁 (Monitor Lock):</strong> </p>
<p>每一个监视者对象都会拥有一把监视锁。</p>
</li>
<li><p><strong>监视条件 (Monitor Condition):</strong> </p>
<p>同步方法使用监视锁和监视条件来决定方法是否需要阻塞或重新执行。如果拥有监视锁，则可以调用方法，而当满足某个监视条件，则会记录工作进度，交还监视锁。一直在监视条件上挂起（<strong>WAITING &#x2F; TIMED_WAITING</strong>）。</p>
</li>
</ul>
<h3 id="Monitor序列图"><a href="#Monitor序列图" class="headerlink" title="Monitor序列图"></a>Monitor序列图</h3><p>在监视者对象模式中，在参与者之间将发生如下的协作过程：</p>
<ol>
<li><p><strong>同步方法的调用和串行化</strong></p>
<p>当客户线程调用监视者对象的同步方法时，必须首先获取它的监视锁。只要该监视者对象有其他同步方法正在被执行，获取操作便不会成功。在这种情况下，客户线程将被阻塞直到它获取监视锁。当客户线程成功获取监视锁后，进入临界区，执行方法实现的服务。一旦同步方法完成执行，监视锁会被自动释放，目的是使其他客户线程有机会调用执行该监视者对象的同步方法。</p>
</li>
<li><p><strong>同步方法线程挂起</strong></p>
<p>如果调用同步方法的客户线程必须被阻塞或是有其他原因不能立刻进行，它能够在一个监视条件上等待，这将导致该客户线程暂时释放监视锁，并被挂起在监视条件上。</p>
</li>
<li><p><strong>监视条件通知</strong></p>
<p>一个客户线程能够通知一个监视条件，目的是为了让一个前期使自己挂起在一个监视条件上的同步方法线程恢复运行。</p>
</li>
<li><p><strong>同步方法线程恢复</strong></p>
<p>一旦一个早先被挂起在监视条件上的同步方法线程获取通知，它将继续在最初的等待监视条件的点上执行。在被通知线程被允许恢复执行同步方法之前，监视锁将自动被获取。图 1 描述了<code>监视者</code>对象的动态特性。</p>
<p><strong>图 1. Monitor Object Sequence Diagram.</strong></p>
</li>
</ol>
<p><img src="https://s2.loli.net/2022/04/16/Tlx9eKQ5zJw1FDL.jpg" alt="图 1. Monitor Object Sequence Diagram"></p>
<h3 id="Java-Monitor-Object"><a href="#Java-Monitor-Object" class="headerlink" title="Java Monitor Object"></a>Java Monitor Object</h3><p>Java Monitor 从两个方面来支持线程之间的同步，即：互斥执行与协作。</p>
<ul>
<li><p><strong>互斥执行</strong></p>
<p> 对象内(对应到锁对象代码块内)的所有方法都<strong>互斥</strong>的执行。好比一个 Monitor 只有一个运行许可，任一个线程进入任何一个方法都需要获得这个许可，离开时把许可归还。</p>
</li>
<li><p><strong>协作</strong></p>
<p> 通常提供signal（等待&#x2F;通知）机制：允许正持有许可的线程暂时放弃许可，等待某个监视条件成真，条件成立后，当前线程可以通知正在等待这个条件的线程，让它可以重新获得运行许可。</p>
</li>
</ul>
<ol>
<li>线程进入同步方法中：</li>
<li>为了继续执行临界区代码，线程必须获取 Monitor 锁。如果获取锁成功，将成为该监视者对象的拥有者。任一时刻内，监视者对象只属于一个活动线程（The Owner）</li>
<li>拥有监视者对象的线程可以调用 wait() 进入等待集合（Wait Set），同时释放监视锁，进入等待状态。</li>
<li>其他线程调用 notify() &#x2F; notifyAll() 接口唤醒等待集合中的线程，这些等待的线程需要<strong>重新获取监视锁后</strong>才能执行 wait() 之后的代码。</li>
<li>同步方法执行完毕了，线程退出临界区，并释放监视锁。</li>
</ol>
<p>实质上，Java 的 Object 类本身就是监视者对象，Java 语言对于这样一个典型并发设计模式做了内建的支持。</p>
<p> Java 使用对象锁 ( 使用 synchronized 获得对象锁 ) 保证工作在共享的数据集上的线程<strong>互斥</strong>执行 , 使用 notify&#x2F;notifyAll&#x2F;wait 方法来<strong>协同</strong>不同线程之间的工作。这些方法在 Object 类上被定义，会被所有的 Java 对象自动继承。</p>
<p>在Java虚拟机(HotSpot)中，monitor是由ObjectMonitor实现的，其主要数据结构如下（位于HotSpot虚拟机源码ObjectMonitor.hpp文件，C++实现的）。</p>
<p><strong>图 2. Java Monitor</strong></p>
<p><img src="https://s2.loli.net/2022/04/16/qIP3clDpdS1jToK.jpg" alt="图 2. Java Monitor"></p>
<p>ObjectMonitor中有两个队列，_WaitSet和_EntryList，用来保存ObjectWaiter对象列表(每个等待锁的线程都会被封装成ObjectWaiter对象。</p>
<p>_owner指向持有ObjectMonitor对象的线程，当多个线程同时访问一段同步代码时，首先会进入 _EntryList 集合，当线程获取到对象的monitor 后进入 _Owner 区域并把monitor中的owner变量设置为当前线程同时monitor中的计数器count加1，若线程调用wait()方法，将释放当前持有的monitor，owner变量恢复为null，count自减1，同时该线程进入WaitSet集合中等待被唤醒。若当前线程执行完毕也将释放monitor(锁)并复位变量的值，以便其他线程进入获取monitor(锁)。</p>
<h2 id="Synchronized实现原理"><a href="#Synchronized实现原理" class="headerlink" title="Synchronized实现原理"></a>Synchronized实现原理</h2><p>Synchonized可用于普通同步方法、静态同步方法，以及局部代码块。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 普通方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> Object <span class="title function_">parse</span><span class="params">(String str)</span>&#123;...&#125;</span><br><span class="line"><span class="comment">// 同步方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Object <span class="title function_">parse</span><span class="params">(String str)</span>&#123;...&#125;</span><br><span class="line"><span class="comment">// 局部代码块</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">parse</span><span class="params">(String str)</span>&#123;</span><br><span class="line">    synchonized(lock)&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>普通同步方法</p>
<p>当加在普通方法时，使用的锁为当前实例对象，及this对象</p>
</li>
<li><p>静态同步方法</p>
<p>当加在静态同步方法，锁是当前类的Class对象</p>
</li>
<li><p>局部代码块</p>
<p>当在局部代码块使用<code>synchronized</code>关键字时，使用的锁是括号中的对象</p>
</li>
</ul>
<p>当我们使用<code>synchronized</code>修饰方法名时，编译后会在方法名上生成一个ACC_SYNCHRONIZED标识来实现同步。</p>
<p>代码块同步使用<code>monitorenter</code>与<code>monitorexit</code>指令字节码来实现。每个<code>monitorenter</code>必有与之对应的<code>monitorexit</code>。<code>monitorenter</code>会再编译后插入到同步代码块的开始位置，<code>monitorexit</code>会插入到同步代码块结束以及异常的位置。当线程执行到<code>monitorenter</code>时，会申请该代码块的锁。</p>
<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSync</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">MyLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyLock</span>();</span><br><span class="line">        <span class="keyword">synchronized</span>(lock)&#123;</span><br><span class="line">            lock.output();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyLock</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">output</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译后javap -v TestSync.class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PS C:\Users\skywater\Desktop&gt; javap -v .\TestSync.<span class="keyword">class</span></span><br><span class="line"><span class="title class_">Classfile</span> /C:/Users/skywater/Desktop/TestSync.<span class="keyword">class</span></span><br><span class="line">  <span class="title class_">Last</span> modified <span class="number">2020</span>-<span class="number">9</span>-<span class="number">6</span>; size <span class="number">457</span> bytes</span><br><span class="line">  MD5 checksum 736aaa775042ba09d031d3781250f216</span><br><span class="line">  Compiled from <span class="string">&quot;TestSync.java&quot;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSync</span></span><br><span class="line">  minor version: <span class="number">0</span></span><br><span class="line">  major version: <span class="number">52</span></span><br><span class="line">  flags: ACC_PUBLIC, ACC_SUPER</span><br><span class="line">Constant pool:</span><br><span class="line">   #<span class="number">1</span> = Methodref          #<span class="number">6.</span>#<span class="number">20</span>         <span class="comment">// java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">   #<span class="number">2</span> = Class              #<span class="number">21</span>            <span class="comment">// MyLock</span></span><br><span class="line">   #<span class="number">3</span> = Methodref          #<span class="number">2.</span>#<span class="number">20</span>         <span class="comment">// MyLock.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">   #<span class="number">4</span> = Methodref          #<span class="number">2.</span>#<span class="number">22</span>         <span class="comment">// MyLock.output:()V</span></span><br><span class="line">   #<span class="number">5</span> = Class              #<span class="number">23</span>            <span class="comment">// TestSync</span></span><br><span class="line">   #<span class="number">6</span> = Class              #<span class="number">24</span>            <span class="comment">// java/lang/Object</span></span><br><span class="line">   #<span class="number">7</span> = Utf8               &lt;init&gt;</span><br><span class="line">   #<span class="number">8</span> = Utf8               ()V</span><br><span class="line">   #<span class="number">9</span> = Utf8               Code</span><br><span class="line">  #<span class="number">10</span> = Utf8               LineNumberTable</span><br><span class="line">  #<span class="number">11</span> = Utf8               main</span><br><span class="line">  #<span class="number">12</span> = Utf8               ([Ljava/lang/String;)V</span><br><span class="line">  #<span class="number">13</span> = Utf8               StackMapTable</span><br><span class="line">  #<span class="number">14</span> = Class              #<span class="number">25</span>            <span class="comment">// &quot;[Ljava/lang/String;&quot;</span></span><br><span class="line">  #<span class="number">15</span> = Class              #<span class="number">21</span>            <span class="comment">// MyLock</span></span><br><span class="line">  #<span class="number">16</span> = Class              #<span class="number">24</span>            <span class="comment">// java/lang/Object</span></span><br><span class="line">  #<span class="number">17</span> = Class              #<span class="number">26</span>            <span class="comment">// java/lang/Throwable</span></span><br><span class="line">  #<span class="number">18</span> = Utf8               SourceFile</span><br><span class="line">  #<span class="number">19</span> = Utf8               TestSync.java</span><br><span class="line">  #<span class="number">20</span> = NameAndType        #<span class="number">7</span>:#<span class="number">8</span>          <span class="comment">// &quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">  #<span class="number">21</span> = Utf8               MyLock</span><br><span class="line">  #<span class="number">22</span> = NameAndType        #<span class="number">27</span>:#<span class="number">8</span>         <span class="comment">// output:()V</span></span><br><span class="line">  #<span class="number">23</span> = Utf8               TestSync</span><br><span class="line">  #<span class="number">24</span> = Utf8               java/lang/Object</span><br><span class="line">  #<span class="number">25</span> = Utf8               [Ljava/lang/String;</span><br><span class="line">  #<span class="number">26</span> = Utf8               java/lang/Throwable</span><br><span class="line">  #<span class="number">27</span> = Utf8               output</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">TestSync</span><span class="params">()</span>;</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         <span class="number">1</span>: invokespecial #<span class="number">1</span>                  <span class="comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">         <span class="number">4</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">1</span>: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(java.lang.String[])</span>;</span><br><span class="line">    descriptor: ([Ljava/lang/String;)V</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">4</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: <span class="keyword">new</span>           #<span class="number">2</span>                  <span class="comment">// class MyLock</span></span><br><span class="line">         <span class="number">3</span>: dup</span><br><span class="line">         <span class="number">4</span>: invokespecial #<span class="number">3</span>                  <span class="comment">// Method MyLock.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">         <span class="number">7</span>: astore_1</span><br><span class="line">         <span class="number">8</span>: aload_1</span><br><span class="line">         <span class="number">9</span>: dup</span><br><span class="line">        <span class="number">10</span>: astore_2</span><br><span class="line">        <span class="number">11</span>: monitorenter</span><br><span class="line">        <span class="number">12</span>: aload_1</span><br><span class="line">        <span class="number">13</span>: invokevirtual #<span class="number">4</span>                  <span class="comment">// Method MyLock.output:()V</span></span><br><span class="line">        <span class="number">16</span>: aload_2</span><br><span class="line">        <span class="number">17</span>: monitorexit</span><br><span class="line">        <span class="number">18</span>: goto          <span class="number">26</span></span><br><span class="line">        <span class="number">21</span>: astore_3</span><br><span class="line">        <span class="number">22</span>: aload_2</span><br><span class="line">        <span class="number">23</span>: monitorexit</span><br><span class="line">        <span class="number">24</span>: aload_3</span><br><span class="line">        <span class="number">25</span>: athrow</span><br><span class="line">        <span class="number">26</span>: <span class="keyword">return</span></span><br><span class="line">      Exception table:</span><br><span class="line">         from    to  target type</span><br><span class="line">            <span class="number">12</span>    <span class="number">18</span>    <span class="number">21</span>   any</span><br><span class="line">            <span class="number">21</span>    <span class="number">24</span>    <span class="number">21</span>   any</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">4</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">5</span>: <span class="number">8</span></span><br><span class="line">        line <span class="number">6</span>: <span class="number">12</span></span><br><span class="line">        line <span class="number">7</span>: <span class="number">16</span></span><br><span class="line">        line <span class="number">8</span>: <span class="number">26</span></span><br><span class="line">      StackMapTable: number_of_entries = <span class="number">2</span></span><br><span class="line">        frame_type = <span class="number">255</span> <span class="comment">/* full_frame */</span></span><br><span class="line">          offset_delta = <span class="number">21</span></span><br><span class="line">          locals = [ class <span class="string">&quot;[Ljava/lang/String;&quot;</span>, <span class="keyword">class</span> <span class="title class_">MyLock</span>, <span class="keyword">class</span> <span class="title class_">java</span>/lang/Object ]</span><br><span class="line">          stack = [ <span class="keyword">class</span> <span class="title class_">java</span>/lang/Throwable ]</span><br><span class="line">        frame_type = <span class="number">250</span> <span class="comment">/* chop */</span></span><br><span class="line">          offset_delta = <span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line">SourceFile: <span class="string">&quot;TestSync.java&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/04/16/e6RK9MfqbA2BLpy.png" alt="image-20200906171829072"></p>
<p>在JVM里，对象锁就是实现monitor机制的一种方式。entermonitor就是获得某个对象的lock(owner是当前线程)，leavemonitor就是释放某个对象的锁。</p>
<h3 id="对象头"><a href="#对象头" class="headerlink" title="对象头"></a>对象头</h3><p><code>synchronized</code>使用的锁是存在于对象头中。</p>
<p><img src="https://s2.loli.net/2022/04/16/XOl6P29qpFWHKrY.png" alt="img"></p>
<p>如果锁是数组，则使用三个字宽来表示对象头，如果是非数组，则用两个字宽来表示。</p>
<p>1字宽&#x3D;4字节&#x3D;32bit</p>
<table>
<thead>
<tr>
<th align="center">长度</th>
<th align="center">内容</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">32&#x2F;64bit</td>
<td align="center">Mark word</td>
<td align="center">存储对象的hashcode或锁信息等</td>
</tr>
<tr>
<td align="center">32&#x2F;64bit</td>
<td align="center">Class Metadata Address</td>
<td align="center">存储到对象数据类型的指针</td>
</tr>
<tr>
<td align="center">32&#x2F;64bit</td>
<td align="center">Array length</td>
<td align="center">如果是数组，则表示数组的长度*</td>
</tr>
</tbody></table>
<h3 id="Mark-Word"><a href="#Mark-Word" class="headerlink" title="Mark Word"></a>Mark Word</h3><p>Java对象头Mark word中默认存储以下内容：</p>
<ul>
<li>HashCode</li>
<li>分代年龄</li>
<li>锁标记位</li>
</ul>
<table>
<thead>
<tr>
<th align="center">锁状态</th>
<th align="center">25bit</th>
<th align="center">4bit</th>
<th align="center">1bit是否是偏向锁</th>
<th align="center">2bit锁标志位</th>
</tr>
</thead>
<tbody><tr>
<td align="center">无锁状态</td>
<td align="center">对象的hashCode</td>
<td align="center">对象分代年龄</td>
<td align="center">0</td>
<td align="center">01</td>
</tr>
</tbody></table>
<p>在运行期间，Mark Word里存储的数据会随着锁标志位的改变而改变，可能有以下四种情况</p>
<p><strong>32位虚拟机</strong></p>
<p><img src="https://s2.loli.net/2022/04/16/aL2FyzqT7Dh5NlQ.png" alt="image-20200610135728528"></p>
<p><strong>64位虚拟机</strong></p>
<p><img src="https://s2.loli.net/2022/04/16/JmFQd8HaOR9uCSN.png" alt="image-20200610141406509"></p>
<blockquote>
<p>一些名词解释：</p>
<p>identity hash code是指<strong>不经重写</strong>过由jvm计算的hashcode*</p>
<p>unused：未使用的</p>
<p>hashcode：上文提到的<strong>identity</strong> hash code，本文出现的hashcode都是指identity hash code</p>
<p>thread: 偏向锁记录的线程标识</p>
<p>epoch: 验证偏向锁有效性的时间戳</p>
<p>age：分代年龄</p>
<p>biased_lock 偏向锁标志</p>
<p>lock 锁标志</p>
<p>pointer_to_lock_record 轻量锁lock record指针</p>
<p>pointer_to_heavyweight_monitor 重量锁monitor指针</p>
</blockquote>
<h3 id="Lock-Record"><a href="#Lock-Record" class="headerlink" title="Lock Record"></a>Lock Record</h3><p>当线程访问到同步代码块，如果锁对象的锁标志位为01（无锁状态），则会在线程栈中创建<strong>Lock Record</strong>（<strong>锁记录</strong>）空间，用于存储Mark Word的拷贝。官方称之为<strong>Displaced Mark Word</strong>。</p>
<p><strong>Lock Record是线程私有的数据结构</strong>，每个线程都拥有一个可用的Lock Record列表，同时还有个全局的可用列表。当该线程拥有，会将锁对象的对象头中的Mark Word拷贝一份到其中一个Lock Record中。</p>
<p><strong>每一个被锁住的对象Mark Word都会和一个Lock Record关联（对象头的MarkWord中的Lock Word指向Lock Record的起始地址），同时Lock Record中有一个Owner字段存放拥有该锁的线程的唯一标识（或者<code>object mark word</code>），表示该锁被这个线程占用</strong>。</p>
<p>如下图所示为Lock Record的内部结构：</p>
<table>
<thead>
<tr>
<th align="center">Lock Record</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Owner</td>
<td align="center">初始时为NULL表示当前没有任何线程拥有该monitor record，<strong>当线程成功拥有该锁后保存线程唯一标识</strong>，当锁被释放时又设置为NULL</td>
</tr>
<tr>
<td align="center">EntryQ</td>
<td align="center">关联一个系统互斥锁（semaphore），<strong>阻塞所有试图锁住monitor record失败的线程</strong></td>
</tr>
<tr>
<td align="center">RcThis</td>
<td align="center"><strong>表示blocked或waiting在该monitor record上的所有线程的个数</strong></td>
</tr>
<tr>
<td align="center">Nest</td>
<td align="center">用来实现 <strong>重入锁的计数</strong></td>
</tr>
<tr>
<td align="center">HashCode</td>
<td align="center">保存从对象头拷贝过来的HashCode值（可能还包含GC age）</td>
</tr>
<tr>
<td align="center">Candidate</td>
<td align="center">用来避免不必要的阻塞或等待线程唤醒，因为每一次只有一个线程能够成功拥有锁，如果每次前一个释放锁的线程唤醒所有正在阻塞或等待的线程，会引起不必要的上下文切换（从阻塞到就绪然后因为竞争锁失败又被阻塞）从而导致性能严重下降。<br/><strong>Candidate只有两种可能的值，0表示没有需要唤醒的线程1表示要唤醒一个继任线程来竞争锁。</strong></td>
</tr>
</tbody></table>
<h3 id="锁类型与锁的升级"><a href="#锁类型与锁的升级" class="headerlink" title="锁类型与锁的升级"></a>锁类型与锁的升级</h3><p>Java中锁共分为四种状态，级别从低到高分别为：<strong>无锁状态</strong>、<strong>偏向锁</strong>、<strong>轻量级锁</strong>、<strong>重量级锁</strong></p>
<p>Java SE1.6为了减少获得锁和释放锁所带来的性能消耗，引入了“偏向锁”和“轻量级锁”。</p>
<p>锁可以被升级，但不能被降级。当偏向锁升级为轻量级锁后，无法降级为偏向锁。目的是为了提高获得锁和释放锁的效率。</p>
<h4 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h4><p>并发访问一个同步代码块，在很多情况下，往往是同一个线程获取到这个代码块的执行权。为了降低进入同步代码块时获取锁造成的损耗，于是JDK1.6引入了偏向锁。</p>
<p>轻量级锁的获取及释放依赖多次CAS原子指令，而偏向锁只需要在置换ThreadID的时候依赖一次CAS原子指令即可。<strong>适用于同一个线程多次访问同一个同步代码块。</strong></p>
<p>偏向锁只有遇到其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁，线程不会主动释放偏向锁。</p>
<p>偏向锁的撤销，需要等待全局安全点（在这个时间点上没有字节码正在执行），它会首先暂停拥有偏向锁的线程，然后检查持有偏向锁的线程是否活着，如果线程不处于活动状态，则将对象头设置成<strong>无锁状态</strong> （标志位为“01”） ，若处于活动状态，则膨胀为<strong>轻量级锁</strong>（标志位为“00”）。最后唤醒暂停的线程 。</p>
<p>此时的轻量级锁由原持有偏向锁的线程所有，并继续执行其同步代码，而正在竞争的线程会自旋等待该轻量级锁。（对于一个已经竞争到同步锁的线程，在还没有走出同步块的时候，时间片结束不会导致释放锁。）</p>
<p>流程可见下图：</p>
<img src="https://s2.loli.net/2022/04/16/dixMak4HhE1Fl3e.png" alt="偏向锁"  />

<h5 id="关闭偏向锁"><a href="#关闭偏向锁" class="headerlink" title="关闭偏向锁"></a>关闭偏向锁</h5><p>Java6与Java7中默认启用偏向锁，但是它在应用程序启动几秒钟之后才激活，如有必要可以使用JVM参数来关闭延迟：<code>-XX:BiasedLockingStartupDelay=0  </code>。</p>
<p>如果确定应用程序所有的锁基本都出在竞争状态下，则可以选择关闭偏向锁：<code>-XX:-UseBiasedLocking=false  </code>，此时，当申请锁时都会进入轻量级锁状态。</p>
<h4 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h4><p>当偏向锁发生多线程竞争时，会膨胀成轻量级锁。</p>
<p>在代码进入同步块时，如果此同步对象未被锁定，锁标志位“01”，虚拟机将在当前线程的栈帧中建立一个名为<strong>锁记录Lock Record</strong>的空间用于存储锁对象对象头中Mark Word的拷贝</p>
<p>在线程栈帧中创建Lock Record空间，并在其中创建所对象头Mark Word的拷贝，修改拷贝的Mark Word中的Owner内容为指向锁对象的指针。</p>
<p>修改锁标志位为00，将指向线程ID的指针记录到锁对象头中。</p>
<p><img src="https://s2.loli.net/2022/04/16/E18VDtjs6hUbHg3.jpg" alt="preview"></p>
<img src="https://s2.loli.net/2022/04/16/CRFvQy9LVbu6UYh.png" alt="轻量锁及膨胀流程图"  />

<h4 id="重量级锁"><a href="#重量级锁" class="headerlink" title="重量级锁"></a>重量级锁</h4><p>重量级锁依赖于Monitor实现，而Java中的ObjectMonitor基于系统底层的Mutex Lock（互斥锁）来实现。</p>
<p><code>Mutex Lock</code>保护代码临界区在同一时刻只有一个线程可以访问。如果线程访问时已上锁，则新线程进入阻塞（BLOCKED）。代码块执行结束后，需要对<code>Mutex Lock</code>进行解锁。</p>
<p>Java线程进入阻塞或重新唤醒，需要操作系统从用户态转换为核心态，而频繁切换较为耗费系统资源，所以在JDK1.6之前，synchronized仅依赖于Monitor，频繁的状态切换导致执行效率较低，所以在1.6之后，在虚拟机层面引入了偏向锁以及轻量级锁，加入了直接判断线程ID以及通过一定时间的自旋，来避免使用重量级锁。</p>
<h4 id="三种锁的对比"><a href="#三种锁的对比" class="headerlink" title="三种锁的对比"></a>三种锁的对比</h4><table>
<thead>
<tr>
<th></th>
<th>优势</th>
<th>劣势</th>
<th>适用场景</th>
</tr>
</thead>
<tbody><tr>
<td>偏向锁</td>
<td>仅通过一次CAS操作markword填充当前线程的id，是则获得锁，不是则撤销并升级为轻量级锁。</td>
<td>如果程序运行存在过多的锁竞争，则会带来锁撤销的性能开销。</td>
<td>代码块偶尔发生竞争。</td>
</tr>
<tr>
<td>轻量级锁</td>
<td>如果线程未能获取到锁，则会进入高速的CAS自旋，而不进入阻塞，节省了线程之间上下文切换的开销。</td>
<td>自旋如果长时间竞争不到锁会消耗cpu。</td>
<td>代码块占用锁的时间较短。</td>
</tr>
<tr>
<td>重量级锁</td>
<td>不使用自旋，节约cpu。</td>
<td>依赖于Monitor，monitor依赖于系统底层Mutex Lock，用户态与核心态的切换降低了代码执行效率。</td>
<td>系统中竞争多，且锁占用时间较长。</td>
</tr>
</tbody></table>
<p>附：全流程</p>
<p><img src="https://s2.loli.net/2022/04/16/w17ZxmlzrBIOHuq.jpg" alt="img"></p>
<hr>
<blockquote>
<p>参考</p>
<p>&lt;&lt;<a href="https://book.douban.com/subject/26591326/">Java并发编程的艺术</a>&gt;&gt;</p>
<p><a href="https://www.ibm.com/developerworks/cn/java/j-lo-synchronized/">探索 Java 同步机制</a></p>
<p><a href="https://www.jianshu.com/p/6fe4bc3374a2">Java 多线程（二）－Monitor</a></p>
<p><a href="https://juejin.im/post/5b90cd7c5188255c877e20c8">Synchronized原理</a></p>
<p><a href="https://www.cnblogs.com/wade-luffy/p/5969418.html">偏向锁，轻量级锁，自旋锁，重量级锁的详细介绍</a></p>
<p><a href="https://tech.meituan.com/2018/11/15/java-lock.html">不可不说的Java“锁”事</a></p>
<p><a href="https://www.cnblogs.com/javaminer/p/3889023.html">JVM内部细节之一：synchronized关键字及实现细节（轻量级锁Lightweight Locking）</a></p>
<p><a href="https://juejin.im/post/5b4eec7df265da0fa00a118f">啃碎并发（七）：深入分析Synchronized原理</a></p>
</blockquote>
]]></content>
      <categories>
        <category>后端</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>Java并发-死锁的原因及如何解决</title>
    <url>/2020/09/06/Java%E5%B9%B6%E5%8F%91-%E6%AD%BB%E9%94%81%E7%9A%84%E5%8E%9F%E5%9B%A0%E5%8F%8A%E5%8F%91%E7%94%9F%E6%97%B6%E5%A6%82%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<!-- toc -->

<span id="more"></span>

<h2 id="什么是死锁"><a href="#什么是死锁" class="headerlink" title="什么是死锁"></a>什么是死锁</h2><p>死锁是指两个或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。</p>
<h2 id="死锁的原因"><a href="#死锁的原因" class="headerlink" title="死锁的原因"></a>死锁的原因</h2><p><strong>独占锁</strong>：独占锁就是在同一时刻只能有一个线程获取到锁，而其他获取锁的线程只能处于同步队列中等待，只有获取锁的线程释放了锁，后继的线程才能够获取锁。  </p>
<p>常说的死锁四大条件包括：</p>
<p>互斥条件 —&gt; 独占锁的特点之一。</p>
<p>请求与保持条件 —&gt; 独占锁的特点之一，尝试获取锁时并不会释放已经持有的锁</p>
<p>不剥夺条件 —&gt; 独占锁的特点之一。</p>
<p>循环等待条件 —&gt; 唯一需要记忆的造成死锁的条件。</p>
<p>如下代码会出现死锁：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeadLockTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">lockA</span> <span class="operator">=</span> <span class="string">&quot;A&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">lockB</span> <span class="operator">=</span> <span class="string">&quot;B&quot;</span>;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lockA)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">synchronized</span> (lockB)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;this is b&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lockB)&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (lockA)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;this is a&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>线程1一开始获取了锁A并占用100ms，此时线程2先获取到了锁B，然后尝试获取锁A，但A被线程1占用，所以线程2进入了锁池等待竞争锁A。当线程1执行到需要获取锁B，可锁B被线程2所占用未释放，所以线程1进入了锁B的等待池，等待竞争锁B。至此，两个线程都进入了等待阶段，而两个线程又都不会释放自身所持有的锁。从而造成了死锁。</p>
<h2 id="如何减少死锁发生的概率"><a href="#如何减少死锁发生的概率" class="headerlink" title="如何减少死锁发生的概率"></a>如何减少死锁发生的概率</h2><ol>
<li>如果想要打破互斥条件，我们需要允许进程同时访问某些资源，这种方法受制于实际场景，不太容易实现条件；</li>
<li>打破不可抢占条件，这样需要允许进程强行从占有者那里夺取某些资源，或者简单一点理解，占有资源的进程不能再申请占有其他资源，必须释放手上的资源之后才能发起申请，这个其实也很难找到适用场景；</li>
<li>进程在运行前申请得到所有的资源，否则该进程不能进入准备执行状态。这个方法看似有点用处，但是它的缺点是可能导致资源利用率和进程并发性降低；</li>
<li>避免出现资源申请环路，即对资源事先分类编号，按号分配。这种方式可以有效提高资源的利用率和系统吞吐量，但是增加了系统开销，增大了进程对资源的占用时间。</li>
</ol>
<ul>
<li>避免一个线程同时获取多个锁</li>
<li>避免一个线程在锁内同时占用多个资源，尽量保证每个锁只占用一个资源。</li>
<li>尝试使用定时锁，使用lock.tryLock（timeout）来替代使用内部锁机制。</li>
<li>对于数据库锁，加锁和解锁必须在一个数据库连接里，否则会出现解锁失败的情况。</li>
</ul>
<h2 id="当死锁发生时"><a href="#当死锁发生时" class="headerlink" title="当死锁发生时"></a>当死锁发生时</h2><h3 id="检测死锁"><a href="#检测死锁" class="headerlink" title="检测死锁"></a>检测死锁</h3><ol>
<li><p><strong>使用jps工具</strong></p>
<p>jps是jdk提供的一个查看当前java进程的小工具， 可以看做是JavaVirtual Machine Process Status Tool的缩写。非常简单实用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令格式：jps [options ] [ hostid ] </span><br><span class="line"></span><br><span class="line">[options]选项 ：</span><br><span class="line">-q：仅输出VM标识符，不包括classname,jar name,arguments in main method </span><br><span class="line">-m：输出main method的参数 </span><br><span class="line">-l：输出完全的包名，应用主类名，jar的完全路径名 </span><br><span class="line">-v：输出jvm参数 </span><br><span class="line">-V：输出通过flag文件传递到JVM中的参数(.hotspotrc文件或-XX:Flags=所指定的文件 </span><br><span class="line">-Joption：传递参数到vm,例如:-J-Xms512m</span><br><span class="line"></span><br><span class="line">[hostid]：</span><br><span class="line"></span><br><span class="line">[protocol:][[//]hostname][:port][/servername]</span><br><span class="line"></span><br><span class="line">命令的输出格式 ：</span><br><span class="line">lvmid [[classname|JARfilename|&quot;Unknown&quot;][arg*][jvmarg*]]</span><br></pre></td></tr></table></figure>

<p>这里用jps -l，找到我们实际用的进程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:\projects\my\demo&gt;jps -l</span><br><span class="line">13696 com.caucho.server.resin.Resin</span><br><span class="line">14708 org.jetbrains.jps.cmdline.Launcher</span><br><span class="line">13168 com.caucho.server.resin.Resin</span><br><span class="line">14208 org.jetbrains.jps.cmdline.Launcher</span><br><span class="line">14240 org.jetbrains.idea.maven.server.RemoteMavenServer</span><br><span class="line">16412 com.skywater.demo.thread.art.one.DeadLockTest</span><br><span class="line">12620 org.jetbrains.jps.cmdline.Launcher</span><br><span class="line">12552 org.jetbrains.jps.cmdline.Launcher</span><br><span class="line">7560 com.caucho.server.resin.Resin</span><br><span class="line">4360 org.jetbrains.kotlin.daemon.KotlinCompileDaemon</span><br><span class="line">2424 org.codehaus.plexus.classworlds.launcher.Launcher</span><br><span class="line">15560</span><br><span class="line">15424 sun.tools.jps.Jps</span><br></pre></td></tr></table></figure>

<p>及<code>com.skywater.demo.thread.art.one.DeadLockTest</code>对应的16412</p>
</li>
<li><p><strong>使用jstack</strong></p>
<p>jstack是java虚拟机自带的一种堆栈跟踪工具。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:\projects\my\demo&gt;jstack -h</span><br><span class="line">Usage:</span><br><span class="line">    jstack [-l] &lt;pid&gt;</span><br><span class="line">        (to connect to running process)</span><br><span class="line">    jstack -F [-m] [-l] &lt;pid&gt;</span><br><span class="line">        (to connect to a hung process)</span><br><span class="line">    jstack [-m] [-l] &lt;executable&gt; &lt;core&gt;</span><br><span class="line">        (to connect to a core file)</span><br><span class="line">    jstack [-m] [-l] [server_id@]&lt;remote server IP or hostname&gt;</span><br><span class="line">        (to connect to a remote debug server)</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">    -F  to force a thread dump. Use when jstack &lt;pid&gt; does not respond (process is hung)</span><br><span class="line">    -m  to print both java and native frames (mixed mode)</span><br><span class="line">    -l  long listing. Prints additional information about locks</span><br><span class="line">    -h or -help to print this help message</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>jstack用于打印出给定的java进程ID或core file或远程调试服务的Java堆栈信息，如果是在64位机器上，需要指定选项”-J-d64”，Windows的jstack使用方式只支持以下的这种方式：<code>jstack [-l] pid</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    D:\projects\my\demo&gt;jstack 16412</span><br><span class="line">   2020-06-08 16:44:04</span><br><span class="line">Full thread dump Java HotSpot(TM) 64-Bit Server VM (25.112-b15 mixed mode):</span><br><span class="line">      </span><br><span class="line">   &quot;DestroyJavaVM&quot; #13 prio=5 os_prio=0 tid=0x000000000215a800 nid=0x3324 waiting on condition [0x0000000000000000]</span><br><span class="line">         java.lang.Thread.State: RUNNABLE</span><br><span class="line">      </span><br><span class="line">      &quot;Thread-1&quot; #12 prio=5 os_prio=0 tid=0x000000001e3b0800 nid=0x22c0 waiting for monitor entry [0x000000001ecbf000]</span><br><span class="line">         java.lang.Thread.State: BLOCKED (on object monitor)</span><br><span class="line">              at com.skywater.demo.thread.art.one.DeadLockTest.lambda$main$1(DeadLockTest.java:41)</span><br><span class="line">              - waiting to lock &lt;0x000000076b8a9318&gt; (a java.lang.String)</span><br><span class="line">              - locked &lt;0x000000076b8a9348&gt; (a java.lang.String)</span><br><span class="line">              at com.skywater.demo.thread.art.one.DeadLockTest$$Lambda$2/812265671.run(Unknown Source)</span><br><span class="line">              at java.lang.Thread.run(Thread.java:745)</span><br><span class="line">      </span><br><span class="line">      &quot;Thread-0&quot; #11 prio=5 os_prio=0 tid=0x000000001e3b0000 nid=0x43f4 waiting for monitor entry [0x000000001eb6f000]</span><br><span class="line">         java.lang.Thread.State: BLOCKED (on object monitor)</span><br><span class="line">              at com.skywater.demo.thread.art.one.DeadLockTest.lambda$main$0(DeadLockTest.java:29)</span><br><span class="line">              - waiting to lock &lt;0x000000076b8a9348&gt; (a java.lang.String)</span><br><span class="line">              - locked &lt;0x000000076b8a9318&gt; (a java.lang.String)</span><br><span class="line">              at com.skywater.demo.thread.art.one.DeadLockTest$$Lambda$1/94438417.run(Unknown Source)</span><br><span class="line">              at java.lang.Thread.run(Thread.java:745)</span><br><span class="line">      </span><br><span class="line">      &quot;Service Thread&quot; #10 daemon prio=9 os_prio=0 tid=0x000000001d4c0000 nid=0x3844 runnable [0x0000000000000000]</span><br><span class="line">         java.lang.Thread.State: RUNNABLE</span><br><span class="line">      </span><br><span class="line">      &quot;C1 CompilerThread2&quot; #9 daemon prio=9 os_prio=2 tid=0x000000001d421000 nid=0xc90 waiting on condition [0x0000000000000000]</span><br><span class="line">         java.lang.Thread.State: RUNNABLE</span><br><span class="line">      </span><br><span class="line">      &quot;C2 CompilerThread1&quot; #8 daemon prio=9 os_prio=2 tid=0x000000001d434000 nid=0x3d14 waiting on condition [0x0000000000000000]</span><br><span class="line">         java.lang.Thread.State: RUNNABLE</span><br><span class="line">      </span><br><span class="line">      &quot;C2 CompilerThread0&quot; #7 daemon prio=9 os_prio=2 tid=0x000000001d433800 nid=0x3120 waiting on condition [0x0000000000000000]</span><br><span class="line">         java.lang.Thread.State: RUNNABLE</span><br><span class="line">      </span><br><span class="line">      &quot;Monitor Ctrl-Break&quot; #6 daemon prio=5 os_prio=0 tid=0x000000001d432000 nid=0x2898 runnable [0x000000001d8ce000]</span><br><span class="line">         java.lang.Thread.State: RUNNABLE</span><br><span class="line">              at java.net.SocketInputStream.socketRead0(Native Method)</span><br><span class="line">              at java.net.SocketInputStream.socketRead(SocketInputStream.java:116)</span><br><span class="line">              at java.net.SocketInputStream.read(SocketInputStream.java:170)</span><br><span class="line">              at java.net.SocketInputStream.read(SocketInputStream.java:141)</span><br><span class="line">              at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)</span><br><span class="line">              at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)</span><br><span class="line">              at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)</span><br><span class="line">              - locked &lt;0x000000076b64f008&gt; (a java.io.InputStreamReader)</span><br><span class="line">              at java.io.InputStreamReader.read(InputStreamReader.java:184)</span><br><span class="line">              at java.io.BufferedReader.fill(BufferedReader.java:161)</span><br><span class="line">              at java.io.BufferedReader.readLine(BufferedReader.java:324)</span><br><span class="line">              - locked &lt;0x000000076b64f008&gt; (a java.io.InputStreamReader)</span><br><span class="line">              at java.io.BufferedReader.readLine(BufferedReader.java:389)</span><br><span class="line">              at com.intellij.rt.execution.application.AppMainV2$1.run(AppMainV2.java:61)</span><br><span class="line">      </span><br><span class="line">      &quot;Attach Listener&quot; #5 daemon prio=5 os_prio=2 tid=0x000000001d10a800 nid=0x3618 waiting on condition [0x0000000000000000]</span><br><span class="line">         java.lang.Thread.State: RUNNABLE</span><br><span class="line">      </span><br><span class="line">      &quot;Signal Dispatcher&quot; #4 daemon prio=9 os_prio=2 tid=0x000000001be1f000 nid=0xc48 runnable [0x0000000000000000]</span><br><span class="line">         java.lang.Thread.State: RUNNABLE</span><br><span class="line">      </span><br><span class="line">      &quot;Finalizer&quot; #3 daemon prio=8 os_prio=1 tid=0x000000001bdf7000 nid=0x25fc in Object.wait() [0x000000001cf8e000]</span><br><span class="line">         java.lang.Thread.State: WAITING (on object monitor)</span><br><span class="line">              at java.lang.Object.wait(Native Method)</span><br><span class="line">              - waiting on &lt;0x000000076b388e98&gt; (a java.lang.ref.ReferenceQueue$Lock)</span><br><span class="line">              at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:143)</span><br><span class="line">              - locked &lt;0x000000076b388e98&gt; (a java.lang.ref.ReferenceQueue$Lock)</span><br><span class="line">              at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:164)</span><br><span class="line">              at java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:209)</span><br><span class="line">      </span><br><span class="line">      &quot;Reference Handler&quot; #2 daemon prio=10 os_prio=2 tid=0x000000001bdb5800 nid=0x45a8 in Object.wait() [0x000000001d0fe000]</span><br><span class="line">         java.lang.Thread.State: WAITING (on object monitor)</span><br><span class="line">              at java.lang.Object.wait(Native Method)</span><br><span class="line">              - waiting on &lt;0x000000076b386b40&gt; (a java.lang.ref.Reference$Lock)</span><br><span class="line">              at java.lang.Object.wait(Object.java:502)</span><br><span class="line">              at java.lang.ref.Reference.tryHandlePending(Reference.java:191)</span><br><span class="line">              - locked &lt;0x000000076b386b40&gt; (a java.lang.ref.Reference$Lock)</span><br><span class="line">              at java.lang.ref.Reference$ReferenceHandler.run(Reference.java:153)</span><br><span class="line">      </span><br><span class="line">      &quot;VM Thread&quot; os_prio=2 tid=0x000000001bdae000 nid=0x4018 runnable</span><br><span class="line">      </span><br><span class="line">      &quot;GC task thread#0 (ParallelGC)&quot; os_prio=0 tid=0x0000000002170000 nid=0x18b4 runnable</span><br><span class="line">      </span><br><span class="line">      &quot;GC task thread#1 (ParallelGC)&quot; os_prio=0 tid=0x0000000002171800 nid=0x331c runnable</span><br><span class="line">      </span><br><span class="line">      &quot;GC task thread#2 (ParallelGC)&quot; os_prio=0 tid=0x0000000002173000 nid=0x4154 runnable</span><br><span class="line">      </span><br><span class="line">      &quot;GC task thread#3 (ParallelGC)&quot; os_prio=0 tid=0x0000000002174800 nid=0x3888 runnable</span><br><span class="line">      </span><br><span class="line">      &quot;VM Periodic Task Thread&quot; os_prio=2 tid=0x000000001e14a000 nid=0x31bc waiting on condition</span><br><span class="line">      </span><br><span class="line">      JNI global references: 335</span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">      Found one Java-level deadlock:</span><br><span class="line">      =============================</span><br><span class="line">      &quot;Thread-1&quot;:</span><br><span class="line">        waiting to lock monitor 0x000000001be02208 (object 0x000000076b8a9318, a java.lang.String),</span><br><span class="line">        which is held by &quot;Thread-0&quot;</span><br><span class="line">      &quot;Thread-0&quot;:</span><br><span class="line">        waiting to lock monitor 0x000000001be036a8 (object 0x000000076b8a9348, a java.lang.String),</span><br><span class="line">        which is held by &quot;Thread-1&quot;</span><br><span class="line">      </span><br><span class="line">      Java stack information for the threads listed above:</span><br><span class="line">      ===================================================</span><br><span class="line">      &quot;Thread-1&quot;:</span><br><span class="line">              at com.skywater.demo.thread.art.one.DeadLockTest.lambda$main$1(DeadLockTest.java:41)</span><br><span class="line">              - waiting to lock &lt;0x000000076b8a9318&gt; (a java.lang.String)</span><br><span class="line">              - locked &lt;0x000000076b8a9348&gt; (a java.lang.String)</span><br><span class="line">              at com.skywater.demo.thread.art.one.DeadLockTest$$Lambda$2/812265671.run(Unknown Source)</span><br><span class="line">              at java.lang.Thread.run(Thread.java:745)</span><br><span class="line">      &quot;Thread-0&quot;:</span><br><span class="line">              at com.skywater.demo.thread.art.one.DeadLockTest.lambda$main$0(DeadLockTest.java:29)</span><br><span class="line">              - waiting to lock &lt;0x000000076b8a9348&gt; (a java.lang.String)</span><br><span class="line">              - locked &lt;0x000000076b8a9318&gt; (a java.lang.String)</span><br><span class="line">              at com.skywater.demo.thread.art.one.DeadLockTest$$Lambda$1/94438417.run(Unknown Source)</span><br><span class="line">              at java.lang.Thread.run(Thread.java:745)</span><br><span class="line">      </span><br><span class="line">      Found 1 deadlock.</span><br></pre></td></tr></table></figure>

<p>可见显示有1个死锁<code>Found 1 deadlock.</code></p>
</li>
</ol>
<h3 id="死锁的恢复"><a href="#死锁的恢复" class="headerlink" title="死锁的恢复"></a>死锁的恢复</h3><p>一旦在死锁检测时发现了死锁，就要消除死锁，使系统从死锁状态中恢复过来。 </p>
<ol>
<li>最简单，最常用的方法就是进行系统的重新启动，不过这种方法代价很大，它意味着在这之前所有的进程已经完成的计算工作都将付之东流，包括参与死锁的那些进程，以及未参与死锁的进程。</li>
<li>撤消进程，剥夺资源。终止参与死锁的进程，收回它们占有的资源，从而解除死锁。这时又分两种情况：一次性撤消参与死锁的全部进程，剥夺全部资源；或者逐步撤消参与死锁的进程，逐步收回死锁进程占有的资源。一般来说，选择逐步撤消的进程时要按照一定的原则进行，目的是撤消那些代价最小的进程，比如按进程的优先级确定进程的代价；考虑进程运行时的代价和与此进程相关的外部作业的代价等因素。 </li>
<li>进程回退策略，即让参与死锁的进程回退到没有发生死锁前某一点处，并由此点处继续执行，以求再次执行时不再发生死锁。虽然这是个较理想的办法，但是操作起来系统开销极大，要有堆栈这样的机构记录进程的每一步变化，以便今后的回退，有时这是无法做到的。</li>
</ol>
<hr>
<blockquote>
<p><strong>参考</strong></p>
<p>&lt;&lt;<a href="https://book.douban.com/subject/26591326/">Java并发编程的艺术</a>&gt;&gt;</p>
<p><a href="https://www.ibm.com/developerworks/cn/java/j-lo-deadlock/index.html">Java 程序死锁问题原理及解决方案</a></p>
</blockquote>
]]></content>
      <categories>
        <category>后端</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>MapStruct使用</title>
    <url>/2022/02/10/MapStruct%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="MapStruct"><a href="#MapStruct" class="headerlink" title="MapStruct"></a>MapStruct</h1><p>[TOC]</p>
<h2 id="什么是MapStruct"><a href="#什么是MapStruct" class="headerlink" title="什么是MapStruct"></a>什么是MapStruct</h2><p>业务系统开发过程中，常常有分层概念，如持久层，业务层，数据传输层，视图层。</p>
<p>每个分层各自有自己的bean命名规则，对应上面提到的，如DO，BO，DTO，VO等。虽然命名不同，但绝大部分情况下，bean的内容都大同小异。所以，相同业务对象Bean在不同层交换数据时常常会涉及到类型的映射转换。MapStruct就是其中一种。</p>
<h2 id="与其他Bean映射工具对比"><a href="#与其他Bean映射工具对比" class="headerlink" title="与其他Bean映射工具对比"></a>与其他Bean映射工具对比</h2><p>市面上有很多映射工具类，比较流行的有Spring BeanUtils，Cglib BeanCopier，Apache BeanUtils，Dozer，orika，以及这次讲的MapStruct。</p>
<p>对上面提到的框架进行归类：</p>
<table>
<thead>
<tr>
<th>框架</th>
<th>深拷贝&#x2F;浅拷贝</th>
<th>实现方式</th>
<th>执行阶段</th>
</tr>
</thead>
<tbody><tr>
<td>Spring BeanUtils</td>
<td>浅拷贝</td>
<td>Java反射</td>
<td>运行期</td>
</tr>
<tr>
<td>Cglib BeanCopier</td>
<td>浅拷贝</td>
<td>修改字节码生成代理类，代理类实现get、set</td>
<td>运行期</td>
</tr>
<tr>
<td>Apache BeanUtils</td>
<td>浅拷贝</td>
<td>Java反射</td>
<td>运行期</td>
</tr>
<tr>
<td>Dozer</td>
<td>深拷贝</td>
<td>Java反射</td>
<td>运行期</td>
</tr>
<tr>
<td>orika</td>
<td>深拷贝</td>
<td>javassist生成字节码</td>
<td>编译期</td>
</tr>
<tr>
<td>MapStruct</td>
<td>深拷贝</td>
<td>Annotation Processor生成源码</td>
<td>编译期</td>
</tr>
</tbody></table>
<p>性能对比：</p>
<p>就通常使用上来说，性能由高到底为：MapStruct &gt; orika &gt; Cglib BeanCopier &gt; Spring BeanUtils &gt; Apache BeanUtils &gt; Dozer </p>
<p>MapStruct优势在于功能丰富，编译期生成Java源码进行映射，性能高。</p>
<p>具体对比结果网上有很多，不细说。</p>
<h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><h3 id="配置依赖"><a href="#配置依赖" class="headerlink" title="配置依赖"></a>配置依赖</h3><h4 id="maven方式"><a href="#maven方式" class="headerlink" title="maven方式"></a>maven方式</h4><h5 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">org.mapstruct.version</span>&gt;</span>1.4.2.Final<span class="tag">&lt;/<span class="name">org.mapstruct.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mapstruct<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapstruct<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;org.mapstruct.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- MapStruct依靠Annotation Processor生成代码 --&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- maven import方式无法统一管理plugin版本，仍需手动定义，--&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- mapstruct-processor版本一般与mapstruct版本保持一致 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">annotationProcessorPaths</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">path</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mapstruct<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapstruct-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;org.mapstruct.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">annotationProcessorPaths</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h5 id="集成Spring"><a href="#集成Spring" class="headerlink" title="集成Spring"></a>集成Spring</h5><p>如果是Spring项目，建议配置一下，可以将MapStruct生成的Mapper类直接依赖注入到其他Bean。</p>
<p>主要在编译插件配置中加上一些配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">annotationProcessorPaths</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">path</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mapstruct<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapstruct-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mapstruct-processor.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">annotationProcessorPaths</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">compilerArgs</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">arg</span>&gt;</span></span><br><span class="line">                -Amapstruct.suppressGeneratorTimestamp=true</span><br><span class="line">            <span class="tag">&lt;/<span class="name">arg</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- spring项目可以在这里全局配置mapper的defaultComponentModel为spring --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- mapper会成为受spring管理的bean，被依赖注入至其他bean --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">arg</span>&gt;</span></span><br><span class="line">                -Amapstruct.defaultComponentModel=spring</span><br><span class="line">            <span class="tag">&lt;/<span class="name">arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">compilerArgs</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="集成lombok"><a href="#集成lombok" class="headerlink" title="集成lombok"></a>集成lombok</h5><p>一般业务项目中，Lombok也是常用的一款工具，需要注意的是，Lombok也依赖于Annotation Processor，所以也需要配置Lombok的Annotation Processor Paths，编译时才能进行代码生成。</p>
<p><strong>注意：</strong>Lombok 在1.18.16版本中引入了一项重大改动<a href="https://projectlombok.org/changelog">changelog</a>，必须要再额外添加一个Annotation Processor：<code>lombok-mapstruct-binding</code>。见如下配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">org.mapstruct.version</span>&gt;</span>1.4.2.Final<span class="tag">&lt;/<span class="name">org.mapstruct.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">org.projectlombok.version</span>&gt;</span>1.18.16<span class="tag">&lt;/<span class="name">org.projectlombok.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mapstruct<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapstruct<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;org.mapstruct.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;org.projectlombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">annotationProcessorPaths</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">path</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mapstruct<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapstruct-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;org.mapstruct.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">path</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;org.projectlombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!-- 如果Lombok是1.18.16以上版本，这个注解处理器一定要加 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">path</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok-mapstruct-binding<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">annotationProcessorPaths</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="映射器-Mapper"><a href="#映射器-Mapper" class="headerlink" title="映射器 Mapper"></a>映射器 Mapper</h3><h4 id="定义映射器"><a href="#定义映射器" class="headerlink" title="定义映射器"></a>定义映射器</h4><p>MapStruct使用<code>@Mapper</code>来定义转换类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">VenueTransformer</span> &#123;</span><br><span class="line">    VenueDTO <span class="title function_">toVenueDTO</span><span class="params">(VenueDO venueDO)</span>;</span><br><span class="line">    List&lt;VenueDTO&gt; <span class="title function_">toVenueDTOList</span><span class="params">(List&lt;VenueDO&gt; venueDOList)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义这样一个接口（也可以是抽象类），在编译时，MapStruct将根据参数与返回类型，为其中字段自动生成转换代码。</p>
<p>以下是自动生成的代码，会在target&#x2F;generate-sources目录下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="meta">@Generated(</span></span><br><span class="line"><span class="meta">    value = &quot;org.mapstruct.ap.MappingProcessor&quot;,</span></span><br><span class="line"><span class="meta">    comments = &quot;version: 1.4.2.Final, compiler: javac, environment: Java 1.8.0_131 (Oracle Corporation)&quot;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VenueTransformerImpl</span> <span class="keyword">implements</span> <span class="title class_">VenueTransformer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> VenueDTO <span class="title function_">toVenueDTO</span><span class="params">(VenueDO venueDO)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ( venueDO == <span class="literal">null</span> ) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">VenueDTO</span> <span class="variable">venueDTO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VenueDTO</span>();</span><br><span class="line">        venueDTO.setAdderName( venueDO.getAdderName() );</span><br><span class="line">        venueDTO.setAdderNo( venueDO.getAdderNo() );</span><br><span class="line">        venueDTO.setAddTime( venueDO.getAddTime() );</span><br><span class="line">        venueDTO.setUpdaterName( venueDO.getUpdaterName() );</span><br><span class="line">        venueDTO.setUpdaterNo( venueDO.getUpdaterNo() );</span><br><span class="line">        venueDTO.setUpdateTime( venueDO.getUpdateTime() );</span><br><span class="line">        venueDTO.setVenueId( venueDO.getVenueId() );</span><br><span class="line">        venueDTO.setVenueName( venueDO.getVenueName() );</span><br><span class="line">        <span class="keyword">return</span> venueDTO;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;VenueDTO&gt; <span class="title function_">toVenueDTOList</span><span class="params">(List&lt;VenueDO&gt; venueDOList)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ( venueDOList == <span class="literal">null</span> ) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;VenueDTO&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;VenueDTO&gt;( venueDOList.size() );</span><br><span class="line">        <span class="keyword">for</span> ( VenueDO venueDO : venueDOList ) &#123;</span><br><span class="line">            list.add( toVenueDTO( venueDO ) );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以发现，源类型与目标类型中的字段名如果一样，MapStruct会自动映射上。单个Bean以及Bean List都会生成，拓展开也可以是Set，又或者是一个具体的实现类，如ArrayList等。</p>
<h4 id="获取映射器"><a href="#获取映射器" class="headerlink" title="获取映射器"></a>获取映射器</h4><p>如果如前文所述，在maven配置时，配置了<code>defaultComponentModel=spring</code>，那么可以直接像注入其他@Service一样注入这个@Mapper即可。</p>
<p>如果没有配置，也可以通过<code>Mappers.getMapper( VenueTransformer.class )</code>来获取映射器实例。</p>
<h4 id="定义字段映射规则"><a href="#定义字段映射规则" class="headerlink" title="定义字段映射规则"></a>定义字段映射规则</h4><p>如果源类型与目标类型中字段名不一样，我们也可以通过<code>@Mapping</code>注解来自定义字段的映射关系。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ExhibitionTransformer</span> &#123;</span><br><span class="line">    <span class="meta">@Mapping(source = &quot;exhibitionName&quot;, target = &quot;exhibitionShowName&quot;)</span></span><br><span class="line">    ExhibitionDTO <span class="title function_">toExhibitionDTO</span><span class="params">(ExhibitionDO exhibitionDO)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此处会将<code>ExhibitionDO.exhibitionName</code>映射到<code>ExhibitionDTO.exhibitionShowName</code>上。</p>
<p>MapStruct会自动处理一些类型转换，比如一个Integer类型要映射到String类型上，则会调用String.valueOf(int)，具体见<a href="https://mapstruct.org/documentation/stable/reference/html/#implicit-type-conversions">隐式类型转换</a>。</p>
<h4 id="自定义Bean映射规则"><a href="#自定义Bean映射规则" class="headerlink" title="自定义Bean映射规则"></a>自定义Bean映射规则</h4><p>如果映射过程比较复杂，定制性很高，MapStruct也提供了自己写代码的转换方式。只需要在接口里写个default方法即可。</p>
<h4 id="消除歧义"><a href="#消除歧义" class="headerlink" title="消除歧义"></a>消除歧义</h4><h5 id="返回值类型相同"><a href="#返回值类型相同" class="headerlink" title="返回值类型相同"></a>返回值类型相同</h5><p>如果一个Mapper（包括@Mapper.use()的其他Mapper）中，出现了多个方法，他们的入参类型相同且返回值类型相同，会出现歧义，MapStruct会不知道要用哪一个具体的转换器方法。此时，我们可以通过给方法”起名字”的方式来消除歧义性，给方法加上<code>@Named</code>注解。如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper(imports = &#123;EncryptUtil.class, CompanyLevel.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CompanyTransformer</span> &#123;</span><br><span class="line">    CompanyDTO <span class="title function_">toCompanyDTO</span><span class="params">(CompanyDO companyDO)</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需要添加<span class="doctag">@Named</span>，否则会与toCompanyDTO冲突。为什么？</span></span><br><span class="line"><span class="comment">     * 加入另一个Mapper引用了当前mapper，转换时遇到了需要将CompanyDO转换为CompanyDTO,</span></span><br><span class="line"><span class="comment">     * 那么将出现歧义，这时就需要通过<span class="doctag">@Named</span>将其区分，然后调用Mapping时通过qualifiedByName指定具体调用。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Named(&quot;customToCompanyDTO&quot;)</span></span><br><span class="line">    <span class="keyword">default</span> CompanyDTO <span class="title function_">customToCompanyDTO</span><span class="params">(CompanyDO companyDO)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (companyDO == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">CompanyDTO</span> <span class="variable">companyDTO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CompanyDTO</span>();</span><br><span class="line">        companyDTO.setEncodeComId(EncryptUtil.encrypt(companyDO.getComId()));</span><br><span class="line">        companyDTO.setComShowName(<span class="string">&quot;公司名：&quot;</span> + companyDO.getComName());</span><br><span class="line">        companyDTO.setAddress(companyDO.getAddress());</span><br><span class="line">        companyDTO.setCompanyLevel(CompanyLevel.determineByValue(companyDO.getLevel()));</span><br><span class="line">        companyDTO.setStatus(companyDO.getStatus());</span><br><span class="line">        <span class="keyword">return</span> companyDTO;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="返回值类型存在继承关系"><a href="#返回值类型存在继承关系" class="headerlink" title="返回值类型存在继承关系"></a>返回值类型存在继承关系</h5><p>譬如有两个返回类型B，C，都继承于类型A，那么如果在同一个Mapper中定义返回值类型为A，那么会出现歧义，我们实际需要B还是C？</p>
<p>这时候可以通过<code>@BeanMapping.resultType</code>来加以区分。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper( uses = MyFactory.class )</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyMapper</span> &#123;</span><br><span class="line">    <span class="meta">@BeanMapping( resultType = B.class )</span></span><br><span class="line">    A <span class="title function_">map</span><span class="params">( Source source )</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> B <span class="title function_">createB</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> C <span class="title function_">createC</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">C</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="将多个不同类型Bean合并为一个其他类型的Bean"><a href="#将多个不同类型Bean合并为一个其他类型的Bean" class="headerlink" title="将多个不同类型Bean合并为一个其他类型的Bean"></a>将多个不同类型Bean合并为一个其他类型的Bean</h4><p>@Mapping注解中，source以及target均可以通过”obj.field”的方式指代深层的成员字段。通过这种方式，可以指定多个源类型中的部分字段，来合并成一个新的类型对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CompanyDTO</span> <span class="keyword">extends</span> <span class="title class_">BaseDTO</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String encodeComId;</span><br><span class="line">    <span class="keyword">private</span> String comShowName;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> CompanyLevel companyLevel;</span><br><span class="line">    <span class="keyword">private</span> Short status;</span><br><span class="line">    <span class="keyword">private</span> Integer deleteFlag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exhibits</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String exhibitsName;</span><br><span class="line">    <span class="keyword">private</span> String producerName;</span><br><span class="line">    <span class="keyword">private</span> CompanyDTO producerDetail;</span><br><span class="line">    <span class="keyword">private</span> String authorName;</span><br><span class="line">    <span class="keyword">private</span> CompanyEmployee authorDetail;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CompanyEmployee</span> <span class="keyword">extends</span> <span class="title class_">EmployeeDO</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String departmentName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeDO</span> <span class="keyword">extends</span> <span class="title class_">BaseDO</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String empNo;</span><br><span class="line">    <span class="keyword">private</span> String empName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ExhibitsTransformer</span> &#123;</span><br><span class="line">    <span class="meta">@Mapping(source = &quot;exhibitsName&quot;, target = &quot;exhibitsName&quot;)</span></span><br><span class="line">    <span class="meta">@Mapping(source = &quot;companyDTO.comShowName&quot;, target = &quot;producerName&quot;)</span></span><br><span class="line">    <span class="meta">@Mapping(source = &quot;companyDTO&quot;, target = &quot;producerDetail&quot;)</span></span><br><span class="line">    <span class="meta">@Mapping(source = &quot;companyEmployee.empName&quot;, target = &quot;authorName&quot;)</span></span><br><span class="line">    <span class="meta">@Mapping(source = &quot;companyEmployee&quot;, target = &quot;authorDetail&quot;)</span></span><br><span class="line">    Exhibits <span class="title function_">buildExhibits</span><span class="params">(String exhibitsName, CompanyDTO companyDTO, CompanyEmployee companyEmployee)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="通过一个Bean更新另一个Bean的内容"><a href="#通过一个Bean更新另一个Bean的内容" class="headerlink" title="通过一个Bean更新另一个Bean的内容"></a>通过一个Bean更新另一个Bean的内容</h4><p>这里会用到一个<code>@MappingTarget</code>，指向需要被更新的Bean类型。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapping(source = &quot;companyDTO.comShowName&quot;, target = &quot;producerName&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">updateProducerInfo</span><span class="params">(<span class="meta">@MappingTarget</span> Exhibits exhibits, CompanyDTO companyDTO)</span>;</span><br></pre></td></tr></table></figure>

<p>这里也可以返回Exhibits类型，可以配合其他映射方法实现链式转换。</p>
<h4 id="调用其他映射器"><a href="#调用其他映射器" class="headerlink" title="调用其他映射器"></a>调用其他映射器</h4><p>可以通过<code>@Mapper(use=AnotherTransformer.class)</code>来将另一个Mapper引入到当前Mapper来，这样做的好处是，其他Mapper写的类型转换可以实现复用。比如，其他Mapper定义了一个Date到String的类型转换，我这个Mapper中涉及到的Date到String也需要如此转换，那么就可以直接把对应的Mapper引入进来即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateMapper</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">asString</span><span class="params">(Date date)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> date != <span class="literal">null</span> ? <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>( <span class="string">&quot;yyyy-MM-dd&quot;</span> ).format( date ) : <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>引入DateMapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper(uses=DateMapper.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CarMapper</span> &#123;</span><br><span class="line">    CarDto <span class="title function_">carToCarDto</span><span class="params">(Car car)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="映射Map类型"><a href="#映射Map类型" class="headerlink" title="映射Map类型"></a>映射Map类型</h4><p>有时会涉及到Map之间的相互转换，譬如Map&lt;String, String&gt;转换为Map&lt;Long, Date&gt;，可以使用<code>@MapMapping</code>注解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MapMapping(valueDateFormat = &quot;yyyy-MM-dd&quot;)</span></span><br><span class="line">Map&lt;Long, Date&gt; <span class="title function_">stringStringMapToLongDateMap</span><span class="params">(Map&lt;String, String&gt; sourceMap)</span>;</span><br></pre></td></tr></table></figure>

<h4 id="映射枚举类型"><a href="#映射枚举类型" class="headerlink" title="映射枚举类型"></a>映射枚举类型</h4><p>可以使用MapStruct将一种枚举类型映射为另一种枚举类型。默认情况是根据枚举常量名进行映射，如果需要自定义，可以使用下面的方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderMapper</span> &#123;</span><br><span class="line">    <span class="meta">@ValueMappings(&#123;</span></span><br><span class="line"><span class="meta">        @ValueMapping(source = &quot;EXTRA&quot;, target = &quot;SPECIAL&quot;),</span></span><br><span class="line"><span class="meta">        @ValueMapping(source = &quot;STANDARD&quot;, target = &quot;DEFAULT&quot;),</span></span><br><span class="line"><span class="meta">        @ValueMapping(source = &quot;NORMAL&quot;, target = &quot;DEFAULT&quot;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    ExternalOrderType <span class="title function_">orderTypeToExternalOrderType</span><span class="params">(OrderType orderType)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如上会将<code>OrderType.EXTRA</code>映射到<code>ExternalOrderType.SPECIAL</code>。</p>
<h4 id="高级配置项"><a href="#高级配置项" class="headerlink" title="高级配置项"></a>高级配置项</h4><h5 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h5><p>使用<code>@Mapping</code>注解中的<code>defaultValue</code>参数，可以配置映射项的默认值，如果源值为null，那么就会取这个defaultValue的值作为目标值。</p>
<p>如果目标字段是一个新的字段，只需要给上默认常量呢？可以使用<code>constant</code>参数即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapping(target = &quot;longProperty&quot;, source = &quot;longProp&quot;, defaultValue = &quot;-1&quot;)</span></span><br><span class="line"><span class="meta">@Mapping(target = &quot;dateConstant&quot;, dateFormat = &quot;dd-MM-yyyy&quot;, constant = &quot;09-01-2014&quot;)</span></span><br></pre></td></tr></table></figure>

<h5 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h5><p>常见的如日期格式化，MapStruct提供了<code>Mapping.dateFormat</code>，也可以自定义其他的format方式。</p>
<p>一种方式是单独写一个工具类，添加方法并引入当前Mapper中（见“调用其他映射器”章节DateMapper使用），我们也可以直接在<code>@Mapping</code>中定义特定的表达式，譬如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SourceTargetMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Mapping(target = &quot;timeAndFormat&quot;,</span></span><br><span class="line"><span class="meta">         expression = &quot;java(new org.sample.TimeAndFormat(s.getTime(), s.getFormat()))&quot;)</span></span><br><span class="line">    Target <span class="title function_">sourceToTarget</span><span class="params">(Source s)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配合<code>@imports</code>注解，在使用表达式时，可以不使用全限定名称。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">imports org.sample.TimeAndFormat;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper( imports = TimeAndFormat.class )</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SourceTargetMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Mapping(target = &quot;timeAndFormat&quot;,</span></span><br><span class="line"><span class="meta">         expression = &quot;java( new TimeAndFormat( s.getTime(), s.getFormat() ) )&quot;)</span></span><br><span class="line">    Target <span class="title function_">sourceToTarget</span><span class="params">(Source s)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>该文例举了MapStruct的配置方式，以及一些最为常见的用法，还有很多其他高级功能没有提及，具体请看官方文档：<a href="https://mapstruct.org/documentation/stable/reference/html">MapStruct 1.4.2.Final Reference Guide</a></p>
]]></content>
      <categories>
        <category>后端</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>MapStruct</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven小记</title>
    <url>/2022/04/02/Maven%E5%B0%8F%E8%AE%B0/</url>
    <content><![CDATA[<blockquote>
<p>使用maven也很久了，都知道可以用来compile source code，package jar等，但是一直没有去深究过它到底如何做的，命令行一大堆信息，调用了各个插件，原理是个啥？今天有空，于是探究了一下。</p>
</blockquote>
<h3 id="What-is-Maven"><a href="#What-is-Maven" class="headerlink" title="What is Maven"></a>What is Maven</h3><p>说白了，<strong>maven就是一个插件执行框架</strong>，maven的所有动作，都是在调用各种plugin的功能。我们使用maven，去调用各种插件，就是为了去使我们的项目构建、测试、编译、打包等等步骤变得更加高效。</p>
<h4 id="Lifecycle"><a href="#Lifecycle" class="headerlink" title="Lifecycle"></a>Lifecycle</h4><p>maven将我们对project的构建划分为多个Lifecycle，也就是项目的生命周期。</p>
<p>Lifecycle包含<code>clean</code>，<code>default</code>以及<code>site</code>。我们一般开发项目最常用的就是clean和default了，一般都是先clean，清除所有编译后的内容以及包，然后执行编译、打包等，而这些就在default生命周期中。</p>
<p><code>default</code>是最重要的生命周期，项目在这个生命周期里，会被校验、编译、打包、测试、安装等等。具体见官网对<a href="https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html#default-lifecycle">Default Lifecycle</a>的描述。</p>
<h4 id="Phase"><a href="#Phase" class="headerlink" title="Phase"></a>Phase</h4><p>每个Lifecycle拥有多个Phase（阶段），也就是上面提到的构建、测试、编译等等。</p>
<p>默认的Lifecycle（生命周期）包含了以下Phase（阶段）</p>
<ul>
<li><code>validate</code>- 验证项目是否正确并且所有必要的信息都可用 </li>
<li><code>compile</code>- 编译项目的源代码 </li>
<li><code>test</code>- 使用合适的单元测试框架测试编译的源代码。  这些测试不应该要求打包或部署代码 </li>
<li><code>package</code>- 获取已编译的代码并将其打包成可分发的格式，例如 JAR。 </li>
<li><code>verify</code>- 对集成测试的结果进行任何检查，以确保满足质量标准 </li>
<li><code>install</code>- 将包安装到本地存储库中，作为本地其他项目的依赖项 </li>
<li><code>deploy</code>- 在构建环境中完成，将最终包复制到远程存储库以与其他开发人员和项目共享。</li>
</ul>
<p>也就对应了IDEA maven插件中的Lifecycle下拉框：</p>
<p><img src="https://s2.loli.net/2022/03/26/1IErxTc5vV3JA4Y.png" alt="image-20220326150053626"></p>
<p>当然，这些是最常用的，还有更加细化的阶段，在maven源码中，可以参考<code>org.apache.maven.plugins.annotations.LifecyclePhase</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.maven.plugins.annotations;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">LifecyclePhase</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// default lifecycle</span></span><br><span class="line">    VALIDATE( <span class="string">&quot;validate&quot;</span> ),</span><br><span class="line">    INITIALIZE( <span class="string">&quot;initialize&quot;</span> ),</span><br><span class="line">    GENERATE_SOURCES( <span class="string">&quot;generate-sources&quot;</span> ),</span><br><span class="line">    PROCESS_SOURCES( <span class="string">&quot;process-sources&quot;</span> ),</span><br><span class="line">    GENERATE_RESOURCES( <span class="string">&quot;generate-resources&quot;</span> ),</span><br><span class="line">    PROCESS_RESOURCES( <span class="string">&quot;process-resources&quot;</span> ),</span><br><span class="line">    COMPILE( <span class="string">&quot;compile&quot;</span> ),</span><br><span class="line">    PROCESS_CLASSES( <span class="string">&quot;process-classes&quot;</span> ),</span><br><span class="line">    GENERATE_TEST_SOURCES( <span class="string">&quot;generate-test-sources&quot;</span> ),</span><br><span class="line">    PROCESS_TEST_SOURCES( <span class="string">&quot;process-test-sources&quot;</span> ),</span><br><span class="line">    GENERATE_TEST_RESOURCES( <span class="string">&quot;generate-test-resources&quot;</span> ),</span><br><span class="line">    PROCESS_TEST_RESOURCES( <span class="string">&quot;process-test-resources&quot;</span> ),</span><br><span class="line">    TEST_COMPILE( <span class="string">&quot;test-compile&quot;</span> ),</span><br><span class="line">    PROCESS_TEST_CLASSES( <span class="string">&quot;process-test-classes&quot;</span> ),</span><br><span class="line">    TEST( <span class="string">&quot;test&quot;</span> ),</span><br><span class="line">    PREPARE_PACKAGE( <span class="string">&quot;prepare-package&quot;</span> ),</span><br><span class="line">    PACKAGE( <span class="string">&quot;package&quot;</span> ),</span><br><span class="line">    PRE_INTEGRATION_TEST( <span class="string">&quot;pre-integration-test&quot;</span> ),</span><br><span class="line">    INTEGRATION_TEST( <span class="string">&quot;integration-test&quot;</span> ),</span><br><span class="line">    POST_INTEGRATION_TEST( <span class="string">&quot;post-integration-test&quot;</span> ),</span><br><span class="line">    VERIFY( <span class="string">&quot;verify&quot;</span> ),</span><br><span class="line">    INSTALL( <span class="string">&quot;install&quot;</span> ),</span><br><span class="line">    DEPLOY( <span class="string">&quot;deploy&quot;</span> ),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// clean lifecycle</span></span><br><span class="line">    PRE_CLEAN( <span class="string">&quot;pre-clean&quot;</span> ),</span><br><span class="line">    CLEAN( <span class="string">&quot;clean&quot;</span> ),</span><br><span class="line">    POST_CLEAN( <span class="string">&quot;post-clean&quot;</span> ),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// site lifecycle</span></span><br><span class="line">    PRE_SITE( <span class="string">&quot;pre-site&quot;</span> ),</span><br><span class="line">    SITE( <span class="string">&quot;site&quot;</span> ),</span><br><span class="line">    POST_SITE( <span class="string">&quot;post-site&quot;</span> ),</span><br><span class="line">    SITE_DEPLOY( <span class="string">&quot;site-deploy&quot;</span> ),</span><br><span class="line"></span><br><span class="line">    NONE( <span class="string">&quot;&quot;</span> );</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以针对生命周期的每一个阶段，利用plugin的方式干涉或新建项目build的具体行为。</p>
<h4 id="goal"><a href="#goal" class="headerlink" title="goal"></a>goal</h4><p>各个生命周期中，我们都需要完成一些任务，比如compile阶段，需要将java源码编译为class文件，package阶段需要将所有编译完成的内容整合为jar或者war等artifact（阶段性成果）。 而这样的具体行为，在maven中叫做goal，也就是<strong>目标</strong>，指我们需要在某个阶段完成一件什么样的事情。</p>
<h4 id="plugins"><a href="#plugins" class="headerlink" title="plugins"></a>plugins</h4><p>前面已经熟悉了Lifecycle、Phase、goal，知道了maven是如何将项目的构建进行抽象的。光有抽象是没办法完成具体事情的，maven为我们提供了plugin相关接口，我们可以实现这些接口，对其各个阶段的抽象进行具体的实现，去完成各种目标。</p>
<p>调用插件的方式有两种</p>
<h5 id="命令行调用plugin"><a href="#命令行调用plugin" class="headerlink" title="命令行调用plugin"></a>命令行调用plugin</h5><p>执行<code>mvn groupId:artifactId:version:goal</code></p>
<p>可能有点冗长，有以下方式可以进行简化：</p>
<ul>
<li><p>如果需要运行本地仓库中某插件的最新版本，则可以省略版本号，命令可以简化为：</p>
<p><code>mvn groupId:artifactId:goal</code></p>
</li>
<li><p>如果插件命名规范，比如<code>$&#123;prefix&#125;-maven-plugin</code>格式，亦或者官方的<code>maven-$&#123;prefix&#125;-plugin</code>，则可以直接写成：</p>
<p><code>mvn $&#123;prefix&#125;:goal</code>，比如<code>mvn spring-boot:repackage</code>。</p>
</li>
<li><p>在maven-plugin项目的pom中指定前缀，需要用到<code>maven-plugin-plugin</code>插件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            ...</span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-plugin-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    ...</span><br><span class="line">                    <span class="tag">&lt;<span class="name">goalPrefix</span>&gt;</span>my-prefix<span class="tag">&lt;/<span class="name">goalPrefix</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>重新install插件后，即可通过<code>mvn my-prefix:goal</code>来进行调用。</p>
</li>
</ul>
<h5 id="通过phase调用插件"><a href="#通过phase调用插件" class="headerlink" title="通过phase调用插件"></a>通过phase调用插件</h5><p>pom中定义goal以及phase，然后执行所在的phase，如：<code>mvn compile</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 因为这个插件配置defaultPhase = LifecyclePhase.COMPILE，所以可以不用指明phase --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;phase&gt;compile&lt;/phase&gt;--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>hello-plugin<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="配置三方插件组"><a href="#配置三方插件组" class="headerlink" title="配置三方插件组"></a>配置三方插件组</h5><p>在执行<code>mvn groupId:artifactId:goal</code>时，如果不指定<code>groupId</code>，那么maven默认会去<code>org.apache.maven.plugins</code>还有本地查找插件，但是第三方插件可能会遇到查找不到的情况。可以通过以下方式添加自定义的groupId来方便查找，不用每次都定义第三方groupId：</p>
<p>用户层：<code>$&#123;user.home&#125;/.m2/settings.xml</code>，全局：<code>$&#123;maven.home&#125;/conf/settings.xml</code>中添加：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">pluginGroups</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginGroup</span>&gt;</span>org.codehaus.modello<span class="tag">&lt;/<span class="name">pluginGroup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">pluginGroups</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="packaging"><a href="#packaging" class="headerlink" title="packaging"></a>packaging</h4><p>也就是<code>pom.xml</code>中<code>&lt;packaging&gt;</code>标签，的表示当前project的成品打包格式。包括: <code>pom</code>, <code>jar</code>, <code>maven-plugin</code>, <code>ejb</code>, <code>war</code>, <code>ear</code>, <code>rar</code>。默认为<code>jar</code>。</p>
<p>maven生命周期根据<code>packaging</code>配置项的不同，有自己默认的一些plugins以及goals。比如当前project的packaging为<code>jar</code>时，其包含的default生命周期中将会有以下phase，及其需要实现的goal。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">component</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">role</span>&gt;</span>org.apache.maven.lifecycle.mapping.LifecycleMapping<span class="tag">&lt;/<span class="name">role</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">role-hint</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">role-hint</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">implementation</span>&gt;</span>org.apache.maven.lifecycle.mapping.DefaultLifecycleMapping<span class="tag">&lt;/<span class="name">implementation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lifecycles</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">lifecycle</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span>&gt;</span>default<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- START SNIPPET: jar-lifecycle --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">phases</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">process-resources</span>&gt;</span></span><br><span class="line">                        org.apache.maven.plugins:maven-resources-plugin:2.6:resources</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">process-resources</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">compile</span>&gt;</span></span><br><span class="line">                        org.apache.maven.plugins:maven-compiler-plugin:3.1:compile</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">compile</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">process-test-resources</span>&gt;</span></span><br><span class="line">                        org.apache.maven.plugins:maven-resources-plugin:2.6:testResources</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">process-test-resources</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">test-compile</span>&gt;</span></span><br><span class="line">                        org.apache.maven.plugins:maven-compiler-plugin:3.1:testCompile</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">test-compile</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">test</span>&gt;</span></span><br><span class="line">                        org.apache.maven.plugins:maven-surefire-plugin:2.12.4:test</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">package</span>&gt;</span></span><br><span class="line">                        org.apache.maven.plugins:maven-jar-plugin:2.4:jar</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">install</span>&gt;</span></span><br><span class="line">                        org.apache.maven.plugins:maven-install-plugin:2.4:install</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">install</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">deploy</span>&gt;</span></span><br><span class="line">                        org.apache.maven.plugins:maven-deploy-plugin:2.7:deploy</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">deploy</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">phases</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- END SNIPPET: jar-lifecycle --&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">lifecycle</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">lifecycles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个文件在maven-core的<code>META-INF/plexus/default-bindings.xml</code>中。</p>
<p>当然，自己定义的插件并不会自动执行，因为没有对应的<code>default-bindings.xml</code>，能否定义自己的<code>default-bindings.xml</code>以及自己的<code>packaging</code>类型？这个暂时还没研究。</p>
<h4 id="mvn-command"><a href="#mvn-command" class="headerlink" title="mvn command"></a>mvn command</h4><p>常用的mvn命令，具体格式为<code>mvn [options] [&lt;goal(s)&gt;] [&lt;phase(s)&gt;]</code>，入参必须有一个goal或者是phase。</p>
<p>如果是goal的话，则会直接执行目标goal，而如果是phase，则会依次执行该phase所属生命周期中的前置phase，比如关于packaging描述中，如果当前project为jar，则package前置phase是test，如果执行<code>mvn package</code>则会自动先执行<code>mvn test</code>。</p>
<p><img src="https://s2.loli.net/2022/03/27/t2ExXa7z85SsnGY.png" alt="image-20220327164512806"></p>
<h3 id="Maven-Plugin-Development"><a href="#Maven-Plugin-Development" class="headerlink" title="Maven Plugin Development"></a>Maven Plugin Development</h3><h4 id="依赖引入"><a href="#依赖引入" class="headerlink" title="依赖引入"></a>依赖引入</h4><p>新建项目，<strong>packaging必须配置为maven-plugin</strong>，并引入相关依赖。</p>
<p><strong>注意自己开发的插件的命名格式，需要<code>[自己插件的名字]-maven-plugin</code>，不能叫做<code>maven-xxx-plugin</code>，这是官方插件的格式，有版权的。</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>maven-plugin<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hello-maven-plugin Maven Mojo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-plugin-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugin-tools<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-plugin-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mojo( name = &quot;&lt;goal-name&gt;&quot;,</span></span><br><span class="line"><span class="meta">       aggregator = &lt;false|true&gt;, </span></span><br><span class="line"><span class="meta">       configurator = &quot;&lt;role hint&gt;&quot;,</span></span><br><span class="line"><span class="meta">       // 执行策略</span></span><br><span class="line"><span class="meta">       executionStrategy = &quot;&lt;once-per-session|always&gt;&quot;,</span></span><br><span class="line"><span class="meta">       inheritByDefault = &lt;true|false&gt;,</span></span><br><span class="line"><span class="meta">       // 实例化策略</span></span><br><span class="line"><span class="meta">       instantiationStrategy = InstantiationStrategy.&lt;strategy&gt;,</span></span><br><span class="line"><span class="meta">       // 如果用户没有在POM中明确设置此Mojo绑定到的phase，那么绑定一个MojoExecution到那个phase</span></span><br><span class="line"><span class="meta">       defaultPhase = LifecyclePhase.&lt;phase&gt;,</span></span><br><span class="line"><span class="meta">       requiresDependencyResolution = ResolutionScope.&lt;scope&gt;,</span></span><br><span class="line"><span class="meta">       requiresDependencyCollection = ResolutionScope.&lt;scope&gt;,</span></span><br><span class="line"><span class="meta">       // 提示此Mojo需要被直接调用（而非绑定到生命周期阶段）</span></span><br><span class="line"><span class="meta">       requiresDirectInvocation = &lt;false|true&gt;,</span></span><br><span class="line"><span class="meta">       // 提示此Mojo不能在离线模式下运行</span></span><br><span class="line"><span class="meta">       requiresOnline = &lt;false|true&gt;,</span></span><br><span class="line"><span class="meta">       // 提示此Mojo必须在一个Maven项目内运行</span></span><br><span class="line"><span class="meta">       requiresProject = &lt;true|false&gt;,</span></span><br><span class="line"><span class="meta">       // 提示此Mojo是否线程安全，线程安全的Mojo支持在并行构建中被并发的调用</span></span><br><span class="line"><span class="meta">       threadSafe = &lt;false|true&gt; )</span> <span class="comment">// (since Maven 3.0)</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 何时执行此Mojo</span></span><br><span class="line"><span class="meta">@Execute( goal = &quot;&lt;goal-name&gt;&quot;,           // 如果提供goal，则隔离执行此Mojo</span></span><br><span class="line"><span class="meta">          phase = LifecyclePhase.&lt;phase&gt;, // 在此生命周期阶段自动执行此Mojo</span></span><br><span class="line"><span class="meta">          lifecycle = &quot;&lt;lifecycle-id&gt;&quot; )</span>  <span class="comment">// 在此生命周期中执行此Mojo</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMojo</span></span><br><span class="line">    <span class="keyword">extends</span> <span class="title class_">AbstractMojo</span></span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Parameter( name = &quot;parameter&quot;,</span></span><br><span class="line"><span class="meta">                // 在POM中可使用别名来配置参数</span></span><br><span class="line"><span class="meta">                alias = &quot;myAlias&quot;,</span></span><br><span class="line"><span class="meta">                property = &quot;a.property&quot;,</span></span><br><span class="line"><span class="meta">                defaultValue = &quot;an expression, possibly with $&#123;variables&#125;&quot;,</span></span><br><span class="line"><span class="meta">                readonly = &lt;false|true&gt;,</span></span><br><span class="line"><span class="meta">                required = &lt;false|true&gt; )</span></span><br><span class="line">    <span class="keyword">private</span> String parameter;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Component( role = MyComponentExtension.class,</span></span><br><span class="line"><span class="meta">                hint = &quot;...&quot; )</span></span><br><span class="line">    <span class="keyword">private</span> MyComponent component;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Parameter( defaultValue = &quot;$&#123;session&#125;&quot;, readonly = true )</span></span><br><span class="line">    <span class="keyword">private</span> MavenSession session;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Parameter( defaultValue = &quot;$&#123;project&#125;&quot;, readonly = true )</span></span><br><span class="line">    <span class="keyword">private</span> MavenProject project;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Parameter( defaultValue = &quot;$&#123;mojoExecution&#125;&quot;, readonly = true )</span></span><br><span class="line">    <span class="keyword">private</span> MojoExecution mojo;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Parameter( defaultValue = &quot;$&#123;plugin&#125;&quot;, readonly = true )</span></span><br><span class="line">    <span class="keyword">private</span> PluginDescriptor plugin;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Parameter( defaultValue = &quot;$&#123;settings&#125;&quot;, readonly = true )</span></span><br><span class="line">    <span class="keyword">private</span> Settings settings;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Parameter( defaultValue = &quot;$&#123;project.basedir&#125;&quot;, readonly = true )</span></span><br><span class="line">    <span class="keyword">private</span> File basedir;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Parameter( defaultValue = &quot;$&#123;project.build.directory&#125;&quot;, readonly = true )</span></span><br><span class="line">    <span class="keyword">private</span> File target;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>maven预置变量：<a href="https://web.archive.org/web/20150520200505/https://docs.codehaus.org/display/MAVENUSER/MavenPropertiesGuide">https://web.archive.org/web/20150520200505/https://docs.codehaus.org/display/MAVENUSER/MavenPropertiesGuide</a></p>
<h4 id="远程调试"><a href="#远程调试" class="headerlink" title="远程调试"></a>远程调试</h4><p>业务项目调用maven plugin时，不要使用mvn，而是使用mvndebug命令，会自动起8000端口用于调试。</p>
<p>plugin项目，新建remote jvm debug，并连接8000端口即可。可以提前在需要调试的地方打上断点。</p>
<p><img src="https://s2.loli.net/2022/03/27/1WGDOK6BSYdFVvy.png" alt="image-20220327165621138"></p>
<p><img src="https://s2.loli.net/2022/03/27/FRnIVpNbec2KxO3.png" alt="image-20220327165639099"></p>
]]></content>
      <categories>
        <category>后端</category>
        <category>maven</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>SVN之分支合并(left,right,working)</title>
    <url>/2019/07/18/SVN%E4%B9%8B%E5%88%86%E6%94%AF%E5%90%88%E5%B9%B6/</url>
    <content><![CDATA[<p>昨天在合并分支时遇到了这样一个问题：</p>
<p>我需要将一个开发分支51合并到主干分支trunk，在合并时出现了冲突，如下图：</p>
<p><img src="/SVN%E4%B9%8B%E5%88%86%E6%94%AF%E5%90%88%E5%B9%B6/1563411906336.png" alt="1563411906336"></p>
<p>当然，第一个文件（修订号为417975）是目前trunk下的最新版本号。第三个文件（修订号为417985）是目前dev51分支下的修订版本。到这里都好理解，但却出现了left版本（修订号为417812），修订号早于这两个版本，这是什么原理(⊙ˍ⊙)？</p>
<span id="more"></span>

<hr>
<p>在朋友（这里手动感谢宝哥😄）的帮助下找到了这篇issue，<a href="https://stackoverflow.com/questions/7679113/differences-between-svn-merge-left-right-working-files-after-conflicts">https://stackoverflow.com/questions/7679113/differences-between-svn-merge-left-right-working-files-after-conflicts</a></p>
<p>在这个问题中，题主也遇到了类似的问题</p>
<p><img src="/SVN%E4%B9%8B%E5%88%86%E6%94%AF%E5%90%88%E5%B9%B6/1563412342110.png" alt="1563412342110"></p>
<p>下面有一个解答非常好，这里先直接可耻的CV下来😄，然后再做理解性概括。</p>
<p>Let’s say there are two branches, and last (HEAD) revision in branch A is 9, while it is 6 in branch B.</p>
<p>When <code>cd B; svn merge -r 5:8 ^/braches/A</code> is ran, svn will try to apply delta between <code>5</code> and <code>8</code> from branch A on top of branch B.</p>
<p>(In other words, changesets 7 and 8 will be applied to B)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">common</span><br><span class="line">ancestor      left     right</span><br><span class="line">(1)━━┱───(3)──(5)──(7)──(8)──(9)  # branch A</span><br><span class="line">     ┃         └┄┄┄┄┬┄┄┄┄┘</span><br><span class="line">     ┃              ↓</span><br><span class="line">     ┗━(2)━━(4)━━(6)              # branch B</span><br><span class="line">               working</span><br></pre></td></tr></table></figure>

<p>If the delta applies cleanly, it’s all good.</p>
<p>Let’s say some lines were modified in changeset 3, and same source lines were modified differently in changeset 4.</p>
<p>If delta (5→8) doesn’t touch those lines, all is still good.</p>
<p>If delta (5→8) also modified what 3 and 4 did, changes cannot be merged automatically, and svn leaves a file in conflict state:</p>
<ul>
<li>file — file with (working,left,right) delimited</li>
<li>file.working — state of file in branch B@6</li>
<li>file.merge-left — state of file in branch A@5</li>
<li>file.merge-right — state of file in branch A@8</li>
</ul>
<p>If you edit such a file manually, you have a few choices — keep “working” (your version), keep “right” (their version; the other branch version) or merge the changes manually.</p>
<p>“Left” is not useful in itself, there’s no point to keep “left” (their old version) in the file.</p>
<p>It is, however, useful for tools. “left→right” is the changeset.</p>
<p>When you see, for example:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; .working</span><br><span class="line">foo = 13</span><br><span class="line">||||||| .merge-left.r5</span><br><span class="line">foo = &quot;13&quot;</span><br><span class="line">=======</span><br><span class="line">foo = &quot;42&quot;</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; .merge-right.r8</span><br></pre></td></tr></table></figure>

<p>It tells you that <code>&quot;13&quot;</code> was changed to <code>&quot;42&quot;</code> in branch A.</p>
<p>Branch B had <code>13</code> (integer, not a string).</p>
<p>Most likely, your manual merge choice will be to change <code>13</code> to <code>42</code> and keep it an integer.</p>
<p>另一个回答：</p>
<p>file.merge-left.r4521 is the latest change of this file in the left branch (i.e. the origin) <strong>before</strong> the right branch (the destination) were created.</p>
<p>In other words, merge-left.r4521 it’s the first version of the file to be merged</p>
<p>with merge-right.r5004 (the latest version of the destination branch)</p>
<p><strong>For example</strong>, say you want to merge branches Left and Right as below:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Left   1   2   f.3   4   f.5   6    7    f.9    11 </span><br><span class="line"></span><br><span class="line">Right                                  8    f.10    f.12   13</span><br><span class="line"></span><br><span class="line">Right is created in 8 ( is a copy of 7 )</span><br><span class="line">file &#x27;f&#x27; has been modified in 3, 5, 9, 10, 12</span><br><span class="line">The merge of file &#x27;f&#x27; will occur between 7 and 13 because</span><br><span class="line">7 is the latest version of file f in Left before Right was created</span><br><span class="line">13 is the latest version of Right</span><br></pre></td></tr></table></figure>

<hr>
<p>概括一下：</p>
<p>上面所说的branch B就可以看作我的trunk，branch A可以看作我的dev51分支。</p>
<p>cn_logo.png在417812版本进行了第一次修改，trunk可理解为在417975，也就是最新版本对这个文件也进行了修改。而目前的dev51版本的最新版本号为417985。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cn_logo.png━━┳━━━(?)━━━(417975)                         # trunk</span><br><span class="line">    left     ┃                    ↑</span><br><span class="line">  (417812)   ┃        ┌┄┄┄┄┄┄┄┄┄┄┄┴┄┄┄┄┄┄┄┄┄┄┐</span><br><span class="line">             ┗━ ━ ━ ━(?)━ ━ ━ ━ ━ ━ ━ ━(417985)  # branch dev51</span><br><span class="line">                                        right</span><br></pre></td></tr></table></figure>

<p>如上图所示，如果在开发分支的多个版本多次修改了一个文件，而主干分支也在某个版本修改了同一个文件的同一行，那么便会出现冲突。</p>
<p>那么，冲突发生时出现的left以及right分别对应哪个版本呢？</p>
<p>答案是，以创建分支时的主干版本作为left，以最后一次提交的分支版本作为right。及合并操作是发生在这两者之间。因为417812是dev51分支创建前的最后一个版本。</p>
]]></content>
      <categories>
        <category>SVN</category>
      </categories>
      <tags>
        <tag>版本控制</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring AOP 嵌套使用时内部方法注解失效问题</title>
    <url>/2018/12/03/Spring%20AOP%20%E5%B5%8C%E5%A5%97%E4%BD%BF%E7%94%A8%E6%97%B6%E5%86%85%E9%83%A8%E6%96%B9%E6%B3%95%E6%B3%A8%E8%A7%A3%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>排污权做登录日志时遇到的一个问题，<br>错误代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@LoginSuccessLog</span></span><br><span class="line"><span class="keyword">public</span> JSONObject <span class="title function_">login</span><span class="params">(JSONObject user)</span> &#123;</span><br><span class="line">    <span class="comment">/*......多余代码省略......*/</span></span><br><span class="line">    <span class="comment">//该处有问题</span></span><br><span class="line">    <span class="type">SysUser</span> <span class="variable">sysUser</span> <span class="operator">=</span> validate(loginCode, password);</span><br><span class="line">   <span class="comment">/*......多余代码省略......*/</span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@LoginErrorLog</span></span><br><span class="line"><span class="keyword">public</span> SysUser <span class="title function_">validate</span><span class="params">(String loginCode, String password)</span> &#123;</span><br><span class="line">    <span class="comment">/*......多余代码省略......*/</span></span><br><span class="line">    <span class="keyword">return</span> sysUser;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于三端登录时，校验用户名密码等信息与实际登录终端处于不同的步骤，所以我定义了两个切点分别指向的是实际登录方法与用户合法性校验的方法，采用的是注解的方式。<br>但由于企业端不属于三端登录，所以之前的代码结构是login()方法中嵌套了vaildate()方法，及以上代码块中的代码。<br>之后再测试时发现vaildate()方法的注解失效了。</p>
<span id="more"></span>

<p>查阅资料后得知，方法嵌套调用时是调用的当前对象而非代理对象，及实际调用方式为this.vaildate()，故不生效。</p>
<p>&#x3D;&#x3D;spring获取的bean都是其代理对象，而不是bean对象本身。嵌套方法中的内部方法都是对其bean对象本身的方法的调用，所以都不会被代理拦截。&#x3D;&#x3D;<br>如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">outerMethod</span><span class="params">()</span>&#123;</span><br><span class="line">    innerMethod();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@annotationExample</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">innerMethod</span><span class="params">()</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该innerMethod()方法是不会被AOP捕捉的。<br>所以解决问题的思路就很明了了：<br>一、生成新的代理对象（建立新类）<br>二、获取当前类的实际代理对象并进行调用<br>三、不使用SpringAOP提供的JDK或者Cglib的方式进行织入，改用AspectJ（编译期织入）  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AOP织入方式简介  </span><br><span class="line">织入方式共三种：</span><br><span class="line">1. 编译期织入  </span><br><span class="line">2. 类加载期织入  </span><br><span class="line">3. 运行期织入</span><br></pre></td></tr></table></figure>
<p>我们一般用的Spring AOP都属于运行期织入<br>Spring AOP会根据你是否是属于JDK标准的动态代理来决定是否采用CGlib的方式实现（及目标类是接口等抽象或是真实实现，如果是接口则属于标准的JDK动态代理实现，如果是实现类则采用Cglib生成子类并覆盖方法。）  </p>
<p>AspectJ则采用的是编译期织入，不属于动态代理，所以不受嵌套方法的影响  </p>
<hr>
<p>实际可行的解决方法有以下三种：  </p>
<ol>
<li>将vaildate()方法单独放到一个类中去（推荐）</li>
</ol>
<p>本来校验业务与登录业务就不应该耦合在一起，其实我觉得当初这种用户校验操作也可以用AOP的方式，登录就是登录，校验就是校验。不过时间问题就不重构了，修改后的代码如下：<br>LoginService.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;ETSLoginService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginService</span> &#123;</span><br><span class="line"><span class="comment">//注入校验类</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> LoginValidator loginValidator;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * [简述]：用户登陆</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@LoginSuccessLog</span></span><br><span class="line">    <span class="keyword">public</span> JSONObject <span class="title function_">login</span><span class="params">(JSONObject user)</span> &#123;</span><br><span class="line">	<span class="comment">/*......多余代码省略......*/</span></span><br><span class="line">	<span class="comment">//改为调用其他类的方式，来代替原有this.validate()的调用方式。</span></span><br><span class="line">        <span class="type">SysUser</span> <span class="variable">sysUser</span> <span class="operator">=</span> loginValidator.validate(loginCode, password);</span><br><span class="line">        <span class="comment">/*......多余代码省略......*/</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>LoginValidator.java</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class LoginValidator &#123;</span><br><span class="line">    @LoginErrorLog</span><br><span class="line">    public SysUser validate(String loginCode, String password) &#123;</span><br><span class="line">	/*......多余代码省略......*/</span><br><span class="line">        return sysUser;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>通过AopContext获得本类代理类对象</li>
</ol>
<p>将  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">SysUser</span> <span class="variable">sysUser</span> <span class="operator">=</span> validate(loginCode, password);  </span><br></pre></td></tr></table></figure>
<p>替换为  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">SysUser</span> <span class="variable">sysUser</span> <span class="operator">=</span> ((LoginService)AopContext.currentProxy()).validate(loginCode, password);  </span><br></pre></td></tr></table></figure>
<p>同时  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> <span class="attr">proxy-target-class</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>修改为</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> <span class="attr">proxy-target-class</span>=<span class="string">&quot;true&quot;</span> <span class="attr">expose-proxy</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>通过ApplicationContext对象的getBean()获取当前类的代理对象<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">((LoginService)applicationContext.getBean(<span class="string">&quot;loginService&quot;</span>)).validate(loginCode, password);</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>后端</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>AOP</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows下JVM高CPU占用分析</title>
    <url>/2021/09/06/Windows%E4%B8%8BJVM%E9%AB%98CPU%E5%8D%A0%E7%94%A8%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="Windows下JVM高CPU占用分析"><a href="#Windows下JVM高CPU占用分析" class="headerlink" title="Windows下JVM高CPU占用分析"></a>Windows下JVM高CPU占用分析</h1><p>线上Windows Server服务器出现卡顿情况，windows下不好用top命令，通过任务管理器查看，java.exe进程CPU占用长时间处于80%左右，严重消耗服务器资源。但进程是看不出具体是什么在占用CPU的，需要到线程维度分析。windows下查看线程不是很方便，需要下一个工具：<a href="https://docs.microsoft.com/en-us/sysinternals/downloads/process-explorer">ProcessExplorer</a>。</p>
<p>打开该软件，检查对应的java.exe进程，右键点击Properties，切换到Threads选项卡。</p>
<p><img src="https://i.loli.net/2021/08/31/StzO2W4NV6MYDTn.png" alt="image-20210831092827713"></p>
<p>可以看到该进程下所有的线程信息。TID即是线程号。</p>
<p>大致浏览发现，并非某个线程在占用CPU，而是很多线程分摊了系统CPU资源，所以不太可能是某个功能出现死循环之类的问题导致的。</p>
<p>随便找一个线程进一步分析，根据其所给的线程号，可以去查看对应的是什么功能在运行。这时需要我们导出当前的堆栈信息。</p>
<p>到对应java安装目录bin文件夹下，执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">jstack -l [java.exe的进程号] &gt; stack.log</span><br></pre></td></tr></table></figure>

<p>如果不清楚当前执行的java进程的进程号，也可以<code>jps</code>先看一下。</p>
<p><img src="https://i.loli.net/2021/08/31/S4HIPoxY6AtUhrw.png" alt="image-20210831093939393"></p>
<p>大概长这样，右边的是进程名称，看具体情况而定。</p>
<p>导出来后，内容大致如图：</p>
<p><img src="https://s2.loli.net/2022/04/16/MTEisavoJIB7kVY.png" alt="image-20220416161110239"></p>
<p>相关参数释义：</p>
<ul>
<li><p>“xxx”  </p>
<p>线程名称</p>
</li>
<li><p>prio</p>
<p>线程优先级</p>
</li>
<li><p>tid</p>
<p>即Thead ID，属于java级别的线程ID</p>
</li>
<li><p>nid</p>
<p>即Native Thead ID，该ID高度依赖于系统平台，windows中就是对应的windows线程号；linux中，就是线程的PID；MacOS中，对应的原生<code>pthread_t</code>的值</p>
</li>
</ul>
<p>堆栈信息导出来后，需要找到占用高的线程的堆栈，由于ProcessExplorer给的TID是十进制的，堆栈信息中的tid是十六进制的，需要转换一下，随便找个工具，比如windows自带的计算器：</p>
<p><img src="https://i.loli.net/2021/08/31/MBkQfdioEuLUsK7.png" alt="image-20210831101057064"></p>
<p>十进制(DEC)中，输入某个windows线程号，如<code>19844</code>，得到十六进制(HEX)下的<code>0x4D84</code>，在堆栈日志中查找这个值，</p>
<p><img src="https://i.loli.net/2021/08/31/BAPSTOq1GLkQlhd.png" alt="image-20210831101444530"></p>
<p>好像不是啥关键的进程，而且该进程是BLOCKED状态，不是RUNNABLE应该不会太消耗CPU，我们可以换一个线程再观察一下：<code>15628</code>对应<code>0x3d0c</code>。</p>
<p>是一个关于download的线程：</p>
<p><img src="https://i.loli.net/2021/08/31/ydEgOjJPcDmTbVp.png" alt="image-20210831102055708"></p>
<p>后面观察了几个，也是关于download的。为了更方便分析，找了个在线堆栈分析的站点：<a href="https://gceasy.io/">https://gceasy.io/</a></p>
<p><img src="https://i.loli.net/2021/08/31/uvwZkrG7PFalOVB.png" alt="image-20210831102334427"></p>
<p><img src="https://i.loli.net/2021/08/31/58ERB3fUniadhcK.png" alt="image-20210831102414574"></p>
<p>主要观察RUNNABLE的线程，只有在运行才会占用CPU。下面的Threads with identical stack trace也为我们清楚的列出了具有相同堆栈的线程。</p>
<p><img src="https://i.loli.net/2021/08/31/C5AadD9HMYUo3ch.png" alt="image-20210831102544740"></p>
<p>确实，大量关于download的线程正在执行中。</p>
<p>找到其对应的url，并分析相关日志。</p>
<p><img src="https://i.loli.net/2021/08/31/optzV14HKeQGYNg.png" alt="image-20210831102713483"></p>
<p>两三个小时内有六千多个下载请求，而实际上，当前软件的用户量根本不会出现这么多请求。仔细观察日志：</p>
<p><img src="https://i.loli.net/2021/08/31/JbmrDI2KTASEjYh.png" alt="image-20210831102859856"></p>
<p>全是Baiduspider，也就是百度爬虫！原来如此，被爬了。。。</p>
<p>找到了原因就好解决了，应用根目录下添加个robots.txt，并定义哪些url不能被爬就可以了，或者应用内定义Filter，识别请求类型，如果是爬虫则进行拦截。</p>
<p><strong>总结</strong></p>
<ol>
<li>多观察日志，可以更快速的定位问题。</li>
<li>还是尽量用工具去分析堆栈，纯文本看太慢了，不够直观。</li>
<li>还是尽量用linux把，windows下进程分析不太方便。</li>
</ol>
]]></content>
      <categories>
        <category>后端</category>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title>Windows下MySQL重置Root密码</title>
    <url>/2021/09/14/Windows%E4%B8%8BMySQL%E9%87%8D%E7%BD%AERoot%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<h4 id="停止mysql服务器"><a href="#停止mysql服务器" class="headerlink" title="停止mysql服务器"></a>停止mysql服务器</h4><p>关掉mysql进程</p>
<h4 id="配置不读取授权表启动"><a href="#配置不读取授权表启动" class="headerlink" title="配置不读取授权表启动"></a>配置不读取授权表启动</h4><p>cmd运行不要用powershell，使用<a href="https://dev.mysql.com/doc/refman/8.0/en/server-options.html#option_mysqld_skip-grant-tables"><code>--skip-grant-tables</code></a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqld --skip-grant-tables=OFF --shared-memory --console</span><br></pre></td></tr></table></figure>

<p>最好加上<code>--console</code>，把信息直接打到控制台，有报错的话能直接发现。之前直接启动会闪退，通过加上<code>--console</code>后发现需要配置<code>--shared-memory</code></p>
<h4 id="重新加载授权表"><a href="#重新加载授权表" class="headerlink" title="重新加载授权表"></a>重新加载授权表</h4><p>mysql客户端连接到服务器，并执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">host&gt; </span><span class="language-bash">mysql</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">FLUSH PRIVILEGES;</span></span><br></pre></td></tr></table></figure>

<h4 id="修改root账户密码"><a href="#修改root账户密码" class="headerlink" title="修改root账户密码"></a>修改root账户密码</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;MyNewPass&#x27;</span>;</span></span><br></pre></td></tr></table></figure>

<hr>
<p>期间出现一个问题：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ERROR 1396 (HY000): Operation ALTER USER failed for ‘root‘@‘localhost‘</span><br></pre></td></tr></table></figure>

<p>通过查询</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">use mysql;</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">select user,host from user;</span></span><br></pre></td></tr></table></figure>

<p>发现</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">+------------------+-----------+</span><br><span class="line">| user             | host      |</span><br><span class="line">+------------------+-----------+</span><br><span class="line">| root             | %         |</span><br><span class="line">| mysql.infoschema | localhost |</span><br><span class="line">| mysql.session    | localhost |</span><br><span class="line">| mysql.sys        | localhost |</span><br><span class="line">+------------------+-----------+</span><br></pre></td></tr></table></figure>

<p>尝试变更了下语句，执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;MyNewPass&#x27;</span>;</span></span><br></pre></td></tr></table></figure>

<p>成功。</p>
<p>重启服务器，尝试新的密码连接。</p>
<p>成功。</p>
]]></content>
      <categories>
        <category>后端</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows下的MySQL升级</title>
    <url>/2022/01/13/Windows%E4%B8%8B%E7%9A%84MySQL%E5%8D%87%E7%BA%A7/</url>
    <content><![CDATA[<p>关于将MySQL从5.x升级到8.0.16的过程记录。</p>
<h4 id="下载新的mysql"><a href="#下载新的mysql" class="headerlink" title="下载新的mysql"></a>下载新的mysql</h4><p><a href="https://downloads.mysql.com/archives/community/">https://downloads.mysql.com/archives/community/</a></p>
<p>下载后解压</p>
<h4 id="创建my-ini"><a href="#创建my-ini" class="headerlink" title="创建my.ini"></a>创建my.ini</h4><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">default_authentication_plugin</span>=mysql_native_password</span><br><span class="line"><span class="attr">log-bin-trust-function-creators</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">binlog_expire_logs_seconds</span> =<span class="number">604800</span></span><br><span class="line">innodb_file_per_table</span><br><span class="line"><span class="attr">innodb_flush_log_at_trx_commit</span> = <span class="number">2</span></span><br><span class="line"><span class="attr">lower_case_table_names</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">group_concat_max_len</span>=<span class="number">1</span>M</span><br><span class="line"><span class="attr">log_output</span>=table,file</span><br><span class="line"><span class="attr">long_query_time</span> = <span class="number">2</span></span><br><span class="line"><span class="attr">port</span>=<span class="number">3322</span></span><br><span class="line"><span class="comment"># set basedir to your installation path</span></span><br><span class="line"><span class="attr">basedir</span>=D:/xxx/mysql_new_13312</span><br><span class="line"><span class="comment"># set datadir to the location of your data directory</span></span><br><span class="line"><span class="attr">datadir</span>=D:/xxx/mysql_new_13312/data</span><br><span class="line"></span><br><span class="line"><span class="attr">character_set_server</span>=utf8mb4</span><br><span class="line"><span class="attr">default-storage-engine</span>=INNODB</span><br><span class="line"><span class="attr">explicit_defaults_for_timestamp</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">connect_timeout</span>=<span class="number">600</span></span><br><span class="line"><span class="attr">wait_timeout</span>=<span class="number">600</span></span><br><span class="line"><span class="attr">ft_min_word_len</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">innodb_ft_min_token_size</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">ngram_token_size</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">sql_mode</span>=</span><br><span class="line"><span class="section">[mysql]</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8mb4</span><br><span class="line"><span class="section">[client]</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8mb4</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">PS D:\xxx\mysql_new_13312\bin&gt; .\mysqld.exe --initialize --console</span><br><span class="line">2022-01-04T07:16:04.156544Z 0 [System] [MY-013169] [Server] D:\xxx\mysql_new_13312\bin\mysqld.exe (mysqld 8.0.16) initializing of server in progress as process 23960</span><br><span class="line">2022-01-04T07:16:05.332304Z 0 [Warning] [MY-010161] [Server] You need to use --log-bin to make --binlog-expire-logs-seconds work.</span><br><span class="line">2022-01-04T07:16:06.675688Z 5 [Note] [MY-010454] [Server] A temporary password is generated for root@localhost: )(Qg.huCD2fw</span><br><span class="line">2022-01-04T07:16:07.316226Z 0 [System] [MY-013170] [Server] D:\xxx\mysql_new_13312\bin\mysqld.exe (mysqld 8.0.16) initializing of server has completed</span><br><span class="line">PS D:\xxx\mysql_new_13312\bin&gt; .\mysqld.exe --log-bin --console</span><br><span class="line">2022-01-04T07:19:04.951572Z 0 [System] [MY-010116] [Server] D:\xxx\mysql_new_13312\bin\mysqld.exe (mysqld 8.0.16) starting as process 29224</span><br><span class="line">2022-01-04T07:19:06.490266Z 0 [Warning] [MY-010068] [Server] CA certificate ca.pem is self signed.</span><br><span class="line">2022-01-04T07:19:06.558095Z 0 [System] [MY-010931] [Server] D:\xxx\mysql_new_13312\bin\mysqld.exe: ready for connections. Version: &#x27;8.0.16&#x27;  socket: &#x27;&#x27;  port: 3322  MySQL Community Server - GPL.</span><br><span class="line">2022-01-04T07:19:06.626795Z 0 [System] [MY-011323] [Server] X Plugin ready for connections. Bind-address: &#x27;::&#x27; port: 33060</span><br></pre></td></tr></table></figure>

<h4 id="数据迁移"><a href="#数据迁移" class="headerlink" title="数据迁移"></a>数据迁移</h4><h5 id="导出数据"><a href="#导出数据" class="headerlink" title="导出数据"></a>导出数据</h5><p>备份原先5.x的数据，低版本mysql执行<code>mysqldump</code>，</p>
<p>如果是linux环境，则直接使用<code>mysqldump [options] &gt; dump.sql</code>即可。</p>
<p>如果是windows下，需要使用<code>--result_file</code>来指定输出文件，否则无法重新导入。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.\mysqldump.exe --opt -E -R -uroot -p db_name --result_file=backup_old_01.sql</span><br></pre></td></tr></table></figure>

<p>查阅官网得知，在 Windows 上使用 PowerShell 制作的带有输出的转储，重定向会创建一个具有 UTF-16 编码的文件，但是MySQL不允许将 UTF-16 作为连接字符集。</p>
<blockquote>
<p>查看<a href="https://dev.mysql.com/doc/refman/8.0/en/charset-connection.html#charset-connection-impermissible-client-charset">不允许的客户端字符集 </a></p>
</blockquote>
<p> 解决这个问题，可以使用<code>--result-file</code>选项，它以 ASCII 格式创建输出：         </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqldump [options] --result-file=dump.sql</span><br></pre></td></tr></table></figure>

<h4 id="导入高版本mysql"><a href="#导入高版本mysql" class="headerlink" title="导入高版本mysql"></a>导入高版本mysql</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE `db_name`</span><br><span class="line">    /*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci */ /*!80016 DEFAULT ENCRYPTION=&#x27;N&#x27; */</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; mysql.exe -P 3322 -uroot -p</span><br><span class="line">mysql&gt; use db_name</span><br><span class="line">mysql&gt; source D:/path/backup.sql</span><br></pre></td></tr></table></figure>

<p>如果需要的话，改下其他ip可以访问root</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; use mysql;</span><br><span class="line">mysql&gt; update user set host = &#x27;%&#x27; where user = &#x27;root&#x27;;</span><br><span class="line">mysql&gt; commit;</span><br><span class="line">mysql&gt; flush privileges;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis-binding模块与代理模式</title>
    <url>/2021/10/30/binding%E6%A8%A1%E5%9D%97%E4%B8%8E%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="MyBatis-binding模块与代理模式"><a href="#MyBatis-binding模块与代理模式" class="headerlink" title="MyBatis-binding模块与代理模式"></a>MyBatis-binding模块与代理模式</h1><p>Mybatis通过SqlSession来进行CRUD，其所调用的sql使用id标识存放在xml中，可以通过SqlSession提供的一些方法进行调用，其中一种是传入sql的id与所要使用的参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SqlSession</span> <span class="keyword">extends</span> <span class="title class_">Closeable</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">	&lt;E&gt; List&lt;E&gt; <span class="title function_">selectList</span><span class="params">(String statement, Object parameter)</span>;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但这样做有一个缺点，经常用ibatis的话，可能深有体会，如果statement填写错了，只能在运行时才能发现，对于开发来说难免会又写错的时候，总会浪费一些时间。</p>
<p>还有一种更加优雅的调用方式，先定义一个Mapper接口，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProductMapper</span> &#123;</span><br><span class="line">    List&lt;Product&gt; <span class="title function_">queryProduct</span><span class="params">(Long prodId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>建立一个Mapper.xml，接口名对应到Mapper.xml的namespace，接口的方法名对应到xml中的SQL id。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryProduct&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;productResultMap&quot;</span>&gt;</span></span><br><span class="line">    select xxx from t_product</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>调用getMapper获取ProductMapper对象，并调用queryProduct方法即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SqlSession</span> <span class="keyword">extends</span> <span class="title class_">Closeable</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">	&lt;T&gt; T <span class="title function_">getMapper</span><span class="params">(Class&lt;T&gt; type)</span>;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样，可以在mybatis启动时就进行检测，接口是否有对应的sql id存在，规避了运行时找不到对应sql的风险。</p>
<p>归根结底，getMapper接口最终还是调用的SqlSession下的各个select、update方法，只是mybatis将其包装了一下更加方便实用。但是具体是怎么实现的？</p>
<p><strong>主要思路</strong>：使用动态代理，增强Mapper接口中的所有方法。调用方法代理时获取在xml中定义的对应的sql语句，同时获取其方法类型，如<code>select</code>，<code>update</code>，<code>delete</code>等。最终分别调用<code>SqlSession#select</code>，<code>SqlSession#update</code>，<code>SqlSession#delete</code>等方法。</p>
<p> Mapper的绑定与获取主要由binding模块负责。</p>
<p><img src="https://i.loli.net/2021/06/23/dkGSLZHyOCBNsqx.png" alt="image-20210623201716653.png"></p>
<p>重要的四个类：</p>
<ul>
<li>MapperRegistry</li>
<li>MapperProxyFactory</li>
<li>MapperProxy</li>
<li>MapperMethod</li>
</ul>
<h2 id="MapperRegistry"><a href="#MapperRegistry" class="headerlink" title="MapperRegistry"></a>MapperRegistry</h2><p><img src="https://i.loli.net/2021/06/23/ktDrzYAsnZxGvP7.png" alt="image-20210623202055621"></p>
<p>该类注册了所有的Mapper接口以及其对应的被代理的方法。</p>
<p>所包含成员有：</p>
<p><strong>config</strong>：All-in-One 的Mybatis全局配置</p>
<p><strong>knowMappers</strong>：所有被加载的Mapper，key为Mapper的Class对象，Value为生产Mapper代理的工厂类<code>MapperProxyFactory</code>。</p>
<p>追踪SqlSession的getMapper方法发现，</p>
<p><img src="https://i.loli.net/2021/06/23/jO3goG2WzPJMEwd.png" alt="image-20210623220422636"></p>
<p>其最终调用的就是MapperRegistry中的getMapper方法。</p>
<p><strong>MapperRegistry.getMapper</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getMapper</span><span class="params">(Class&lt;T&gt; type, SqlSession sqlSession)</span> &#123;</span><br><span class="line">    <span class="comment">// 步骤一</span></span><br><span class="line">  <span class="keyword">final</span> MapperProxyFactory&lt;T&gt; mapperProxyFactory = (MapperProxyFactory&lt;T&gt;) knownMappers.get(type);</span><br><span class="line">  <span class="keyword">if</span> (mapperProxyFactory == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BindingException</span>(<span class="string">&quot;Type &quot;</span> + type + <span class="string">&quot; is not known to the MapperRegistry.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 步骤二</span></span><br><span class="line">    <span class="keyword">return</span> mapperProxyFactory.newInstance(sqlSession);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BindingException</span>(<span class="string">&quot;Error getting mapper instance. Cause: &quot;</span> + e, e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>步骤一，从<code>knowMappers</code>中获取该接口对应的代理工厂。如果没有则抛出异常。</p>
<p>步骤二，通过代理工厂生成该接口的代理对象。</p>
<h2 id="MapperProxyFactory"><a href="#MapperProxyFactory" class="headerlink" title="MapperProxyFactory"></a>MapperProxyFactory</h2><p><img src="https://i.loli.net/2021/06/23/rPaeipg8kfdjqnY.png" alt="image-20210623222421215"></p>
<p>MapperProxyFactory的主要作用就是生成Mapper的Proxy对象。</p>
<p>为什么没有在MapperRegistry直接生成代理对象，而要使用<strong>工厂模式</strong>？工厂模式的作用是为了屏蔽复杂的对象创建过程。这里生成Proxy，需要调用Proxy对象的构造，其构造参数<code>methodCache</code>也是在Factory中进行初始化的。</p>
<p>成员mapperInterface即是当前需要生产代理类的Mapper的class对象。</p>
<p>成员methodCache用于维护该工厂处理的对应Mapper中的Method与对应的MapperMethodInvoker之间的映射。在使用过程中调用Mapper中的某个方法时，可以拿到该方法对应的具体sql信息。MapperMethodInvoker的具体实现是在MapperProxy中定义的，这里只是新建立相关缓存，并将缓存的引用传递给MapperProxy的构造。</p>
<p>下面看下<strong>代理模式</strong>是如何具体实践的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MapperProxyFactory</span>&lt;T&gt; &#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;T&gt; mapperInterface;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Method, MapperMethodInvoker&gt; methodCache = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">MapperProxyFactory</span><span class="params">(Class&lt;T&gt; mapperInterface)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.mapperInterface = mapperInterface;</span><br><span class="line">  &#125;</span><br><span class="line">	<span class="comment">// 具体生成代理对象的地方</span></span><br><span class="line">  <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">  <span class="keyword">protected</span> T <span class="title function_">newInstance</span><span class="params">(MapperProxy&lt;T&gt; mapperProxy)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (T) Proxy.newProxyInstance(mapperInterface.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; mapperInterface &#125;, mapperProxy);</span><br><span class="line">  &#125;</span><br><span class="line">	<span class="comment">// 主要调用方法</span></span><br><span class="line">  <span class="keyword">public</span> T <span class="title function_">newInstance</span><span class="params">(SqlSession sqlSession)</span> &#123;</span><br><span class="line">      <span class="comment">// 步骤一</span></span><br><span class="line">    <span class="keyword">final</span> MapperProxy&lt;T&gt; mapperProxy = <span class="keyword">new</span> <span class="title class_">MapperProxy</span>&lt;&gt;(sqlSession, mapperInterface, methodCache);</span><br><span class="line">    <span class="keyword">return</span> newInstance(mapperProxy);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通常会调用<code>newInstance(SqlSession sqlSession)</code>，传入一个SqlSession生成该工厂对应Mapper的代理。</p>
<p>步骤一，通过传入<code>sqlSession</code>,对应的Mapper的class对象,以及其方法缓存引用，构造一个MapperProxy，这个MapperProxy即是典型的动态代理，实现了<code>InvocationHanler</code>接口，作为代理对象。</p>
<p>步骤二，通过<code>Proxy.newProxyInstance</code>生成动态代理对象。</p>
<p>代理对象需要做的，就是重新实现被代理接口的方法，所以会需要一个入参是被代理接口，即mapperInterface，最后一个入参MapperProxy也一定是InvokationHandler的实现类。具体看下MapperProxy。</p>
<h2 id="MapperProxy"><a href="#MapperProxy" class="headerlink" title="MapperProxy"></a>MapperProxy</h2><p>见名知义了，它会成为Mapper接口的具体实现。重点在于invoke方法的实现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (Object.class.equals(method.getDeclaringClass())) &#123;</span><br><span class="line">      <span class="keyword">return</span> method.invoke(<span class="built_in">this</span>, args);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> cachedInvoker(method).invoke(proxy, method, args, sqlSession);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="comment">// ignore catch statement</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> MapperMethodInvoker <span class="title function_">cachedInvoker</span><span class="params">(Method method)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// ......上面省略一些，下面主要先判断java版本，对default方法做特殊处理，直接执行。</span></span><br><span class="line">    <span class="keyword">return</span> methodCache.computeIfAbsent(method, m -&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (m.isDefault()) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (privateLookupInMethod == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DefaultMethodInvoker</span>(getMethodHandleJava8(method));</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DefaultMethodInvoker</span>(getMethodHandleJava9(method));</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="comment">// ignore catch statement</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 如果是普通的方法，则需要做一些具体的操作。</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PlainMethodInvoker</span>(<span class="keyword">new</span> <span class="title class_">MapperMethod</span>(mapperInterface, method, sqlSession.getConfiguration()));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="comment">// ignore catch statement</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>每个方法会映射到一个执行器MethodInvoker，并将执行器添加到Cache中，方便下一次调用。default方法会执行DefaultMethodInvoker，而普通方法则是调用的PlainMethodInvoker，期间生成对应的方法抽象，即MapperMethod。</p>
<p>MethodInvoker中包含了MapperMethod,这个MapperMethod就是我们常常使用的接口中的具体方法了，最终调用MethodInvoker.invoke方法。invoke的实现一般就是调用MapperMethod的execute方法，execute中会具体调用select，update，delete，insert相关SqlSession操作。</p>
<p><img src="https://i.loli.net/2021/11/02/SmVcOzkMAaN96XW.png" alt="image-20211102223247628"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>binding模块是一个典型的动态代理的使用案例，通过面向mapper接口，解决启动时检查statement的正确性，调用sql的行为也变得更为优雅，入参也可以直接定义在方法签名中，而不是一味的使用如SqlSession的select方法，传入一个让人捉摸不透的Object参数（参数解析不属于binding模块）。</p>
<p>可见，使用mapper接口的好处是有很多的，动态代理也让一系列复杂的过程变得对开发人员透明，设计思路十分值得学习。譬如我们在写RPC调用时，很多时候也是面向接口api的，通过Proxy，也可以让一系列非业务逻辑代码变得透明，如同调用本地的方法一般进行rpc，开发也可以更聚焦于业务。</p>
]]></content>
      <categories>
        <category>后端</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Git常用操作</title>
    <url>/2022/03/03/git%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="Git常用操作"><a href="#Git常用操作" class="headerlink" title="Git常用操作"></a>Git常用操作</h1><h2 id="Git设置"><a href="#Git设置" class="headerlink" title="Git设置"></a>Git设置</h2><h3 id="查看当前所有配置"><a href="#查看当前所有配置" class="headerlink" title="查看当前所有配置"></a>查看当前所有配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global  --list</span><br></pre></td></tr></table></figure>

<h3 id="代理设置"><a href="#代理设置" class="headerlink" title="代理设置"></a>代理设置</h3><h4 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">skywater@skywater MINGW64 /d/blog (master)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global http.proxy 127.0.0.1:1080</span></span><br><span class="line"></span><br><span class="line">skywater@skywater MINGW64 /d/blog</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global http.proxy http://127.0.0.1:1080</span></span><br><span class="line"></span><br><span class="line">skywater@skywater MINGW64 /d/blog</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global https.proxy http://127.0.0.1:1080</span></span><br></pre></td></tr></table></figure>

<h4 id="取消代理"><a href="#取消代理" class="headerlink" title="取消代理"></a>取消代理</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure>

<h4 id="查看当前已设置的代理"><a href="#查看当前已设置的代理" class="headerlink" title="查看当前已设置的代理"></a>查看当前已设置的代理</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global --get http.proxy</span><br><span class="line">git config --global --get https.proxy</span><br></pre></td></tr></table></figure>

<h3 id="Github配置"><a href="#Github配置" class="headerlink" title="Github配置"></a>Github配置</h3><p>github目前需要通过token来进行一系列操作了，账号密码操作会出现</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">fatal: NotSupportedException encountered.</span><br><span class="line">   ServicePointManager ▒▒֧▒־▒▒▒ socks5 ▒▒▒▒▒Ĵ▒▒▒</span><br><span class="line">remote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.</span><br><span class="line">remote: Please see https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information.</span><br><span class="line">fatal: unable to access &#x27;https://github.com/skywaterliu/aeps-all.git/&#x27;: The requested URL returned error: 403</span><br></pre></td></tr></table></figure>

<p>token在github 个人设置，developer settings里面，有个生成token的地方。token只展示一次，生成后需要自己记下来。</p>
<p>然后重新指定远程仓库，并带上token</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote set-url origin https://&lt;token&gt;@github.com/&lt;username&gt;/&lt;repo&gt;</span><br></pre></td></tr></table></figure>

<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="仓库操作"><a href="#仓库操作" class="headerlink" title="仓库操作"></a>仓库操作</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化仓库</span></span><br><span class="line">git init</span><br></pre></td></tr></table></figure>

<h3 id="文件增删改"><a href="#文件增删改" class="headerlink" title="文件增删改"></a>文件增删改</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将指定文件添加到暂存区</span></span><br><span class="line">git add [file1] [file2] ...</span><br><span class="line"><span class="comment"># 将指定目录连同子目录添加到暂存区</span></span><br><span class="line">git add [<span class="built_in">dir</span>]</span><br><span class="line"><span class="comment"># 将所有文件添加到暂存区</span></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 撤销添加到暂存区的指定文件</span></span><br><span class="line">git reset HEAD [file]</span><br><span class="line"><span class="comment"># 撤销添加到暂存区的所有文件</span></span><br><span class="line">git reset HEAD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看是否对文件进行了更改</span></span><br><span class="line">git status</span><br></pre></td></tr></table></figure>

<h3 id="分支控制"><a href="#分支控制" class="headerlink" title="分支控制"></a>分支控制</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看所有本地分支</span></span><br><span class="line">git branch</span><br><span class="line"><span class="comment"># 查看所有远程分支</span></span><br><span class="line">git branch -r</span><br><span class="line"><span class="comment"># 查看所有本地分支与远程分支</span></span><br><span class="line">git branch -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建分支，但不切换到该分支</span></span><br><span class="line">git branch [newBranchName]</span><br><span class="line"><span class="comment"># 创建分支，并切换到该分支</span></span><br><span class="line">git checkout -b [newBranchName]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换分支</span></span><br><span class="line">git checkout [targetBranchName]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 快捷修改当前项目的分支为 `main`</span></span><br><span class="line">git branch -M main</span><br><span class="line"><span class="comment"># 快捷修改当前项目的分支为任意分支, 比如 `custom_branch`</span></span><br><span class="line">git branch -M custom_branch</span><br><span class="line"><span class="comment"># 修改默认分支为 `main` 分支</span></span><br><span class="line">git config --global init.defaultBranch main</span><br><span class="line"><span class="comment"># 修改默认分支为任意分支，比如 `main_main`</span></span><br><span class="line">git config --global init.defaultBranch main_main</span><br></pre></td></tr></table></figure>



<h3 id="代码获取与提交"><a href="#代码获取与提交" class="headerlink" title="代码获取与提交"></a>代码获取与提交</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 提交暂存区代码到本地版本库</span></span><br><span class="line">git commit -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将本地版本库当前分支内容推送到远程仓库</span></span><br><span class="line">git push -u origin [branch] </span><br></pre></td></tr></table></figure>



<h3 id="项目迁移"><a href="#项目迁移" class="headerlink" title="项目迁移"></a>项目迁移</h3><p>clone原项目</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">liutianshui@liutianshui02 MINGW64 /d/temp/prj</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> --bare git@github.com:skywaterliu/aeps-all.git</span></span><br></pre></td></tr></table></figure>

<p>进入该目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> aeps-all</span></span><br></pre></td></tr></table></figure>

<p>在新的gitlab中新建项目，并拷贝项目地址，比如<code>ssh://git@git.vemic.com:10022/fos/aeps-all.git</code></p>
<p>执行push</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">liutianshui@liutianshui02 MINGW64 /d/temp/prj/aeps-all.git (BARE:main)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push --mirror ssh://git@git.vemic.com:10022/fos/aeps-all.git</span></span><br></pre></td></tr></table></figure>

<p>over。</p>
<h3 id="注册Runners"><a href="#注册Runners" class="headerlink" title="注册Runners"></a>注册Runners</h3><p>Gitlab Runner一般不装在Gitlab所在的机器，应为涉及编译等耗费资源的操作。</p>
<p>下载runners，以windows为例，具体可见<code>https://docs.gitlab.com/runner/install/windows.html</code></p>
<p><a href="https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-windows-amd64.exe">https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-windows-amd64.exe</a></p>
<p>本地创建文件夹<code>D:\softwares\GitLab-Runner</code>，并进入。</p>
<p>执行<code>./gitlab-runner.exe register</code>，并跟随提示操作。具体见<code>https://docs.gitlab.com/runner/register/index.html#windows</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">PS D:\softwares\GitLab-Runner&gt; ./gitlab-runner.exe register</span><br><span class="line">Runtime platform                                    arch=amd64 os=windows pid=21492 revision=c6e7e194 version=14.8.2</span><br><span class="line">Enter the GitLab instance URL (for example, https://gitlab.com/):</span><br><span class="line">http://git.vemic.com/</span><br><span class="line">Enter the registration token:</span><br><span class="line">fVcsXHzPXmddBAXLC7Qy</span><br><span class="line">Enter a description for the runner:</span><br><span class="line">[liutianshui02]: lts-runner</span><br><span class="line">Enter tags for the runner (comma-separated):</span><br><span class="line">1.0.0</span><br><span class="line">Enter optional maintenance note for the runner:</span><br><span class="line">emmm</span><br><span class="line">Registering runner... succeeded                     runner=fVcsXHzP</span><br><span class="line">Enter an executor: docker, docker-windows, parallels, ssh, virtualbox, docker+machine, custom, shell, docker-ssh+machine, kubernetes, docker-ssh:</span><br><span class="line">docker</span><br><span class="line">Enter the default Docker image (for example, ruby:2.7):</span><br><span class="line">node:latest</span><br><span class="line">Runner registered successfully. Feel free to start it, but if it&#x27;s running already the config should be automatically reloaded!</span><br></pre></td></tr></table></figure>

<p>安装Runners服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">.\gitlab-runner.exe install</span><br><span class="line">.\gitlab-runner.exe start</span><br></pre></td></tr></table></figure>

<p>使用账号运行Runners service</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">.\gitlab-runner.exe install --user ENTER-YOUR-USERNAME --password ENTER-YOUR-PASSWORD</span><br><span class="line">.\gitlab-runner.exe start</span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="https://juejin.cn/post/6854573212559212558">https://juejin.cn/post/6854573212559212558</a></p>
<p><a href="https://scarletsky.github.io/2016/07/29/use-gitlab-ci-for-continuous-integration/#%E5%AE%89%E8%A3%85">https://scarletsky.github.io/2016/07/29/use-gitlab-ci-for-continuous-integration/#%E5%AE%89%E8%A3%85</a></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d --name gitlab-runner --restart always -v D:\softwares\GitLab-Runner\config:/etc/gitlab-runner -v /var/run/docker.sock:/var/run/docker.sock gitlab/gitlab-runner:latest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker run --rm -t -i -v D:\softwares\GitLab-Runner\config:/etc/gitlab-runner gitlab/gitlab-runner register --non-interactive --executor &quot;docker&quot; --docker-image node:10.14.0 --url &quot;http://git.vemic.com/&quot; --registration-token &quot;fVcsXHzPXmddBAXLC7Qy&quot; --description &quot;docker-runner&quot; --run-untagged=&quot;true&quot; --locked=&quot;false&quot;</span><br></pre></td></tr></table></figure>

<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="Filename-too-long"><a href="#Filename-too-long" class="headerlink" title="Filename too long"></a>Filename too long</h3><p>之前clone spring-boot项目时遇到的，clone之后自动checkout失败了，运行以下命令来还原工作区。</p>
<p> <code>git restore --source=HEAD :/</code></p>
<blockquote>
<p>PS：<code>git restore</code>命令用于将文件从暂存区还原到工作区。默认会用暂存区文件内容覆盖工作区文件内容。如果加上<code>--staged</code>参数，则不会覆盖工作区，而只是撤销暂存区中的修改内容。</p>
<p>这里的<code>--source=HEAD</code>就是使用HEAD树来还原工作区内容。<code>:/</code>表示从工作目录的根开始执行，即使你当前不是在根目录中。</p>
</blockquote>
<p>获得了以下报错</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git restore --source=HEAD :/</span><br><span class="line">error: unable to create file spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/resources/org/springframework/boot/gradle/plugin/DependencyManagementPluginActionIntegrationTests-helpfulErrorWhenVersionlessDependencyFailsToResolve.gradle: Filename too long</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>大致就是文件名太长了，是windows环境下的问题。</p>
<p>Git 的文件名限制为 4096 个字符，但在 Windows 上使用 msys 编译 Git 时除外。  它使用旧版本的 Windows API，并且文件名限制为 260 个字符。 </p>
<p>执行<code>$ git config --system core.longpaths true</code>即可。</p>
]]></content>
      <categories>
        <category>后端</category>
        <category>版本控制</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>lombok使用</title>
    <url>/2022/01/26/lombok%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Lombok使用"><a href="#Lombok使用" class="headerlink" title="Lombok使用"></a>Lombok使用</h1><p>[TOC]</p>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>lombok可用用来简化我们的代码。</p>
<p>比如，通过在Pojo上添加lombok提供的<code>@Data</code>注解，我们就不用再手动写get set方法了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Student</span>().getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>同理，也可以通过其他注解来省去构造、toString、equels、stream自动关闭、判断是否为Null值等等。</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="maven配置"><a href="#maven配置" class="headerlink" title="maven配置"></a>maven配置</h3><h4 id="添加lombok依赖"><a href="#添加lombok依赖" class="headerlink" title="添加lombok依赖"></a>添加lombok依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="添加lombok插件（非必须）"><a href="#添加lombok插件（非必须）" class="headerlink" title="添加lombok插件（非必须）"></a>添加lombok插件（非必须）</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>通过插件，我们可以进一步规定lombok的一些细节配置。比如，我们可以通过配置delombok来反编译生成不带有lombok注解的源码.</p>
<h5 id="delombok"><a href="#delombok" class="headerlink" title="delombok"></a>delombok</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 默认源路径会是$&#123;project.basedir&#125;/src/main/lombok，所以需要我们自己指定实际需要反编译的类路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sourceDirectory</span>&gt;</span></span><br><span class="line">            $&#123;project.basedir&#125;/src/main/com/focustech/naja/lombok/sample</span><br><span class="line">        <span class="tag">&lt;/<span class="name">sourceDirectory</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 默认输出路径会$&#123;project.build.directory&#125;/generated-sources/delombok，我们也可以自己指定输出路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;project.build.directory&#125;/generated-sources/diy/path<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>generate-sources<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>delombok<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>lombok-maven-plugin提供的其他额外功能具体见：</p>
<p><a href="http://anthonywhitford.com/lombok.maven/lombok-maven-plugin/index.html">http://anthonywhitford.com/lombok.maven/lombok-maven-plugin/index.html</a></p>
<h3 id="IntelliJ配置"><a href="#IntelliJ配置" class="headerlink" title="IntelliJ配置"></a>IntelliJ配置</h3><h4 id="IntelliJ-Lombok插件"><a href="#IntelliJ-Lombok插件" class="headerlink" title="IntelliJ Lombok插件"></a>IntelliJ Lombok插件</h4><p>插件市场搜索lombok并添加。</p>
<h4 id="Settings"><a href="#Settings" class="headerlink" title="Settings"></a>Settings</h4><p>Settings &gt; Build,Execution,Deployment &gt; Compiler &gt; Annotation Processors</p>
<p>打开Enable annotation processing。</p>
<h2 id="注解使用"><a href="#注解使用" class="headerlink" title="注解使用"></a>注解使用</h2><h3 id="val"><a href="#val" class="headerlink" title="val"></a>val</h3><p>val是lombok提供的一种类型，位于<code>lombok.val</code>。注解类型。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> val &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>可以使用val来声明局部变量，而不用指定变量的具体类型，感觉有点类似于JS中的var，let。</p>
<p>注意！被声明为val的变量会成为final变量。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testVal_01</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">val</span> <span class="variable">score</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Score</span>(<span class="number">100</span>);</span><br><span class="line">    <span class="type">val</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;A&quot;</span>, score);</span><br><span class="line">    logger.info(<span class="string">&quot;student info : &#123;&#125;&quot;</span>, student);</span><br><span class="line">    student.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testVal_02</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">val</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Student, Teacher&gt;() &#123;&#123;</span><br><span class="line">        put(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;A&quot;</span>, <span class="keyword">new</span> <span class="title class_">Score</span>(<span class="number">60</span>)), <span class="keyword">new</span> <span class="title class_">Teacher</span>(<span class="string">&quot;Mr.Wang&quot;</span>));</span><br><span class="line">        put(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;B&quot;</span>, <span class="keyword">new</span> <span class="title class_">Score</span>(<span class="number">100</span>)), <span class="keyword">new</span> <span class="title class_">Teacher</span>(<span class="string">&quot;Mr.Liu&quot;</span>));</span><br><span class="line">    &#125;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (val entry : map.entrySet()) &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;teacher &#123;&#125; has a student &#123;&#125;&quot;</span>, entry.getValue().getName(), entry.getKey().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testVal_03</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">val</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//        a = 3; 无法这样做，因为val修饰的变量会修饰为final</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>配置支持</strong></p>
<p><strong><code>lombok.val.flagUsage</code> &#x3D; [<code>warning</code> | <code>error</code>] (default: not set)</strong> 	</p>
<p>配置为warn或者error时，对于项目中使用了val注解的，会给出warn提示或者error直接中断编译。</p>
<h3 id="var"><a href="#var" class="headerlink" title="var"></a>var</h3><p>与val类似，都是用来声明局部变量，但区别在于，var不会将变量标记为final。</p>
<p><strong>配置支持</strong></p>
<p><strong><code>lombok.var.flagUsage</code> &#x3D; [<code>warning</code> | <code>error</code>] (default: not set)</strong></p>
<p>配置为warn或者error时，对于项目中使用了var注解的，会给出warn提示或者error直接中断编译。</p>
<h3 id="NonNull"><a href="#NonNull" class="headerlink" title="@NonNull"></a>@NonNull</h3><p>用于标记方法参数，如果该参数为null，则会抛出异常。缺点是不能自定义错误信息内容。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(<span class="meta">@NonNull</span> String s)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;content = &quot;</span> + s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>配置支持</strong></p>
<p><strong><code>lombok.nonNull.exceptionType</code> &#x3D; [<code>NullPointerException</code> | <code>IllegalArgumentException</code> | <code>JDK</code> | <code>Guava</code> | <code>Assertion</code>] (default: <code>NullPointerException</code>).</strong> 	</p>
<p>可以指定出现null时抛出哪种异常，或者是根据指定策略生成Assert风格代码。</p>
<h3 id="Getter-x2F-Setter"><a href="#Getter-x2F-Setter" class="headerlink" title="@Getter&#x2F;@Setter"></a>@Getter&#x2F;@Setter</h3><p>可应用在类级别与成员变量级别，为成员变量生成get，set方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Food</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可以定义方法访问级别</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="meta">@Setter(AccessLevel.PACKAGE)</span></span><br><span class="line">    <span class="type">double</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对静态变量并不会生效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> type;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>配置支持</strong></p>
<p><strong><code>lombok.accessors.chain</code> &#x3D; [<code>true</code> | <code>false</code>] (default: false)</strong> </p>
<p>如果配置为true，那么set方法将不是返回void，而是返回this。或者也可以使用@Accessors注解。注：@Accessors注解优先级比该配置高。</p>
<p><strong><code>lombok.accessors.fluent</code> &#x3D; [<code>true</code> | <code>false</code>] (default: false)</strong></p>
<p>如果配置为true，那么get set方法名将不是标准的getXxx，setXxx，而是与成员变量相同。</p>
<p><strong><code>lombok.accessors.prefix</code> +&#x3D; <em>a field prefix</em> (default: empty list)</strong> </p>
<p>打个比方，如果一个类的成员变量叫myName，然后配置<code>lombok.accessors.prefix += my</code>，那么生成的getter和setter都会自动去除my前缀，成为<code>getName()</code>和<code>setName()</code>。</p>
<p><strong><code>lombok.getter.noIsPrefix</code> &#x3D; [<code>true</code> | <code>false</code>] (default: false)</strong> 	</p>
<p>当为true时，boolean类型的成员生成的getter将不会是is开头，而是get开头。</p>
<p><strong><code>lombok.setter.flagUsage</code> &#x3D; [<code>warning</code> | <code>error</code>] (default: not set)</strong> 	</p>
<p>检测项目是否用了setter注解，给出warning或者直接error终止编译。</p>
<p><strong><code>lombok.getter.flagUsage</code> &#x3D; [<code>warning</code> | <code>error</code>] (default: not set)</strong> 	</p>
<p>检测项目是否用了getter注解，给出warning或者直接error终止编译。</p>
<p><strong><code>lombok.copyableAnnotations</code> &#x3D; [<em>A list of fully qualified types</em>] (default: empty list)</strong> 	</p>
<h3 id="ToString"><a href="#ToString" class="headerlink" title="@ToString"></a>@ToString</h3><p>用于生成toString方法。</p>
<p>如果需要指定某个字段不被toString输出，可以加上<code>@ToString.Exclude</code>标记。</p>
<p>可以在类上添加<code>@ToString(onlyExplicitlyIncluded=true)</code>来实现只输出被<code>@ToString.Include</code>标记的字段。</p>
<p>如果需要定义字段在toString中的出现顺序，可以使用<code>@ToString.Include(rank=x)</code>定义rank来实现。</p>
<p>定义<code>@ToString(callSupper=true)</code>可以额外调用父类的toString。</p>
<p>一般来说，toString会调用字段的getter方法。但可以通过配置来使其直接输出字段的toString，只需加上<code>@ToString(doNotUseGetters=true)</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ToString(callSuper = true)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Father</span> <span class="keyword">extends</span> <span class="title class_">FamilyMember</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; scheduleList;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// toString将不输出father的兴趣爱好</span></span><br><span class="line">    <span class="meta">@ToString</span>.Exclude</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; hobbies;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ToString(onlyExplicitlyIncluded = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Son</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ToString</span>.Include</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ToString</span>.Include(rank = <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> grade;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>配置支持</strong></p>
<p><strong><code>lombok.toString.includeFieldNames</code> &#x3D; [<code>true</code> | <code>false</code>] (default: true)</strong> 	</p>
<p><strong><code>lombok.toString.doNotUseGetters</code> &#x3D; [<code>true</code> | <code>false</code>] (default: false)</strong> 	</p>
<p><strong><code>lombok.toString.callSuper</code> &#x3D; [<code>call</code> | <code>skip</code> | <code>warn</code>] (default: skip)</strong> 	</p>
<p><strong><code>lombok.toString.flagUsage</code> &#x3D; [<code>warning</code> | <code>error</code>] (default: not set)</strong> 	</p>
<p>各功能点见名之意，上面已经描述过了，不再赘述。</p>
<h3 id="Log"><a href="#Log" class="headerlink" title="@Log"></a>@Log</h3><p>很好用的一个功能，通常我们记录日志的时候，都需要手动创建一个log静态成员。这个注解可以直接帮我们生成这个成员，不需要再手写了。</p>
<p>比如，使用对应slf4j的注解@Slf4j，则会自动生成：</p>
<p><code>private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(LogExample.class);</code></p>
<p>不同的Log框架对应不同的Log注解：</p>
<table>
<thead>
<tr>
<th>日志框架</th>
<th>全限定名</th>
<th>对应Lombok @Log注解</th>
</tr>
</thead>
<tbody><tr>
<td>Apache Common Log</td>
<td>org.apache.commons.logging.Log</td>
<td>@CommonsLog</td>
</tr>
<tr>
<td>Flogger</td>
<td>com.google.common.flogger.FluentLogger</td>
<td>@Flogger</td>
</tr>
<tr>
<td>JBoss Log</td>
<td>org.jboss.logging.Logger</td>
<td>@JBossLog</td>
</tr>
<tr>
<td>Java Log</td>
<td>java.util.logging.Logger</td>
<td>@Log</td>
</tr>
<tr>
<td>Log4j</td>
<td>org.apache.log4j.Logger</td>
<td>@Log4j</td>
</tr>
<tr>
<td>Log4j2</td>
<td>org.apache.logging.log4j.Logger</td>
<td>@Log4j2</td>
</tr>
<tr>
<td>Slf4j</td>
<td>org.slf4j.Logger</td>
<td>@Slf4j</td>
</tr>
<tr>
<td>XSlf4j</td>
<td>org.slf4j.ext.XLogger</td>
<td>@XSlf4j</td>
</tr>
<tr>
<td>CustomLog</td>
<td>com.foo.your.Logger</td>
<td>@CustomLog</td>
</tr>
</tbody></table>
<h4 id="定义日志的logger-name"><a href="#定义日志的logger-name" class="headerlink" title="定义日志的logger name"></a>定义日志的logger name</h4><p>通常我们自己写日志的话，可能会通过<code>getLogger(&quot;FACC_LOG&quot;)</code>，来指定具体的logger，这里的”FACC_LOG“在lombok里叫做<strong>topic</strong>，我们可以通过@Slf4j(topic&#x3D;”FACC_LOG”)来达成一样的效果。</p>
<h4 id="自定义Log注解"><a href="#自定义Log注解" class="headerlink" title="自定义Log注解"></a>自定义Log注解</h4><p>可以通过Lombok.config来自定义我们自己的日志注解。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lombok.log.custom.declaration = com.foo.your.Logger com.foo.your.LoggerFactory.createYourLog(TYPE)(TOPIC)</span><br></pre></td></tr></table></figure>

<p><strong>第一部分</strong></p>
<p><code>lombok.log.custom.declaration = com.foo.your.Logger</code>定义Logger类全限定名。</p>
<p><strong>第二部分</strong></p>
<p>在第一部分后跟一个空格，后见加上Logger的工厂类与工厂方法。<code>com.foo.your.LoggerFactory.createYourLog</code>。</p>
<p><strong>第三部分</strong></p>
<p>是放在括号中的一个参数，可以是：<code>TYPE</code>，<code>NAME</code>，<code>TOPIC</code>。topic可以不配置。也可以和type&#x2F;name搭配。type&#x2F;name二选一。</p>
<p>如果是TYPE，那么生成的getLogger入参则是当前所在的Class类类型。如果是NAME，则为当前Class类的全限定名。如果是TOPIC，那么@Custom(topic&#x3D;”xxx”)定义的topic内容将被传入<code>getLogger(String xxx)</code></p>
<h4 id="指定生成的log成员变量名"><a href="#指定生成的log成员变量名" class="headerlink" title="指定生成的log成员变量名"></a>指定生成的log成员变量名</h4><p><code>lombok.log.fieldName = log</code>，配置在lombok.config中，默认是log，我们可以定义成别的，比如logger之类的。</p>
<h4 id="限制项目使用的Log类型"><a href="#限制项目使用的Log类型" class="headerlink" title="限制项目使用的Log类型"></a>限制项目使用的Log类型</h4><p>为了防止各种各样的@Log注解出现在项目中，可以通过lombok.config来关闭其他注解，阻止其他注解通过编译。</p>
<p>所有配置见下方：</p>
<p><strong>lombok.log.apacheCommons.flagUsage &#x3D; [warning | error] (default: not set)</strong></p>
<p><strong>lombok.log.custom.flagUsage &#x3D; [warning | error] (default: not set)</strong></p>
<p><strong>lombok.log.flagUsage &#x3D; [warning | error] (default: not set)</strong></p>
<p><strong>lombok.log.flogger.flagUsage &#x3D; [warning | error] (default: not set)</strong></p>
<p><strong>lombok.log.javaUtilLogging.flagUsage &#x3D; [warning | error] (default: not set)</strong></p>
<p><strong>lombok.log.jbosslog.flagUsage &#x3D; [warning | error] (default: not set)</strong></p>
<p><strong>lombok.log.log4j.flagUsage &#x3D; [warning | error] (default: not set)</strong></p>
<p><strong>lombok.log.log4j2.flagUsage &#x3D; [warning | error] (default: not set)</strong></p>
<p><strong>lombok.log.slf4j.flagUsage &#x3D; [warning | error] (default: not set)</strong></p>
<p><strong>lombok.log.xslf4j.flagUsage &#x3D; [warning | error] (default: not set)</strong></p>
<h3 id="Data"><a href="#Data" class="headerlink" title="@Data"></a>@Data</h3><p>该注解是对@ToString、@EqualsAndHashCode、@Getter&#x2F;@Setter 和@RequiredArgsConstructor的集成。配了一个@Data，也就配置了这几个注解。</p>
<p>如果需要精细化配置的化，再特殊指定其他的几个注解。</p>
<h3 id="EqualsAndHashCode"><a href="#EqualsAndHashCode" class="headerlink" title="@EqualsAndHashCode"></a>@EqualsAndHashCode</h3><p>用于生成equals方法以及重写hashCode。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>比较常用的就是@Data，@Getter，@Setter，@Log系列。这几个重点了解下就行了，其他的一般也不太推荐使用。</p>
]]></content>
      <categories>
        <category>后端</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>lombok</tag>
      </tags>
  </entry>
  <entry>
    <title>初探MapReduce</title>
    <url>/2019/07/15/%E5%88%9D%E6%8E%A2MapReduce/</url>
    <content><![CDATA[<h2 id="什么是MapReduce"><a href="#什么是MapReduce" class="headerlink" title="什么是MapReduce"></a>什么是MapReduce</h2><p>对于一般的数据统计，简单到诸如数组排序，列求和等等，只需要将数据流指向内存，便可通过一系列JDK api操作，对数据进行汇总计算即可。可现实之中往往场景不止于此。先提出两个问题：</p>
<ol>
<li>当一个日志文件有4GB大小，让你去对error级别日志进行汇总分析，你会放到内存中去做吗？</li>
<li>如果各个日志文件分布在不同的服务器，又该怎么办呢？把它们全部拷贝到一台主机再进行统一计算，然后重新分发给每台机器吗？</li>
</ol>
<p>诸如这样的问题还有很多，这些都是单点计算无法解决的问题，或者说，在目前大数据的时代而言必然会成为一种瓶颈，因为海量数据是要存储在集群服务器上，这时，便需要一个<strong>分布式计算平台</strong>，将这些任务以一定的规律分散开，各自以统一的规则执行任务，最终再将结果汇总起来。</p>
<p>Hadoop生态体系下，广泛使用HDFS作为分布式数据存储，将数据切块，存放在多台hdfs集群设备中，提高了数据存储的扩展性，并实现冗余备份，解决了大文件存储的问题。再这基础上，我们需要对其中文件进行分析计算，<strong>MapReduce</strong>便为此诞生。</p>
<p><strong>[这段摘自百度百科，大概了解一下就行]</strong></p>
<p>MapReduce是一种编程模型，用于大规模数据集（大于1TB）的并行运算。概念”Map（映射）”和”Reduce（归约）”，是它们的主要思想，都是从函数式编程语言里借来的，还有从矢量编程语言里借来的特性。它极大地方便了编程人员在不会分布式并行编程的情况下，将自己的程序运行在<a href="https://baike.baidu.com/item/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/4905336">分布式系统</a>上。 当前的软件实现是指定一个Map（映射）函数，用来把一组键值对映射成一组新的键值对，指定并发的Reduce（归约）函数，用来保证所有映射的键值对中的每一个共享相同的键组。</p>
<span id="more"></span>


<h2 id="MapReduce执行流程"><a href="#MapReduce执行流程" class="headerlink" title="MapReduce执行流程"></a>MapReduce执行流程</h2><p>作为初探，过于深入研究执行流程似乎有种路都走不好就想跑的感觉。。。所以，这里只是非常简单的了解了以下它的执行过程，大部分内容也是摘自各家的博客，其中每步的含义暂不做深究。</p>
<p>从它的名字来说，简单粗暴的两步：Map，以及Reduce。对于一般开发人员来说，这是最需要关心的两步。</p>
<p>Map的作用是读取原始数据并进行解析，形成键值对。</p>
<p>Reduce则对这些键值对进行汇总计算，输出结果。</p>
<p><img src="https://s2.loli.net/2022/04/16/AsYQvaDV4MmXJUR.png" alt="img"></p>
<p>看似简单，其实二者中间Hadoop框架为我们封装了很多操作。可以看看这张图：</p>
<p><img src="https://s2.loli.net/2022/04/16/Pw1VJG7keFAMqLr.png" alt="img"></p>
<p>这里先不做深入学习，咱先做到会用，然后再在每个实例中去好好理解，或许是为一种高效的方法。</p>
<h2 id="简单的MapReduce使用实例"><a href="#简单的MapReduce使用实例" class="headerlink" title="简单的MapReduce使用实例"></a>简单的MapReduce使用实例</h2><p>就用网上教程中使用最多的“字数统计”来初次认识一下这个分布式计算框架吧。</p>
<p>需求：有一个文本文件，我们需要统计这个文件中各个单词的出现次数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Welcome to Hadoop Class</span><br><span class="line">Hadoop is good</span><br><span class="line">Hadoop is bad</span><br></pre></td></tr></table></figure>

<p>思路：在Map中，逐行读取文本，对单词进行分割，每个单词计1次。在Reduce中，对相同的key进行汇总，求和，输出。</p>
<p><img src="https://s2.loli.net/2022/04/16/qhymaRd6epHxuEc.png" alt="img"></p>
<p>实施：</p>
<h4 id="WCMapper-java"><a href="#WCMapper-java" class="headerlink" title="WCMapper.java"></a><strong>WCMapper.java</strong></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.skywater.study.hadoop.mr.wordcount;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Mapping步骤实现</span></span><br><span class="line"><span class="comment"> * create by skywater at 2019/7/12 16:39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WCMapper</span> <span class="keyword">extends</span> <span class="title class_">Mapper</span>&lt;LongWritable, Text, Text, LongWritable&gt; &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每读一行会调用一次该方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key     每行数据的起始偏移量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value   这行文本内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">map</span><span class="params">(LongWritable key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">row</span> <span class="operator">=</span> value.toString();</span><br><span class="line">        String[] words = row.split(<span class="string">&quot;\\s+&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">            context.write(<span class="keyword">new</span> <span class="title class_">Text</span>(word), <span class="keyword">new</span> <span class="title class_">LongWritable</span>(<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>其中数据类型要注意，不要用jdk自带的数据类型，而是用hadoop封装的数据类型。</p>
<ul>
<li>BooleanWritable:标准布尔型数值</li>
<li>ByteWritable:单字节数值</li>
<li>DoubleWritable:双字节数值</li>
<li>FloatWritable:浮点数</li>
<li>IntWritable:整型数</li>
<li>LongWritable:长整型数</li>
<li>Text:使用UTF8格式存储的文本</li>
<li>NullWritable:当&lt;key, value&gt;中的key或value为空时使用</li>
</ul>
<h4 id="WCReducer-java"><a href="#WCReducer-java" class="headerlink" title="WCReducer.java"></a><strong>WCReducer.java</strong></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.skywater.study.hadoop.mr.wordcount;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * create by skywater at 2019/7/12 16:39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WCReducer</span> <span class="keyword">extends</span> <span class="title class_">Reducer</span>&lt;Text, LongWritable, Text, LongWritable&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 等待hadoop框架对map处理完成，将所有KV缓存起来，进行分组，然后传递一个key,values，调用一次reduce方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">reduce</span><span class="params">(Text key, Iterable&lt;LongWritable&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line">        <span class="keyword">for</span> (LongWritable value : values) &#123;</span><br><span class="line">            <span class="type">Long</span> <span class="variable">currentValue</span> <span class="operator">=</span> value.get();</span><br><span class="line">            count = BigDecimal.valueOf(count).add(BigDecimal.valueOf(currentValue)).longValue();</span><br><span class="line">        &#125;</span><br><span class="line">        context.write(key, <span class="keyword">new</span> <span class="title class_">LongWritable</span>(count));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>最后需要一个Runner去把Mapper和Reducer组装起来，并定义输入输出路径等。</p>
<h4 id="WCRunner-java"><a href="#WCRunner-java" class="headerlink" title="WCRunner.java"></a><strong>WCRunner.java</strong></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.skywater.study.hadoop.mr.wordcount;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用来描述一个特定的Job</span></span><br><span class="line"><span class="comment"> * 指定改作业用的哪个map/reduce</span></span><br><span class="line"><span class="comment"> * 指定作业所需要的数据路径</span></span><br><span class="line"><span class="comment"> * 指定结果输出路径</span></span><br><span class="line"><span class="comment"> * ...</span></span><br><span class="line"><span class="comment"> * create by skywater at 2019/7/15 11:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WCRunner</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InterruptedException &#123;</span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">        <span class="type">Job</span> <span class="variable">job</span> <span class="operator">=</span> Job.getInstance(conf);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置整个job所用的类在那里</span></span><br><span class="line">        job.setJarByClass(WCRunner.class);</span><br><span class="line"></span><br><span class="line">        job.setMapperClass(WCMapper.class);</span><br><span class="line">        job.setReducerClass(WCReducer.class);</span><br><span class="line">        <span class="comment">// 如果map和reduce输出类型一直，可同时设置输出key类型</span></span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        job.setOutputValueClass(LongWritable.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置map相关输出类型</span></span><br><span class="line">        job.setMapOutputKeyClass(Text.class);</span><br><span class="line">        job.setMapOutputValueClass(LongWritable.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 指定原始数据存放位置</span></span><br><span class="line">        FileInputFormat.setInputPaths(job,<span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/wc/src&quot;</span>));</span><br><span class="line">        <span class="comment">// 指定结果数据输出位置</span></span><br><span class="line">        FileOutputFormat.setOutputPath(job,<span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/wc/output&quot;</span>));</span><br><span class="line">        </span><br><span class="line">        job.waitForCompletion(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>这样就完成了一个MR的逻辑编写工作。</p>
<h4 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h4><p>首先使用jps命令确定ResourceManager是否启动，如未启动需检查yarn是否正常运行。</p>
<p>这里用的文件数据并非上面例子中的数据，数据本身可自行调整。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@master ~]# jps</span><br><span class="line">17761 Jps</span><br><span class="line">7287 NameNode</span><br><span class="line">7641 ResourceManager</span><br><span class="line">7483 SecondaryNameNode</span><br><span class="line">[root@master ~]# cd /root</span><br><span class="line">[root@master ~]# ll</span><br><span class="line">total 9708</span><br><span class="line">-rw-------. 1 root root    1420 Dec 25  2018 anaconda-ks.cfg</span><br><span class="line">drwxr-xr-x. 2 root root      42 Jul 15 01:47 data</span><br><span class="line">-rw-r--r--. 1 root root    1952 Apr 30 13:39 erlang-solutions-1.0-1.noarch.rpm</span><br><span class="line">-rw-r--r--. 1 root root 9929748 Apr 30 13:30 rabbitmq-server-3.7.14-1.el7.noarch.rpm</span><br><span class="line">[root@master ~]# cd data</span><br><span class="line">[root@master data]# ls</span><br><span class="line">ok.sql  word-count.jar</span><br><span class="line">[root@master data]# hadoop fs -mkdir /wc</span><br><span class="line">^[[A[root@master data]# hadoop fs -mkdir /wc/src</span><br><span class="line">[root@master data]# hadoop fs -put </span><br><span class="line">ok.sql          word-count.jar  </span><br><span class="line">[root@master data]# hadoop fs -put ok.sql /wc/src</span><br></pre></td></tr></table></figure>



<h4 id="执行Jar包"><a href="#执行Jar包" class="headerlink" title="执行Jar包"></a>执行Jar包</h4><p>此时需要将刚刚写好的逻辑打成Jar包</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[root<span class="meta">@master</span> data]# hadoop jar word-count.jar com.skywater.study.hadoop.mr.wordcount.WCRunner</span><br><span class="line"><span class="number">19</span>/<span class="number">07</span>/<span class="number">15</span> <span class="number">01</span>:<span class="number">51</span>:<span class="number">10</span> INFO client.RMProxy: Connecting to ResourceManager at master/<span class="number">192.168</span><span class="number">.192</span><span class="number">.142</span>:<span class="number">8032</span></span><br><span class="line"><span class="number">19</span>/<span class="number">07</span>/<span class="number">15</span> <span class="number">01</span>:<span class="number">51</span>:<span class="number">11</span> WARN mapreduce.JobResourceUploader: Hadoop command-line option parsing not performed. Implement the Tool <span class="keyword">interface</span> <span class="title class_">and</span> execute your application with ToolRunner to remedy <span class="built_in">this</span>.</span><br><span class="line"><span class="number">19</span>/<span class="number">07</span>/<span class="number">15</span> <span class="number">01</span>:<span class="number">51</span>:<span class="number">11</span> INFO input.FileInputFormat: Total input paths to process : <span class="number">1</span></span><br><span class="line"><span class="number">19</span>/<span class="number">07</span>/<span class="number">15</span> <span class="number">01</span>:<span class="number">51</span>:<span class="number">11</span> INFO mapreduce.JobSubmitter: number of splits:<span class="number">1</span></span><br><span class="line"><span class="number">19</span>/<span class="number">07</span>/<span class="number">15</span> <span class="number">01</span>:<span class="number">51</span>:<span class="number">12</span> INFO mapreduce.JobSubmitter: Submitting tokens <span class="keyword">for</span> job: job_1562908973274_0001</span><br><span class="line"><span class="number">19</span>/<span class="number">07</span>/<span class="number">15</span> <span class="number">01</span>:<span class="number">51</span>:<span class="number">12</span> INFO impl.YarnClientImpl: Submitted application application_1562908973274_0001</span><br><span class="line"><span class="number">19</span>/<span class="number">07</span>/<span class="number">15</span> <span class="number">01</span>:<span class="number">51</span>:<span class="number">12</span> INFO mapreduce.Job: The url to track the job: http:<span class="comment">//master:8088/proxy/application_1562908973274_0001/</span></span><br><span class="line"><span class="number">19</span>/<span class="number">07</span>/<span class="number">15</span> <span class="number">01</span>:<span class="number">51</span>:<span class="number">12</span> INFO mapreduce.Job: Running job: job_1562908973274_0001</span><br><span class="line"><span class="number">19</span>/<span class="number">07</span>/<span class="number">15</span> <span class="number">01</span>:<span class="number">51</span>:<span class="number">20</span> INFO mapreduce.Job: Job job_1562908973274_0001 running in uber mode : <span class="literal">false</span></span><br><span class="line"><span class="number">19</span>/<span class="number">07</span>/<span class="number">15</span> <span class="number">01</span>:<span class="number">51</span>:<span class="number">20</span> INFO mapreduce.Job:  map <span class="number">0</span>% reduce <span class="number">0</span>%</span><br><span class="line"><span class="number">19</span>/<span class="number">07</span>/<span class="number">15</span> <span class="number">01</span>:<span class="number">51</span>:<span class="number">27</span> INFO mapreduce.Job:  map <span class="number">100</span>% reduce <span class="number">0</span>%</span><br><span class="line"><span class="number">19</span>/<span class="number">07</span>/<span class="number">15</span> <span class="number">01</span>:<span class="number">51</span>:<span class="number">32</span> INFO mapreduce.Job:  map <span class="number">100</span>% reduce <span class="number">100</span>%</span><br><span class="line"><span class="number">19</span>/<span class="number">07</span>/<span class="number">15</span> <span class="number">01</span>:<span class="number">51</span>:<span class="number">32</span> INFO mapreduce.Job: Job job_1562908973274_0001 completed successfully</span><br><span class="line"><span class="number">19</span>/<span class="number">07</span>/<span class="number">15</span> <span class="number">01</span>:<span class="number">51</span>:<span class="number">32</span> INFO mapreduce.Job: Counters: <span class="number">49</span></span><br><span class="line">	File System Counters</span><br><span class="line">		FILE: Number of bytes read=<span class="number">8434</span></span><br><span class="line">		FILE: Number of bytes written=<span class="number">262349</span></span><br><span class="line">		FILE: Number of read operations=<span class="number">0</span></span><br><span class="line">		FILE: Number of large read operations=<span class="number">0</span></span><br><span class="line">		FILE: Number of write operations=<span class="number">0</span></span><br><span class="line">		HDFS: Number of bytes read=<span class="number">4087</span></span><br><span class="line">		HDFS: Number of bytes written=<span class="number">1221</span></span><br><span class="line">		HDFS: Number of read operations=<span class="number">6</span></span><br><span class="line">		HDFS: Number of large read operations=<span class="number">0</span></span><br><span class="line">		HDFS: Number of write operations=<span class="number">2</span></span><br><span class="line">	Job Counters </span><br><span class="line">		Launched map tasks=<span class="number">1</span></span><br><span class="line">		Launched reduce tasks=<span class="number">1</span></span><br><span class="line">		Data-local map tasks=<span class="number">1</span></span><br><span class="line">		Total time spent by all maps in occupied <span class="title function_">slots</span> <span class="params">(ms)</span>=<span class="number">3085</span></span><br><span class="line">		Total time spent by all reduces in occupied <span class="title function_">slots</span> <span class="params">(ms)</span>=<span class="number">2336</span></span><br><span class="line">		Total time spent by all map <span class="title function_">tasks</span> <span class="params">(ms)</span>=<span class="number">3085</span></span><br><span class="line">		Total time spent by all reduce <span class="title function_">tasks</span> <span class="params">(ms)</span>=<span class="number">2336</span></span><br><span class="line">		Total vcore-milliseconds taken by all map tasks=<span class="number">3085</span></span><br><span class="line">		Total vcore-milliseconds taken by all reduce tasks=<span class="number">2336</span></span><br><span class="line">		Total megabyte-milliseconds taken by all map tasks=<span class="number">3159040</span></span><br><span class="line">		Total megabyte-milliseconds taken by all reduce tasks=<span class="number">2392064</span></span><br><span class="line">	Map-Reduce Framework</span><br><span class="line">		Map input records=<span class="number">125</span></span><br><span class="line">		Map output records=<span class="number">502</span></span><br><span class="line">		Map output bytes=<span class="number">7424</span></span><br><span class="line">		Map output materialized bytes=<span class="number">8434</span></span><br><span class="line">		Input split bytes=<span class="number">97</span></span><br><span class="line">		Combine input records=<span class="number">0</span></span><br><span class="line">		Combine output records=<span class="number">0</span></span><br><span class="line">		Reduce input groups=<span class="number">98</span></span><br><span class="line">		Reduce shuffle bytes=<span class="number">8434</span></span><br><span class="line">		Reduce input records=<span class="number">502</span></span><br><span class="line">		Reduce output records=<span class="number">98</span></span><br><span class="line">		Spilled Records=<span class="number">1004</span></span><br><span class="line">		<span class="type">Shuffled</span> <span class="variable">Maps</span> <span class="operator">=</span><span class="number">1</span></span><br><span class="line">		Failed Shuffles=<span class="number">0</span></span><br><span class="line">		Merged Map outputs=<span class="number">1</span></span><br><span class="line">		GC time <span class="title function_">elapsed</span> <span class="params">(ms)</span>=<span class="number">109</span></span><br><span class="line">		CPU time <span class="title function_">spent</span> <span class="params">(ms)</span>=<span class="number">1890</span></span><br><span class="line">		Physical <span class="title function_">memory</span> <span class="params">(bytes)</span> snapshot=<span class="number">446320640</span></span><br><span class="line">		Virtual <span class="title function_">memory</span> <span class="params">(bytes)</span> snapshot=<span class="number">4262146048</span></span><br><span class="line">		Total committed heap <span class="title function_">usage</span> <span class="params">(bytes)</span>=<span class="number">278396928</span></span><br><span class="line">	Shuffle Errors</span><br><span class="line">		BAD_ID=<span class="number">0</span></span><br><span class="line">		CONNECTION=<span class="number">0</span></span><br><span class="line">		IO_ERROR=<span class="number">0</span></span><br><span class="line">		WRONG_LENGTH=<span class="number">0</span></span><br><span class="line">		WRONG_MAP=<span class="number">0</span></span><br><span class="line">		WRONG_REDUCE=<span class="number">0</span></span><br><span class="line">	File Input Format Counters </span><br><span class="line">		Bytes Read=<span class="number">3990</span></span><br><span class="line">	File Output Format Counters </span><br><span class="line">		Bytes Written=<span class="number">1221</span></span><br></pre></td></tr></table></figure>



<h4 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@master data]# hadoop fs -ls /wc/output</span><br><span class="line">Found 2 items</span><br><span class="line">-rw-r--r--   2 root supergroup          0 2019-07-15 01:51 /wc/output/_SUCCESS</span><br><span class="line">-rw-r--r--   2 root supergroup       1221 2019-07-15 01:51 /wc/output/part-r-00000</span><br><span class="line">[root@master data]# hadoop fs -cat /wc/output/part-r-00000</span><br><span class="line">	107</span><br><span class="line">&#x27;	38</span><br><span class="line">&#x27;%ENTID%&#x27;)	1</span><br><span class="line">&#x27;%ENT_ID%&#x27;	2</span><br><span class="line">&#x27;&#x27;&#x27;b47b7578-f4d6-4092-a829-6d4a75161adc&#x27;&#x27;)&#x27;;	3</span><br><span class="line">&#x27;&#x27;&#x27;b47b7578-f4d6-4092-a829-6d4a75161adc&#x27;&#x27;;&#x27;);	1</span><br><span class="line">&#x27;FROM	1</span><br><span class="line">&#x27;LZETS_CHECK&#x27;;	4</span><br><span class="line">&#x27;SELECT	4</span><br><span class="line">&#x27;b47b7578-f4d6-4092-a829-6d4a75161adc&#x27;);	2</span><br><span class="line">(COLUMN_NAME	1</span><br><span class="line">(SELECT	3</span><br><span class="line">(execute	1</span><br><span class="line">*	1</span><br><span class="line">--	4</span><br><span class="line">----------------------------------------------------------------------------------------	4</span><br><span class="line">0	3</span><br><span class="line">:=	3</span><br><span class="line">=	5</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">	3</span></span><br><span class="line">AND	2</span><br><span class="line">BEGIN	4</span><br><span class="line">CLOSE	3</span><br><span class="line">COLNAME	11</span><br><span class="line">COLNAME;	6</span><br><span class="line">COLUMN_NAME	5</span><br><span class="line">COUNT(*)	4</span><br><span class="line">CURSOR	3</span><br><span class="line">DBA_TAB_COLUMNS	4</span><br><span class="line">DBMS_OUTPUT.PUT_LINE(&#x27;select	1</span><br><span class="line">DBMS_OUTPUT.PUT_LINE(&#x27;tableName:	2</span><br><span class="line">DBMS_OUTPUT.PUT_LINE(&#x27;总数：&#x27;	2</span><br><span class="line">DECLARE	4</span><br><span class="line">END	6</span><br><span class="line">END;	3</span><br><span class="line">EXECUTE	3</span><br><span class="line">FETCH	6</span><br><span class="line">FOR	1</span><br><span class="line">FROM	10</span><br><span class="line">IF	3</span><br><span class="line">IF;	3</span><br><span class="line">IMMEDIATE	4</span><br><span class="line">IN	1</span><br><span class="line">INTO	9</span><br><span class="line">IS	3</span><br><span class="line">LIKE	3</span><br><span class="line">LOOP	3</span><br><span class="line">LOOP;	3</span><br><span class="line">NUMBER;	3</span><br><span class="line">OPEN	4</span><br><span class="line">OR	1</span><br><span class="line">OWNER	3</span><br><span class="line">SELECT	4</span><br><span class="line">STR	9</span><br><span class="line">TABLENAME	8</span><br><span class="line">TABLENAME,	6</span><br><span class="line">TABLE_NAME,	3</span><br><span class="line">TEST_CURSOR	9</span><br><span class="line"><span class="meta prompt_">TEST_CURSOR%</span><span class="language-bash">FOUND	3</span></span><br><span class="line">TEST_CURSOR;	6</span><br><span class="line">THEN	3</span><br><span class="line">Table_Name,column_name	1</span><br><span class="line">VARCHAR2(200);	3</span><br><span class="line">VARCHAR2(30);	8</span><br><span class="line">V_COUNT	6</span><br><span class="line">V_COUNT);	2</span><br><span class="line">V_COUNT;	3</span><br><span class="line">WHERE	3</span><br><span class="line">WHILE	3</span><br><span class="line">close	1</span><br><span class="line">colName	3</span><br><span class="line">columnName:	2</span><br><span class="line">cursor	1</span><br><span class="line">dbms_output.put_line(obj);	1</span><br><span class="line">dual;	4</span><br><span class="line">end	2</span><br><span class="line">end;	1</span><br><span class="line">ent_id:	2</span><br><span class="line">fetch	2</span><br><span class="line">from	6</span><br><span class="line">into	2</span><br><span class="line">is	1</span><br><span class="line">like	3</span><br><span class="line">loop	2</span><br><span class="line">loop;	2</span><br><span class="line">obj	1</span><br><span class="line">owner	1</span><br><span class="line">s_sql	4</span><br><span class="line">select	5</span><br><span class="line">tableName	2</span><br><span class="line">tableName)	1</span><br><span class="line">tableName,colName;	2</span><br><span class="line">test_cursor	3</span><br><span class="line"><span class="meta prompt_">test_cursor%</span><span class="language-bash">found	1</span></span><br><span class="line">test_cursor;	2</span><br><span class="line">where	5</span><br><span class="line">while	1</span><br><span class="line">||	45</span><br></pre></td></tr></table></figure>



<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>到这步也算是完成了初探，这几天会集中精力研究这块，为接下来的BI相关工作做准备</p>
]]></content>
      <categories>
        <category>Hadoop</category>
        <category>MapReduce</category>
      </categories>
      <tags>
        <tag>分布式计算</tag>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>单点登录方案与实现总结</title>
    <url>/2021/10/25/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%E6%96%B9%E6%A1%88%E4%B8%8E%E5%AE%9E%E7%8E%B0%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="单点登录方案与实现总结"><a href="#单点登录方案与实现总结" class="headerlink" title="单点登录方案与实现总结"></a>单点登录方案与实现总结</h1><h2 id="何为登录？"><a href="#何为登录？" class="headerlink" title="何为登录？"></a>何为登录？</h2><p>众所周知，http是一个无状态协议。何为无状态？举几个有状态协议的例子，譬如TCP协议，需要三次握手，握手完成后双方及<strong>建立了连接</strong>，可以互相传输数据，传输完成后会<strong>断开连接</strong>。在譬如websocket，是一个全双工协议，也需要双方建立连接与断开连接。可曾听说过<strong>断开http连接</strong>？好像没有这回事吧，只有这次http请求200了，还是500报错了这种说法，因为http是无状态的，这次发的http请求与下一次并没有联系，也就不存在断开的概念。</p>
<p>看这样的场景，我需要访问某个网站的属于我的数据了，我发了一个http请求，这次http带有了用户凭据（用户密码），被认证为有权限访问资源，ok，获取到了，那下次再访问这个资源，难道我还需要再输一遍密码么，那也太麻烦了。我怎么样才能让对方知道，我输过密码认证成功是我本人了，就算做我进入“登录状态”了呢？</p>
<p>于是，有了这样一个方案，认证成功后，服务端（对方网站服务器）与客户端（我的浏览器）都记录下同一个值，这个值一般就叫做”JSESSIONID”。如何记录？服务端认证成功，便生成这个值存于其本地，并将其塞入我的Cookie，返回给我，我每次后续的http请求，Cookie都带上这个”JSESSIONID”，服务端找到本地对应的Session信息校验这个Cookie的有效性（真伪&#x2F;是否到期），有效则返回我的受保护资源。这样，我和目标网站之间就在多个无状态的http请求之间维护出一个登陆状态，靠的就是这个Session值。</p>
<p>然而，这样的方案是有局限性的，Cookie只在同域名下有效，而对方名下有多个网站，都用的一套的用户名密码，我在切换网站时却要重新输入密码，因为域名不同，Cookie失效了，”JSESSIONID”无法带过去了。怎么办？单点登录得出马了。</p>
<h2 id="何为单点登录？"><a href="#何为单点登录？" class="headerlink" title="何为单点登录？"></a>何为单点登录？</h2><p>单点登录（Single Sign On），简称为SSO，即在用户登录一次，即可直接获取多个相互信任的应用（服务）的受保护资源，而无需再次进行登录认证。</p>
<h2 id="单点登录方案"><a href="#单点登录方案" class="headerlink" title="单点登录方案"></a>单点登录方案</h2><p>单点登录常见的几种方案：</p>
<ol>
<li>同域名</li>
<li>共享Session</li>
<li>CAS</li>
<li>oauth2</li>
<li>SAML</li>
<li>……</li>
</ol>
<h3 id="同域名"><a href="#同域名" class="headerlink" title="同域名"></a>同域名</h3><p>前面说的，Session存在于服务端，并将对应的”JSESSIONID”存于用户的Cookie。这就带来了两个问题：</p>
<ol>
<li>不同域名，Cookie会失效</li>
<li>一台应用登录后，另一台并没有对应的Session</li>
</ol>
<p>第一个问题好办啊，把所有应用都放在同一个域名下不就可以了么，要知道，Cookie是可以在子域名下共享的，譬如，aaa.com下的Cookie可以在app1.aaa.com何app2.aaa.com下共存，这样，如果多个域名都指向同一台服务器，也没有问题二，那么多域名单点登录问题就解决了。</p>
<p><img src="https://i.loli.net/2021/10/22/ep5rTWFE3iD6gQo.png" alt="image-20211022143454444"></p>
<p>可是，一般后端应用都不止一台，域名与应用也至少是1:1的关系，这样，问题二的存在还是不能实现单点登录。接下来看第二个方案，使用token的方式。</p>
<p>我们判断用户认证信息不再直接通过Session对象，在Main模块，也就是认证模块，会生成一个Token放到Cookie中，其他子应用则负责解析这个Token，如果是用的Spring Security，一般这个工作会交给<code>RememberMeAuthenticationFilter</code>去做，它会根据配置的token key自动解析出对应token值，并生成对应用户的局部Session。</p>
<p>这里的token可以采用JWT，携带一部分用户信息，减轻服务器查询用户信息的压力，可以使用JWS保证JWT的安全性。</p>
<p><img src="https://i.loli.net/2021/10/25/PMk2BLFYNjonsTw.png" alt="image-20211025160630024"></p>
<h4 id="单点登出"><a href="#单点登出" class="headerlink" title="单点登出"></a>单点登出</h4><p>由于用户登录信息存储在Cookie，所以直接Set-Cookie对应字段为空即可。</p>
<h3 id="共享Session"><a href="#共享Session" class="headerlink" title="共享Session"></a>共享Session</h3><p>应用不止一台，那么在某一台登录，生成的Session也同步到其他的应用，可行么？当然可以，Session一般是存在内存当中的，只要把它从内存迁移出来，放到一个统一的地方，所有应用都从这一处来获取Session，与Cookie带过来的JSESSIONID信息对比不久可以了么。</p>
<p>Spring已经造好了轮子，Spring-Session就是一个共享Session的组件，可以把Session存到Redis中去，就可以实现一处生成Session多处使用了。</p>
<p>这样，前面提到的两个问题就都解决了。</p>
<p><img src="https://i.loli.net/2021/10/22/4Nk3YwLAO2hqxE9.png" alt="image-20211022164616538"></p>
<p>但是，如果是不同域名下的应用呢，二级域名也不一样，比如app1.aaa.com和app2.bbb.com，如何实现单点登录？目前来说有下面几种方案。有很多种协议，比如Token，CAS，OpenID，OAuth2，SAML等等。</p>
<h4 id="单点登出-1"><a href="#单点登出-1" class="headerlink" title="单点登出"></a>单点登出</h4><p>清楚用户对应的Session对象即可。</p>
<h3 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h3><p>CAS是一套企业范围的单点登录方案，即单点登录应用与受信任应用都是属于一个企业的，登录范围也是在该企业下的所有应用。</p>
<h4 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h4><p>CAS协议下，存在几个概念先明确一下。</p>
<h5 id="User"><a href="#User" class="headerlink" title="User"></a>User</h5><p>这个好理解，就是受保护资源的所有者。</p>
<h5 id="CAS-Server"><a href="#CAS-Server" class="headerlink" title="CAS Server"></a>CAS Server</h5><p>负责验证用户并授予用户访问应用程序的权限。一般只存在一个CAS服务器。</p>
<h5 id="CAS-Client"><a href="#CAS-Client" class="headerlink" title="CAS Client"></a>CAS Client</h5><p>一般会存在多个CAS客户端。其负责保护所在的CAS应用，并从CAS服务器检索授权用户的身份信息。</p>
<h5 id="TGC-Ticket-granting-cookie"><a href="#TGC-Ticket-granting-cookie" class="headerlink" title="TGC(Ticket-granting cookie)"></a>TGC(Ticket-granting cookie)</h5><p>存在于用户与CAS服务器之间的Cookie，用于存放用户认证凭证。</p>
<h5 id="TGT-Ticket-Granting-Ticket"><a href="#TGT-Ticket-Granting-Ticket" class="headerlink" title="TGT(Ticket Granting Ticket)"></a>TGT(Ticket Granting Ticket)</h5><p>一个Cookie值，存于TGC中，用于维持用户与CAS服务器之间的会话，一般叫这个会话为<strong>SSO session</strong>。</p>
<p><strong>ST(Service Ticket)</strong></p>
<p>用户可以访问某个受保护服务的凭据（直译过来的话是<em><strong>服务票据</strong></em>）。这个ST是生成TGT之后，由CAS Server颁发的。</p>
<h4 id="关键逻辑"><a href="#关键逻辑" class="headerlink" title="关键逻辑"></a>关键逻辑</h4><p>首先只维持用户与CAS Server之间的登录状态(SSO Session)。</p>
<p>然后，由于子应用都信任于CAS Server，所以CAS Server颁发一个TGT和一个ST给用户，TGT给用户用来维持其与CAS之间的登录状态。</p>
<p>用户拿到了ST，使用ST去访问子应用(app1,app2)，子应用去与关联的CAS Server核验该ST是否有效，如果有效，从CAS Server获取用户身份信息，并于用户生成局部Session，设置自己域名的JSESSIONID。</p>
<p>用户Cookie使用子应用的JSESSION访问子应用受保护资源。</p>
<p>整个流程时序图如下：</p>
<p><img src="https://i.loli.net/2021/10/25/1utsRxE3fLDnaCI.png" alt="https://apereo.github.io/cas/4.2.x/images/cas_flow_diagram.png"></p>
<p>流程图获取有些复杂，需要耐心地一步步过一遍，有个印象。其实实现起来并非那么麻烦，有现成的CAS框架，比如Yale大学发起的一个单点登录项目，全名为<strong>Central Authentication Service</strong>，也简称CAS。其中提供了多种单点登录协议的实现，CAS协议就是其中一种。具体可见<a href="https://www.apereo.org/projects/cas%E3%80%82">https://www.apereo.org/projects/cas。</a></p>
<p>或者，我们可以借鉴一下CAS的逻辑，实现一套自己的CAS登录逻辑。关键点，就是流程图中提到的几个EndPoint：</p>
<ol>
<li><p><code>GET &#123;casServer&#125;/cas/login?service=app1</code></p>
<p>从受保护app1重定向到CAS服务器的登录界面。注意，service内容是URL encoded的。</p>
</li>
<li><p><code>POST &#123;casServer&#125;/cas/login</code></p>
<p>用于CAS服务器作为SSO登录的post接口。</p>
</li>
<li><p><code>GET &#123;casClient&#125;?ticket=ST-123456</code></p>
<p>可以在CAS客户端定义一个Filter，去捕捉当前URI是否存在ST，如果存在，则到CAS Server去验证它。</p>
</li>
<li><p><code>GET &#123;casServer&#125;/serviceValidate?service=app1&amp;ticket=ST-123456</code></p>
<p>CAS服务器通过这个endPoint来验证ST是否有效，有效则通过XML-Document方式返回用户信息给CAS客户端。</p>
</li>
</ol>
<p>这个ST是可以存储在LocalStorage中的，可以绕过跨域问题。</p>
<p>这三个实现的差不多的话，基本的CAS逻辑也就完成了。</p>
<h4 id="单点登出-2"><a href="#单点登出-2" class="headerlink" title="单点登出"></a>单点登出</h4><p>CAS单点登出相较于之前的略微麻烦些，由于用户在每个CAS Client所处应用上都有局部Session以及对应Cookie，所以需要CAS Server调用所有CAS Client提供的登出API，实现全部登出。</p>
<h3 id="OAuth2"><a href="#OAuth2" class="headerlink" title="OAuth2"></a>OAuth2</h3><p>关于OAuth2协议，详细的介绍可以参考<a href="https://datatracker.ietf.org/doc/html/rfc6749">https://datatracker.ietf.org/doc/html/rfc6749</a></p>
<h4 id="相关概念-1"><a href="#相关概念-1" class="headerlink" title="相关概念"></a>相关概念</h4><p>OAuth2下下有以下几个角色：</p>
<h5 id="resource-owner-资源所有者"><a href="#resource-owner-资源所有者" class="headerlink" title="resource owner(资源所有者)"></a>resource owner(资源所有者)</h5><p>官方定义为<strong>能够授予对受保护资源的访问权限的实体</strong>，这个实体不一定是指代人，或许他也是台后端服务器。如果resource owner指代的是人的话，又有个别名，叫做<strong>end-user</strong>。</p>
<h5 id="resource-server-资源服务器"><a href="#resource-server-资源服务器" class="headerlink" title="resource server(资源服务器)"></a>resource server(资源服务器)</h5><p>受保护资源所在的服务器端，它能够接收用户传过来的access_token，返回受保护资源。</p>
<h5 id="client-客户端"><a href="#client-客户端" class="headerlink" title="client(客户端)"></a>client(客户端)</h5><p>client是经过了resource owner授权的，用来访问resource server的应用。其持有的是用户的授权信息。</p>
<h5 id="authorization-server-授权服务器"><a href="#authorization-server-授权服务器" class="headerlink" title="authorization server(授权服务器)"></a>authorization server(授权服务器)</h5><p>验证用户凭证成功并且接收用户授权后，authorization server将向client发放access_token。</p>
<h4 id="关键逻辑-1"><a href="#关键逻辑-1" class="headerlink" title="关键逻辑"></a>关键逻辑</h4><p>OAuth2本身其实不是用来做单点登录的，而是用于将用户权限授予客户端。用它也可以实现单点登录，将多个子应用均作为受信任的resource server，只要用户拥有了access_token，就可以访问所有子应用资源。</p>
<p><img src="https://i.loli.net/2021/10/25/pe7z5BGtn39jJ6o.png" alt="image-20211025151012509"></p>
<p>OAuth2有几种模式，包括<strong>授权码模式（Authorization Code Grant）</strong>，<strong>隐式授权模式（Implicit Grant）</strong>，<strong>资源所有者密码模式（Resource Owner Password Credentials Grant）</strong>，以及<strong>客户端凭证模式（Client Credentials Grant）</strong>。这里简单讲下授权码模式，也是最复杂、使用度最高的一种模式。大致流程如下：</p>
<p><img src="https://i.loli.net/2021/10/25/T2Juc9YKoLaI5fP.png" alt="image-20211025151215270"></p>
<p>简单来说：</p>
<ol>
<li><p>client不属于我，不能直接访问我受Authorization Server保护的资源。</p>
</li>
<li><p>于是，client把它的身份信息（e.g. client-id,client-secret etc.）在authorization server进行了注册。</p>
</li>
<li><p>并且在我第一次使用此client时，client会向authorization server发送认证请求。</p>
</li>
<li><p>authorization server一般会通过重定向的方式，把我的浏览器重定向到它的登录页。我在这个登录页提交我的身份凭据（用户名、密码）。</p>
</li>
<li><p>authorization server通过了认证，把我的页面重定向到授权页，我可以选择授予client哪些权限（头像、联系方式等）。</p>
</li>
<li><p>我向authorization server提交了授权请求，授权服务器给我一个授权码，并重定向到client的认证url。</p>
</li>
<li><p>client获取到了授权码，向Authorization Server索要access_token。</p>
</li>
<li><p>client获得并存储access_token，使用它来访问resource server。</p>
</li>
</ol>
<p>整个过程就是resource owner把受保护权限赋予client的过程。</p>
<p>获得了access_token，也就可以用来访问所有的子应用了。这里token并非存储在Cookie，而是一般存储在浏览器Local Storage中，所以并无跨域问题。</p>
<p>resource server一般会读取authorization server库中存储的token，看是否过期来验证token，亦或者是token使用JWS，自带过期时间，且共要加密与签名的存在保证了JWS不可伪造，可以直接判断token是否有效。</p>
<p>以下时序图引用自<a href="https://lotabout.me/2020/OAuth-2-workflow/">理解 OAuth 2.0 认证流程</a></p>
<p><img src="https://i.loli.net/2021/10/25/yEdHz1soRTPNFJL.png" alt="image-20211025202327358"></p>
<h4 id="单点登出-3"><a href="#单点登出-3" class="headerlink" title="单点登出"></a>单点登出</h4><p>相较于CAS，OAuth2的单点登出更为麻烦，因为client一般都是第三方的，client会注册到authorization server，但authorization server并无法去调用client。如果access_token被持久化了倒还好，将用户对应持久层的token置为失效即可，下次验证token即不通过。但如果并没有持久化，比如使用的是JWS，就只能由客户端自己去清除当前client的access_token，也无法访问到其他所有client。所以比较棘手，只能等对应的access_token自己失效。</p>
<h4 id="与CAS对比"><a href="#与CAS对比" class="headerlink" title="与CAS对比"></a>与CAS对比</h4><p>CAS下，受保护资源是属于客户端的。用户访问客户端，客户端通过CAS服务器来验证该用户是否有权访问自己的资源。而在OAuth2下，受保护资源是属于服务端的。用户需要让客户端知道，这个客户端是否有权访问用户位于服务端的数据。</p>
<p>这是CAS的大致流程，CAS Client用于保护所在服务器的资源，一般也是位于服务端。</p>
<p><img src="https://i.loli.net/2021/10/25/f3Tr9GHPvolBwkh.png" alt="image-20211025160151996"></p>
<p>而OAuth2下，Client是独立的，它可以在手机上，浏览器上，PC软件上（经常用到的，用网易账号登录有道云笔记pc端，这里有道云笔记软件就是client，访问的网易云authorization server，获取我在网易云的头像等信息），又或者是另一个独立的后端服务器上，纯纯的客户端。</p>
<p><img src="https://miro.medium.com/max/1050/1*ULF38OTiNJNQZ4lHQZqRwQ.png" alt="img"></p>
<p>遗憾的是，OAuth2是一个授权协议，client最终拿到的，是用户的权限范围，而非用户本身的详细信息。如果client就需要用户详细信息了，该怎么办？</p>
<p>于是，在OAuth2的基础上，又出现了另一个协议：OIDC。</p>
<h3 id="OIDC-OpenID-Connection"><a href="#OIDC-OpenID-Connection" class="headerlink" title="OIDC(OpenID Connection)"></a>OIDC(OpenID Connection)</h3><p>看起来好像很高大上，其实就是在OAuth2的基础上再封装了一层，可以理解为加强版OAuth2，使OAuth2具备了认证能力。其中新增了几个概念：</p>
<h4 id="相关概念-2"><a href="#相关概念-2" class="headerlink" title="相关概念"></a>相关概念</h4><h5 id="OpenID-Provider"><a href="#OpenID-Provider" class="headerlink" title="OpenID Provider"></a>OpenID Provider</h5><p>负责签发ID token。也就是authorization server。</p>
<h5 id="ID-token"><a href="#ID-token" class="headerlink" title="ID token"></a>ID token</h5><p>一个JWT格式的字符串，存储了用户的一些基本信息.</p>
<h5 id="end-user"><a href="#end-user" class="headerlink" title="end-user"></a>end-user</h5><p>不同于OAuth2的resource owner，这里具体到了，资源所有者就是人。</p>
<h5 id="userinfo-endpoint"><a href="#userinfo-endpoint" class="headerlink" title="userinfo endpoint"></a>userinfo endpoint</h5><p>用户信息端点，位于authorization server，用于返回用户更加详细的认证信息。</p>
<h5 id="scope标准化"><a href="#scope标准化" class="headerlink" title="scope标准化"></a>scope标准化</h5><p>scope中必须带有openid。</p>
<h5 id="Claim"><a href="#Claim" class="headerlink" title="Claim"></a>Claim</h5><p>终端用户信息字段。</p>
<h4 id="单点登出-4"><a href="#单点登出-4" class="headerlink" title="单点登出"></a>单点登出</h4><p>同OAuth2的问题，token未持久化，且分布在用户代理，难以在authorization server统一清除，需要一些额外的开发量来实现。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>大概列举了几种实现SSO的方式，各有千秋，还是要具体情况具体分析，适合业务场景的才是最好的方案。</p>
<table>
<thead>
<tr>
<th>方案</th>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody><tr>
<td>同域名</td>
<td>开发成本低，理解难度小，维护成本低。</td>
<td>分布式场景支持性较差，很多应用非同域名。<br/>存放于Cookie，安全性低。<br/>用户如果关闭Cookie则直接无法使用。</td>
</tr>
<tr>
<td>共享Session</td>
<td>降低服务器内存开销。分布式支持性较好。</td>
<td>维护成本较高，需要管理缓存集群。</td>
</tr>
<tr>
<td>CAS</td>
<td>分布式架构下支持性很好，适合企业内部应用间互相认证。</td>
<td>架构较为复杂，开发成本较高。</td>
</tr>
<tr>
<td>OAuth2&#x2F;OIDC</td>
<td>分布式架构下支持性很好，基于JWS可减轻服务器压力。<br/>适用于需要将企业内部应用资源开发给第三方时使用。</td>
<td>架构较为复杂，开发成本高，单点退出比较难搞。</td>
</tr>
</tbody></table>
<p>还有其他的SSO Protocol，例如SAML，还没研究过，所以暂时不总结了。。。以上内容大多是最近学习的内容，包含了不少自己的理解，所以可能会有些错误，实际开发时还需要多翻阅官方手册。</p>
]]></content>
      <categories>
        <category>后端</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>sso</tag>
      </tags>
  </entry>
  <entry>
    <title>常见端口汇总</title>
    <url>/2020/01/07/%E5%B8%B8%E8%A7%81%E7%AB%AF%E5%8F%A3%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<!-- toc -->

<span id="more"></span>

<h1 id="常见端口汇总："><a href="#常见端口汇总：" class="headerlink" title="常见端口汇总："></a>常见端口汇总：</h1><h4 id="Hadoop"><a href="#Hadoop" class="headerlink" title="Hadoop"></a>Hadoop</h4><ul>
<li>50070：HDFS WEB UI端口</li>
<li>8020 ： 高可用的HDFS RPC端口</li>
<li>9000 ： 非高可用的HDFS RPC端口</li>
<li>8088 ： Yarn 的WEB UI 接口</li>
<li>8485 ： JournalNode 的RPC端口</li>
<li>8019 ： ZKFC端口</li>
</ul>
<h4 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h4><ul>
<li>2181 ： 客户端连接zookeeper的端口</li>
<li>2888 ： zookeeper集群内通讯使用，Leader监听此端口</li>
<li>3888 ： zookeeper端口 用于选举leader</li>
</ul>
<h4 id="Hbase"><a href="#Hbase" class="headerlink" title="Hbase"></a>Hbase</h4><ul>
<li>60010：Hbase的master的WEB UI端口</li>
<li>60030：Hbase的regionServer的WEB UI 管理端口</li>
</ul>
<h4 id="Hive"><a href="#Hive" class="headerlink" title="Hive"></a>Hive</h4><ul>
<li>9083  :  metastore服务默认监听端口</li>
<li>10000：Hive 的JDBC端口</li>
</ul>
<h4 id="Spark"><a href="#Spark" class="headerlink" title="Spark"></a>Spark</h4><ul>
<li>7077 ： spark 的master与worker进行通讯的端口  standalone集群提交Application的端口</li>
<li>8080 ： master的WEB UI端口  资源调度</li>
<li>8081 ： worker的WEB UI 端口  资源调度</li>
<li>4040 ： Driver的WEB UI 端口  任务调度</li>
<li>18080：Spark History Server的WEB UI 端口</li>
</ul>
<h4 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h4><ul>
<li>9092： Kafka集群节点之间通信的RPC端口</li>
</ul>
<h4 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h4><ul>
<li>6379： Redis服务端口</li>
</ul>
<h4 id="CDH"><a href="#CDH" class="headerlink" title="CDH"></a>CDH</h4><ul>
<li>7180： Cloudera Manager WebUI端口</li>
<li>7182： Cloudera Manager Server 与 Agent 通讯端口</li>
</ul>
<h4 id="HUE"><a href="#HUE" class="headerlink" title="HUE"></a>HUE</h4><ul>
<li>8888： Hue WebUI 端口</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>环境搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>探究OCI镜像与Docker镜像的联系</title>
    <url>/2021/03/08/%E6%8E%A2%E7%A9%B6OCI%E9%95%9C%E5%83%8F%E4%B8%8EDocker%E9%95%9C%E5%83%8F%E7%9A%84%E8%81%94%E7%B3%BB/</url>
    <content><![CDATA[<h2 id="探究OCI镜像与Docker镜像的联系"><a href="#探究OCI镜像与Docker镜像的联系" class="headerlink" title="探究OCI镜像与Docker镜像的联系"></a>探究OCI镜像与Docker镜像的联系</h2><h3 id="从熟知的Docker出发"><a href="#从熟知的Docker出发" class="headerlink" title="从熟知的Docker出发"></a>从熟知的Docker出发</h3><p>目前，容器化技术已经广泛普及了，而谈到容器，我想大多数人的第一反应就是Docker了。</p>
<p>Docker给我们带来了很多好处，优化了CI&#x2F;CD流程，可以实现云原生，纳入容器编排等等。</p>
<p>回想下Docker中的概念，我们是如何使用Docker的？一般开发人员会编写Dockerfile，用来定义一个镜像，然后将Dockerfile生成的镜像推送到远程仓库，最终根据需要通过pull镜像生成容器运行起来。如果是云原生应用，那这个pull的动作可能是k8s做的。同时，k8s集群的node环境中需要有Docker守护进程。</p>
<p>可以说，Docker的功能十分强大，包裹了整个云原生应用的开发生命周期，似乎我们如果要使用容器技术就离不开它，可事实真的是这样么？</p>
<p>最近，容器编排界的事实标准k8s发布了这样一则公告：<strong>自 v1.20 起放弃对 Docker 的支持，届时用户将收到 Docker 弃用警告，并需要改用其他容器运行时。</strong></p>
<blockquote>
<p>Docker support in the kubelet is now deprecated and will be removed in a future release. The kubelet uses a module called “dockershim” which implements CRI support for Docker and it has seen maintenance issues in the Kubernetes community. We encourage you to evaluate moving to a container runtime that is a full-fledged implementation of CRI (v1alpha1 or v1 compliant) as they become available. (<a href="https://github.com/kubernetes/kubernetes/pull/94624">#94624</a>, <a href="https://github.com/dims">@dims</a>) [SIG Node]</p>
<p>引用自<a href="https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG/CHANGELOG-1.20.md#deprecation">K8S官方文档</a></p>
</blockquote>
<p>k8s放弃了kubelet中对Docker的支持，鼓励我们替换为个完整实现CRI的容器运行时。虽然只是放弃了“Docker的容器运行时”，但显而易见，Docker并非不可取代的。</p>
<p>容器运行时只是整个云原生应用生命周期依赖的一个点而已，如果以后整个生命周期都弃用了Docker，那原先构建的镜像还能使用么？如何能继续运行呢？</p>
<p>这就需要容器技术将每个功能点剥离，并形成行业规范，镜像应该怎么描述、容器运行时应该如何解析镜像与运行、网络应该如何构建，都需要一个统一的接口，</p>
<p>早在好几年前，业界就意识到了这个问题，从而诞生了OCI。</p>
<h3 id="OCI简介"><a href="#OCI简介" class="headerlink" title="OCI简介"></a>OCI简介</h3><blockquote>
<p><a href="https://opencontainers.org/faq/">https://opencontainers.org/faq/</a></p>
</blockquote>
<p>OCI全称Open Container Initiative，翻译过来就是开放容器标准。为了减少项目的摩擦而导致的内耗，以及用户渴求一个容器技术不强绑定于一个具体厂商，且能跨越各种硬件、操作系统、CPU架构、公有云，2015年Docker和当时其他“友商”进行了讨论，大家开发容器技术，都得按照同一个模子来，就像软件开发时定一个接口，具体实现交由开发人员一样。Docker构建的镜像，也可以发布到其他容器厂商的镜像仓库，并run在其他厂商的运行时，得益于大家都是先了这个接口。</p>
<p>OCI包含了以下两部分：</p>
<ul>
<li><p><strong>镜像规范（image-spec）</strong></p>
<p>规定应该以何种格式存储、分发镜像。</p>
<p>也就是，被打成的镜像内容具体需要长什么样。目录结构，结构信息元文件、版本等等，应该如何去定义，在哪定义。</p>
</li>
<li><p><strong>运行时规范（runtime-spec）</strong></p>
<p>规定了如何运行在磁盘上解压的“文件系统包”。</p>
<p>什么是文件系统包？比如，将linux整个系统，用tar工具打成了一个tar.gz包。这个包就是“文件系统包”。它将包含在镜像当中，当解压出来可被OCI Runtime运行了，就被称为“<strong>OCI Runtime Bundle</strong>”。</p>
</li>
</ul>
<h3 id="内容可寻址文件存储"><a href="#内容可寻址文件存储" class="headerlink" title="内容可寻址文件存储"></a>内容可寻址文件存储</h3><p>在讲镜像规范前，需要学习一个知识点：<strong>内容可寻址文件存储</strong>，简称<strong>“CAS”</strong>。</p>
<p>我们平时使用的系统，如windows，linux，均是通过路径来确定一个文件内容，比如<code>D:/temp/temp.txt</code>。访问文件的方式也是路径加上文件名。这样会有一个问题，就是无法识别这个文件是否被修改了，它还是最初的它么？当然，文件右键可以看到修改时间，但这并非存储本省的寻址提供的能力，如果我没有权限查看它的修改时间呢？是不是就不能知道了。于是，存在这样一种存储方式，我们通过路径就可以确定一个文件，且这个文件一定是我们需要的，未被修改的文件，就是<strong>内容可寻址文件存储</strong>。</p>
<h4 id="CAS如何实现"><a href="#CAS如何实现" class="headerlink" title="CAS如何实现"></a>CAS如何实现</h4><p>如何唯一标识一个文件？一般会想到使用<strong>文件摘要算法</strong>。常见的算法如SHA256，SHA512。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@skywater ~]# sha256sum temp.sh </span><br><span class="line">f6484a310090a07d701b33b9a3df060dc157a510408a5e933b86c6a40aec0cf2  temp.sh</span><br></pre></td></tr></table></figure>

<p><strong>CAS</strong>就是使用了文件摘要算法，如果我们将系统中所有文件的摘要作为key，而文件内容作为value，就可以形成一张hash表。对整个系统目录进行打包后再hash，作为一个tag，那么这个tag将会保证内容是不变的。</p>
<p>而换句话来说，如果一个系统经常发生变化，那么就不适合使用这样的存储方式，应为变动会引起hash变化，导致重新计算的负担。</p>
<p>容器技术中的镜像文件就恰恰有这样一个需求，那就是<strong>保证不可变性</strong>。我今天使用了这个镜像作为基础建立了另一个镜像，明天这个基础居然被人改了？？导致我的应用出现了完全不可预知的问题，这是绝对不允许的。所以，<strong>CAS</strong>很适合作为镜像的存储方式。</p>
<h3 id="image-spec（镜像标准）"><a href="#image-spec（镜像标准）" class="headerlink" title="image-spec（镜像标准）"></a>image-spec（镜像标准）</h3><p>OCI image-spec最早就是由当时的容器领头羊Docker贡献出来的，所以在后来的演化过程中，Docker镜像本身也是符合OCI规范的。</p>
<p>整体来看OCI image-spec，需要包含以下内容：</p>
<ul>
<li><p><a href="https://github.com/opencontainers/image-spec/blob/main/manifest.md">Image Manifest</a> </p>
<p>描述构成容器镜像的组件的清单文件</p>
</li>
<li><p><a href="https://github.com/opencontainers/image-spec/blob/main/image-index.md">Image Index</a></p>
<p>图像清单的注释索引 </p>
</li>
<li><p><a href="https://github.com/opencontainers/image-spec/blob/main/image-layout.md">Image Layout</a></p>
<p>表示图像内容的文件系统布局 </p>
</li>
<li><p><a href="https://github.com/opencontainers/image-spec/blob/main/layer.md">Filesystem Layer</a></p>
<p>描述容器文件系统的变更集 </p>
</li>
<li><p><a href="https://github.com/opencontainers/image-spec/blob/main/config.md">Image Configuration</a></p>
<p>定义了运行时bundle中的layer顺序以及配置信息</p>
</li>
<li><p><a href="https://github.com/opencontainers/image-spec/blob/main/conversion.md">Conversion</a></p>
<p>将定义标签转换成实际的运行时字段以及指令，比如image中的<code>Config.WorkingDir</code>转换为运行时的<code>process.cwd</code></p>
</li>
<li><p><a href="https://github.com/opencontainers/image-spec/blob/main/descriptor.md">Descriptor</a></p>
<p>元数据描述对象，使用key-value形式表示。</p>
<p>必须存在的属性包括：<code>mediaType</code>，<code>digest</code>，<code>size</code>。</p>
<p>可选属性包括<code>urls</code>，<code>annotations</code>，<code>data</code>。</p>
</li>
</ul>
<p>当然，作为具体的OCI image-spec实现，Docker也会有一些不一样的点。</p>
<p>这里将OCI标准与Docker镜像进行对比，把OCI image-spec中的标识符一一对应到Docker镜像，这样可以更好的理解OCI。</p>
<h4 id="媒体类型（mediaType）"><a href="#媒体类型（mediaType）" class="headerlink" title="媒体类型（mediaType）"></a>媒体类型（mediaType）</h4><p>媒体类型常见于http请求的hearder中，用来定义所指向的资源类型。通过mediaType，我们就可以使用正确的方式去解析数据。如果是gzip类型，那就需要用tar工具解压，如果是excel类型，就需要用Office、WPS之类的软件打开。镜像文件、以及镜像文件中包含的各种内容都有它们对应的mediaType。</p>
<p>后续涉及到容器内容各个点时再明确每个内容对应的媒体类型。</p>
<p>各媒体类型间的依赖关系如下：</p>
<p><img src="https://github.com/opencontainers/image-spec/raw/main/img/media-types.png" alt="img"></p>
<h4 id="镜像结构"><a href="#镜像结构" class="headerlink" title="镜像结构"></a>镜像结构</h4><p><img src="https://s2.loli.net/2022/03/07/1GFZmH7u3CcznsX.png" alt="img"></p>
<blockquote>
<p>该图引用自<a href="https://guide.daocloud.io/dcs/docker-9153976.html">https://guide.daocloud.io/dcs/docker-9153976.html</a></p>
</blockquote>
<p>Docker镜像由Dockerfile生成，通常会选择一个镜像作为基础镜像，如图上的ubuntu:14.04，随后根据我们的指令，向上依次堆叠层（layer）。最顶层为Read-write Layer，即读写层，可以挂在到宿主机。</p>
<p>或许这么讲还是有些抽象，我们直接把Docker的image下载到本地来分析。</p>
<p>构建使用的Dockerfile如下。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">8</span>-jdk-alpine</span><br><span class="line"><span class="keyword">MAINTAINER</span> <span class="string">&quot;skywater&quot;</span></span><br><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> description=<span class="string">&quot;testImage&quot;</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">mkdir</span> /tmp/logs</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./target/*.jar /app/app.jar</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;java&quot;</span>, <span class="string">&quot;-jar&quot;</span>, <span class="string">&quot;app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<p>执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@skywater docker]# docker save 106.15.92.100:5000/lts/springboot-demo:v2 | gzip &gt; springboot-demo.tar.gz</span><br><span class="line">[root@skywater docker]# mkdir springboot-demo &amp;&amp; tar -zxvf springboot-demo.tar.gz -C springboot-demo</span><br><span class="line">[root@skywater docker]# tree springboot-demo</span><br></pre></td></tr></table></figure>

<p>解压后目录结构</p>
<p><img src="https://s2.loli.net/2022/03/07/HTjNYirAMGcbSFe.png" alt="image-20220307212727000"></p>
<p>可以看到，镜像内容中包含了一个manifest，以及多个包含了layer.tar的文件夹。这里每个layer.tar就对应了图上的每一层，排列顺序，以及层的配置信息，就在<code>manifest.json</code>以及每个文件夹中的<code>json</code>当中。</p>
<p>了解了镜像文件的大概结构，我们再对照OCI规范深入去看一下每一个文件的作用。</p>
<h4 id="Image-Layout"><a href="#Image-Layout" class="headerlink" title="Image Layout"></a>Image Layout</h4><p>这时一个整体结构的定义，OCI定义中，image内容结构需要包含以下内容：</p>
<p>index.json文件，oci-layout文件，以及blobs目录。</p>
<p>结构类似于：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">blobs</span><br><span class="line">  	|--- 987fads67897gadfas</span><br><span class="line">  	|--- 8908a80g7b65cvb223</span><br><span class="line">oci-layout</span><br><span class="line">index.json</span><br></pre></td></tr></table></figure>

<p>然而，从解压后的镜像内容来看，Docker目前没有适配这块规范，所以并没有这些文件与目录。</p>
<p>虽然Docker镜像并不完全符合OCI规范，譬如这里的image-layout，但并不意味着与OCI不兼容，OCI需要的信息，会以其他的结构展现在Docker镜像结构中。</p>
<p>如果需要获取的话，可以通过工具将docker镜像转换为oci镜像，使用skopeo工具：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">skopeo copy docker://springboot-demo:v1 oci:springboot-demo</span></span><br></pre></td></tr></table></figure>

<p>查看本地目录springboot-demo</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@skywater tmp]# tree springboot-demo/ --du</span><br><span class="line">springboot-demo/</span><br><span class="line">├── [   75877939]  blobs</span><br><span class="line">│   └── [   75877919]  sha256</span><br><span class="line">│       ├── [      19413]  099e5f0c6733b339ec37c98f725fae41b872ebc9064619f7f44ad93cf939f5ea</span><br><span class="line">│       ├── [        249]  0e735f96c2df7edc67964a683c77805c0285371c0e71bacd491f38011b29829b</span><br><span class="line">│       ├── [   73006326]  4b2f0c876f4462376e74633289dbbb6e32d5c542ef698bd9f6bf24e97ed22aaf</span><br><span class="line">│       ├── [    2842856]  74f1fcf320dc694abfb36b0c3a7383c09e15fc4edfe76102e71a3224f8ff1ed8</span><br><span class="line">│       ├── [        161]  782e025922b72ccca53e4a386c1f7b784e602294434d4bcc84786dccfc622e40</span><br><span class="line">│       ├── [       3556]  9e63d81810f866d774e2a5b8e6be8d4c283c462214d75be2eede7019d4b03303</span><br><span class="line">│       ├── [        136]  db69bb6d4d2aee35e87908bdafe2428b144513ff8c3b1d1f3744272d11717343</span><br><span class="line">│       └── [       1126]  e6c11218c3533a6c1314bfa3f55acf940d11830ce6e148f4c1004f2a6d508901</span><br><span class="line">├── [        187]  index.json</span><br><span class="line">└── [         31]  oci-layout</span><br><span class="line"></span><br><span class="line">    75878212 bytes used in 2 directories, 10 files</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>index.json</strong></p>
<p><img src="https://s2.loli.net/2022/03/08/kZbVKm6wORYdhUv.png" alt="image-20220308112923586"></p>
<p>其中将包含一个Image index对象，后续再详解Image Index。目前只需要知道，通过index.json就可以找到Image Index的hash位置即可。</p>
</li>
<li><p><strong>oci-layout</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@skywater springboot-demo]# cat oci-layout</span><br><span class="line">&#123;&quot;imageLayoutVersion&quot;: &quot;1.0.0&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>内容很简单，只有一个版本号，这个版本为整个OCI image文件目录布局结构的规划版本，目前使用的是1.0.0。</p>
</li>
<li><p><strong>blobs</strong></p>
<p>包含了使用hash进行查找的镜像配置文件、层内容等信息</p>
</li>
</ul>
<blockquote>
<p> 通过index.sjon，可以定位到各平台对应的manifest的hash位置。再通过manifest，可以找到image-config，而image-config中，又将包含各个layer的具体配置信息，这样就可以将所有内容串联起来，runtime也就知道了容器运行需要的所有基本信息。</p>
</blockquote>
<h4 id="Image-Index"><a href="#Image-Index" class="headerlink" title="Image Index"></a>Image Index</h4><p>镜像索引，这个内容是可选的，一个镜像可能适用于多个平台架构，单个manifest并不能满足要求，所以我们可以提供多个manifest组成一个Image Index，来实现跨平台。</p>
<p><a href="https://github.com/opencontainers/image-spec/blob/main/image-index.md">OCI对Image Index的定义</a>概览如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// 必选  </span></span><br><span class="line">  <span class="attr">&quot;schemaVersion&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 应该被使用</span></span><br><span class="line">  <span class="attr">&quot;mediaType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;application/vnd.oci.image.index.v1+json&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 必选</span></span><br><span class="line">  <span class="attr">&quot;manifests&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;mediaType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;application/vnd.oci.image.manifest.v1+json&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">7143</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;digest&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sha256:e692418e4cbaf90ca69d05a66403747baa33ee08806650b51fab815ad7fc331f&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;platform&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;architecture&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ppc64le&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;os&quot;</span><span class="punctuation">:</span> <span class="string">&quot;linux&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;mediaType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;application/vnd.oci.image.manifest.v1+json&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">7682</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;digest&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sha256:5b0bcabd1ed22e9fb1310cf6c2dec7cdef19f0ad69efa1f392e94a4333501270&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;platform&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;architecture&quot;</span><span class="punctuation">:</span> <span class="string">&quot;amd64&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;os&quot;</span><span class="punctuation">:</span> <span class="string">&quot;linux&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;annotations&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;com.example.key1&quot;</span><span class="punctuation">:</span> <span class="string">&quot;value1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;com.example.key2&quot;</span><span class="punctuation">:</span> <span class="string">&quot;value2&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>虽然Docker没有符合Image-Layout规范，但仍然可以找到Image-Layout中指向的Image Index。</strong></p>
<p>在我们上面springboot-demo的例子中体现不出来，没有做跨平台，我们可以换一个dockerhub中的镜像看下其中的内容。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@skywater ~]# docker manifest inspect nginx</span><br></pre></td></tr></table></figure>

<p>以Nginx镜像为例，可以看到一个媒体类型为<code>application/vnd.docker.distribution.manifest.list.v2+json</code>的manifest列表，其实就是对应了Image index，其中属性可以一一对应上。</p>
<p><img src="https://s2.loli.net/2022/03/08/8iE3jKtquHZnkDg.png" alt="image-20220308092044955"></p>
<p><img src="https://s2.loli.net/2022/03/08/gPRqIWsdzpNBw2r.png" alt="image-20220308094504456"></p>
<ul>
<li><p><strong>mediaType</strong></p>
<table>
<thead>
<tr>
<th>Docker</th>
<th>OCI</th>
</tr>
</thead>
<tbody><tr>
<td>application&#x2F;vnd.docker.distribution.manifest.list.v2+json</td>
<td>application&#x2F;vnd.oci.image.index.v1+json</td>
</tr>
</tbody></table>
<p>表示该文件是镜像清单文件。</p>
</li>
<li><p><strong>manifests</strong></p>
<p>manifest列表，对应<strong>特定平台</strong>的manifest，其中会包含platform信息，不同平台架构、系统需要有不同的镜像清单。</p>
<ul>
<li><p><strong>mediaType</strong></p>
<p>即为上文提到的Image Manifest媒体类型</p>
</li>
<li><p><strong>platform</strong></p>
<p>描述镜像运行的环境要求，类似于定义一个软件必须是windows 10 再能用的一样。</p>
</li>
</ul>
</li>
</ul>
<h4 id="Image-Manifest"><a href="#Image-Manifest" class="headerlink" title="Image Manifest"></a>Image Manifest</h4><p>通过Image Index，我们可以找到该镜像在当前平台系统对应的manifest。</p>
<p>Image Index是为了<strong>跨平台</strong>，而相反的，manifest的主要目的，是为<strong>特定架构和操作系统</strong>的<strong>单个容器映像</strong>提供<strong>配置和镜像层集</strong>。</p>
<p><a href="https://github.com/opencontainers/image-spec/blob/main/manifest.md#image-manifest-property-descriptions">OCI对manifest的定义</a>概览如下：</p>
<ul>
<li><p>必须属性</p>
<p><strong><code>schemaVersion</code><strong>，</strong><code>mediaType</code></strong> ，**<code>config</code>** ，**<code>layers</code>** ，<strong>layers下的<code>mediaType</code></strong> </p>
</li>
<li><p>可选属性</p>
<p><strong><code>annotations</code></strong></p>
</li>
</ul>
<p>OCI Image Manifest示例如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;schemaVersion&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;mediaType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;application/vnd.oci.image.manifest.v1+json&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;config&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;mediaType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;application/vnd.oci.image.config.v1+json&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">7023</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;digest&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sha256:b5b2b2c507a0944348e0303114d8d93aaaa081732b86451d9bce1f432a537bc7&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;layers&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;mediaType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;application/vnd.oci.image.layer.v1.tar+gzip&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">32654</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;digest&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sha256:9834876dcfb05cb167a5c24953eba58c4ac89b1adf57f28f2f9d09af107ee8f0&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;mediaType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;application/vnd.oci.image.layer.v1.tar+gzip&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">16724</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;digest&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sha256:3c3a4604a545cdc127456d94e421cd355bca5b528f4a9c1905b15da2eb4a4c6b&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;mediaType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;application/vnd.oci.image.layer.v1.tar+gzip&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">73109</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;digest&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sha256:ec4b8955958665577945c89419d1af06b5f7636b4ac3da7f12184802ad867736&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;annotations&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;com.example.key1&quot;</span><span class="punctuation">:</span> <span class="string">&quot;value1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;com.example.key2&quot;</span><span class="punctuation">:</span> <span class="string">&quot;value2&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>我们来找一找，Docker中的manifest.json是否包含了这些内容。</p>
<p>读取save到本地的Docker image中的manifest.json内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@skywater docker]# cat springboot-demo/manifest.json | jq</span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;Config&quot;: &quot;4a030f9340dfd2456fe7ddaa23dd65571eb2987c8c038e1482adf46fd48b3aa4.json&quot;,</span><br><span class="line">    &quot;RepoTags&quot;: [</span><br><span class="line">      &quot;springboot-demo:v1&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;Layers&quot;: [</span><br><span class="line">      &quot;1a58e6937db044ef6f2e2962a0dc7bef16a6c33fdfc5a0318c39092612a1bd1a/layer.tar&quot;,</span><br><span class="line">      &quot;c12f86d2a60fc27a1d93d555944262fda4ed66e3a3172ac45cd861151a0dc6c1/layer.tar&quot;,</span><br><span class="line">      &quot;98867178f60349f16652222772d086159a6d087fcd50bc32b9d75c23cd01ed8d/layer.tar&quot;,</span><br><span class="line">      &quot;91b1ccb4946286a411dc7e11717ad45e71b9235a6a18f6ec183f79ae3a3693bc/layer.tar&quot;,</span><br><span class="line">      &quot;cc2781c6b5a3376fcfae998304d99c071d5faa6630b13f50e85acfab759d4167/layer.tar&quot;,</span><br><span class="line">      &quot;4409a35858a53e68fd42b6ac63ab0c199ba220817ddc0436559467686f862042/layer.tar&quot;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>可以看到，配置文件以及layer目录均为hash值，也对应了之前所说的<strong>“内容可寻址文件存储”</strong>。</p>
<p>或者，可以使用docker的manifest命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@skywater springboot-demo]# docker manifest inspect --insecure 106.15.92.100:5000/lts/springboot-demo:v1</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/03/07/twSsnN7bgXOhd35.png" alt="image-20220307223018252"></p>
<ul>
<li><p><strong>schemaVersion</strong></p>
<p>代表为v2版本的manifest。ps：v1版本已废弃。</p>
</li>
<li><p><strong>mediaType</strong></p>
<p>第二个标识为上一章节提到的<strong>mediaType</strong>，为<code>application/vnd.docker.distribution.manifest.v2+json</code>，</p>
<p>而在OCI标准中，manifest的mediaType标准值为<code>application/vnd.oci.image.manifest.v1+json</code>，</p>
<p>略有差别，但OCI兼容Docker的这种mediaType。</p>
</li>
<li><p><strong>config</strong></p>
<p>对应OCI标准中的Image Configuration（镜像配置文件）。</p>
<p>这里镜像配置文件的格式为<code>application/vnd.docker.container.image.v1+json</code>，</p>
<p>对应OCI标准中的镜像格式为<code>application/vnd.oci.image.index.v1+json</code>。</p>
<p>OCI兼容Docker镜像配置文件格式。</p>
<p>通过manifest，<strong>可以定位到image config文件hash位置。</strong>这里获取到的hash为<code>4a030f9340dfd2456fe7ddaa23dd65571eb2987c8c038e1482adf46fd48b3aa4.json</code>，可以在镜像内容中找到该文件。后续再进行细节分析。</p>
</li>
<li><p><strong>layers</strong></p>
<p>一个Descriptor Array（描述符数组），描述了文件系统layer的布局，且必须符合堆栈顺序。</p>
<p>可以发现，下载下来的manifest.json中的layer的hash，和使用<code>docker manifest inspect</code>命令解析出来的不一样，原因是下载下来的是tar格式的bundle，而inspect的是tar.gzip格式。</p>
<ul>
<li><p>mediaType</p>
<p>可以看到，其mediaType为<code>application/vnd.docker.image.rootfs.diff.tar.gzip</code>。根据其提供的hash，可以在下载下来的镜像内容目录中，按顺序找到每个对应的layer.tar文件。</p>
</li>
</ul>
</li>
<li><p><strong>annotations</strong></p>
<p>这项在Docker的manifest中没有体现，可以理解为自己给manifest打上一些标记，内容自行定义，但需要符合key-value格式，以及<a href="https://github.com/opencontainers/image-spec/blob/main/annotations.md#rules">annotation rules</a>规范。</p>
</li>
</ul>
<p>回顾image manifest（镜像清单）的内容，其中定义了这个镜像清单的版本，镜像配置文件的地址，以及每个layer的地址、排列顺序。是一个镜像的整体概览文件。其中每个文件都有他们的mediaType，由于是docker镜像，所以mediaType中都含有docker的标识符（xxx.docker.xxx）。</p>
<h4 id="Image-Configuration"><a href="#Image-Configuration" class="headerlink" title="Image Configuration"></a>Image Configuration</h4><p>根据manifest内容，我们可以查找到该镜像的Image configuration文件。</p>
<p>OCI中，Image Configuration样例如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	// 可选，表示创建镜像的组合日期和时间</span><br><span class="line">    &quot;created&quot;: &quot;2015-10-31T22:22:56.015925234Z&quot;,</span><br><span class="line">    // 可选，表示创建镜像的作者</span><br><span class="line">    &quot;author&quot;: &quot;Alyssa P. Hacker &lt;alyspdev@example.com&gt;&quot;,</span><br><span class="line">    // 必填，表示此镜像运行需要的CPU架构</span><br><span class="line">    &quot;architecture&quot;: &quot;amd64&quot;,</span><br><span class="line">    // 必填，表示此镜像运行的系统</span><br><span class="line">    &quot;os&quot;: &quot;linux&quot;,</span><br><span class="line">    // 可选，将定义容器endpoint相关参数。</span><br><span class="line">    &quot;config&quot;: &#123;</span><br><span class="line">        &quot;User&quot;: &quot;alice&quot;,</span><br><span class="line">        &quot;ExposedPorts&quot;: &#123;</span><br><span class="line">            &quot;8080/tcp&quot;: &#123;&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Env&quot;: [</span><br><span class="line">            &quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;,</span><br><span class="line">            &quot;FOO=oci_is_a&quot;,</span><br><span class="line">            &quot;BAR=well_written_spec&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;Entrypoint&quot;: [</span><br><span class="line">            &quot;/bin/my-app-binary&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;Cmd&quot;: [</span><br><span class="line">            &quot;--foreground&quot;,</span><br><span class="line">            &quot;--config&quot;,</span><br><span class="line">            &quot;/etc/my-app.d/default.cfg&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;Volumes&quot;: &#123;</span><br><span class="line">            &quot;/var/job-result-data&quot;: &#123;&#125;,</span><br><span class="line">            &quot;/var/log/my-app-logs&quot;: &#123;&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;WorkingDir&quot;: &quot;/home/alice&quot;,</span><br><span class="line">        &quot;Labels&quot;: &#123;</span><br><span class="line">            &quot;com.example.project.git.url&quot;: &quot;https://example.com/project.git&quot;,</span><br><span class="line">            &quot;com.example.project.git.commit&quot;: &quot;45a939b2999782a3f005621a8d0f29aa387e1d6b&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 必填，定义image需要用到的layer的地址</span><br><span class="line">    &quot;rootfs&quot;: &#123;</span><br><span class="line">      &quot;diff_ids&quot;: [</span><br><span class="line">      	// layer归档的hash，顺序为layer从底到顶的顺序，即diff_ids[0]对应的layer处于image最底层</span><br><span class="line">        &quot;sha256:c6f988f4874bb0add23a778f753c65efe992244e148a1d2ec2a8b664fb66bbd1&quot;,</span><br><span class="line">        &quot;sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef&quot;</span><br><span class="line">      ],</span><br><span class="line">      // 必填，且必须是layers，验证时如果出现未知值将会抛出错误</span><br><span class="line">      &quot;type&quot;: &quot;layers&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 可选的，用来描述层的历史信息</span><br><span class="line">    &quot;history&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;created&quot;: &quot;2015-10-31T22:22:54.690851953Z&quot;,</span><br><span class="line">        &quot;created_by&quot;: &quot;/bin/sh -c #(nop) ADD file:a3bc1e842b69636f9df5256c49c5374fb4eef1e281fe3f282c65fb853ee171c5 in /&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;created&quot;: &quot;2015-10-31T22:22:55.613815829Z&quot;,</span><br><span class="line">        &quot;created_by&quot;: &quot;/bin/sh -c #(nop) CMD [\&quot;sh\&quot;]&quot;,</span><br><span class="line">        &quot;empty_layer&quot;: true</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;created&quot;: &quot;2015-10-31T22:22:56.329850019Z&quot;,</span><br><span class="line">        &quot;created_by&quot;: &quot;/bin/sh -c apk add curl&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>大体了解的OCI中的Image Configuration，我们来看下Docker中的有何区别。</p>
<p>首先需要找到Docker中的Image Configuration在哪，根据Manifest中的描述，其位置在<code>sha256:4a030f9340dfd2456fe7ddaa23dd65571eb2987c8c038e1482adf46fd48b3aa4</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@skywater springboot-demo]# ls -l|grep 4a030f9340d</span><br><span class="line">-rw-r--r-- 1 root root 4695 Feb 14 17:01 4a030f9340dfd2456fe7ddaa23dd65571eb2987c8c038e1482adf46fd48b3aa4.json</span><br></pre></td></tr></table></figure>

<p>可以看到，springboot-demo目录下确实有一个这个文件。</p>
<p>查看其内容：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;architecture&quot;</span><span class="punctuation">:</span> <span class="string">&quot;amd64&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\&quot;skywater\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;config&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Hostname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Domainname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;User&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;AttachStdin&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;AttachStdout&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;AttachStderr&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ExposedPorts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;8080/tcp&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Tty&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;OpenStdin&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;StdinOnce&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Env&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/lib/jvm/java-1.8-openjdk/jre/bin:/usr/lib/jvm/java-1.8-openjdk/bin&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;LANG=C.UTF-8&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;JAVA_HOME=/usr/lib/jvm/java-1.8-openjdk&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;JAVA_VERSION=8u212&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;JAVA_ALPINE_VERSION=8.212.04-r0&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Cmd&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Image&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sha256:2b6a6388a9a8cc96d4b34abcf222b981a9abd86e999b33697ad63ffbe3eadafb&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Volumes&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;WorkingDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/app&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Entrypoint&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;java&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;-jar&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;app.jar&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;OnBuild&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Labels&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;testImage&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;container&quot;</span><span class="punctuation">:</span> <span class="string">&quot;6dc97c1a3b1f527df5fd18460ce766e1960a0d7a4f07a013b884e74d4a5c79be&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;container_config&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Hostname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;6dc97c1a3b1f&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Domainname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;User&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;AttachStdin&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;AttachStdout&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;AttachStderr&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ExposedPorts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;8080/tcp&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Tty&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;OpenStdin&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;StdinOnce&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Env&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/lib/jvm/java-1.8-openjdk/jre/bin:/usr/lib/jvm/java-1.8-openjdk/bin&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;LANG=C.UTF-8&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;JAVA_HOME=/usr/lib/jvm/java-1.8-openjdk&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;JAVA_VERSION=8u212&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;JAVA_ALPINE_VERSION=8.212.04-r0&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Cmd&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;/bin/sh&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;-c&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;#(nop) &quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;ENTRYPOINT [\&quot;java\&quot; \&quot;-jar\&quot; \&quot;app.jar\&quot;]&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Image&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sha256:2b6a6388a9a8cc96d4b34abcf222b981a9abd86e999b33697ad63ffbe3eadafb&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Volumes&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;WorkingDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/app&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Entrypoint&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;java&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;-jar&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;app.jar&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;OnBuild&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Labels&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;testImage&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-02-14T09:01:30.341153211Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;docker_version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;20.10.7&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;history&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2019-05-11T00:07:03.358250803Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;created_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/bin/sh -c #(nop) ADD file:a86aea1f3a7d68f6ae03397b99ea77f2e9ee901c5c59e59f76f93adbb4035913 in / &quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2019-05-11T00:07:03.510395965Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;created_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/bin/sh -c #(nop)  CMD [\&quot;/bin/sh\&quot;]&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;empty_layer&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2019-05-11T01:32:11.0323736Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;created_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/bin/sh -c #(nop)  ENV LANG=C.UTF-8&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;empty_layer&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2019-05-11T01:32:12.044405061Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;created_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/bin/sh -c &#123; \t\techo &#x27;#!/bin/sh&#x27;; \t\techo &#x27;set -e&#x27;; \t\techo; \t\techo &#x27;dirname \&quot;$(dirname \&quot;$(readlink -f \&quot;$(which javac || which java)\&quot;)\&quot;)\&quot;&#x27;; \t&#125; &gt; /usr/local/bin/docker-java-home \t&amp;&amp; chmod +x /usr/local/bin/docker-java-home&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2019-05-11T01:32:12.271831312Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;created_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/bin/sh -c #(nop)  ENV JAVA_HOME=/usr/lib/jvm/java-1.8-openjdk&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;empty_layer&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2019-05-11T01:32:12.506789049Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;created_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/bin/sh -c #(nop)  ENV PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/lib/jvm/java-1.8-openjdk/jre/bin:/usr/lib/jvm/java-1.8-openjdk/bin&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;empty_layer&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2019-05-11T01:32:12.755877628Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;created_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/bin/sh -c #(nop)  ENV JAVA_VERSION=8u212&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;empty_layer&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2019-05-11T01:32:13.051281176Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;created_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/bin/sh -c #(nop)  ENV JAVA_ALPINE_VERSION=8.212.04-r0&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;empty_layer&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2019-05-11T01:32:17.777332452Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;created_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/bin/sh -c set -x \t&amp;&amp; apk add --no-cache \t\topenjdk8=\&quot;$JAVA_ALPINE_VERSION\&quot; \t&amp;&amp; [ \&quot;$JAVA_HOME\&quot; = \&quot;$(docker-java-home)\&quot; ]&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-02-14T08:58:24.52137399Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\&quot;skywater\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;created_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/bin/sh -c #(nop)  MAINTAINER \&quot;skywater\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;empty_layer&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-02-14T08:58:24.635972282Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\&quot;skywater\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;created_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/bin/sh -c #(nop)  LABEL description=testImage&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;empty_layer&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-02-14T08:58:25.287249679Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\&quot;skywater\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;created_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/bin/sh -c mkdir /tmp/logs&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-02-14T08:58:25.411811261Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\&quot;skywater\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;created_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/bin/sh -c #(nop) WORKDIR /app&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-02-14T09:01:30.110467033Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\&quot;skywater\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;created_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/bin/sh -c #(nop) COPY file:6b7274fe9bd12de07992236f81d0b51d17356a0cc3df9a153584843d4f73c3cf in /app/app.jar &quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-02-14T09:01:30.226144552Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\&quot;skywater\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;created_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/bin/sh -c #(nop)  EXPOSE 8080&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;empty_layer&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-02-14T09:01:30.341153211Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\&quot;skywater\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;created_by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/bin/sh -c #(nop)  ENTRYPOINT [\&quot;java\&quot; \&quot;-jar\&quot; \&quot;app.jar\&quot;]&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;empty_layer&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;os&quot;</span><span class="punctuation">:</span> <span class="string">&quot;linux&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;rootfs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;layers&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;diff_ids&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;sha256:f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;sha256:9b9b7f3d56a01e3d9076874990c62e7a516cc4032f784f421574d06b18ef9aa4&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;sha256:ceaf9e1ebef5f9eaa707a838848a3c13800fcf32d7757be10d4b08fb85f1bc8a&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;sha256:611c936fd113e79ca783c390c3abe2877ed041f70b9cf034749a269692b5acdc&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;sha256:265cbbb1847e96bd58716d5faebea214c613098ddca73253dd2d7229ddf80865&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;sha256:50522ab76e98bd51cedd8d7442cb7b74c7e455f6e6d6efc2158a78f3185ca5e8&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>可以发现其与OCI中的Image Configuration定义基本一致。</p>
<p>关注其中几个属性：</p>
<ul>
<li><p><strong>config</strong></p>
<p>参照我们最开始的Dockerfile，config里面对应了容器暴露的端口、Endpoint配置。</p>
</li>
<li><p><strong>history</strong></p>
<p><strong>empty_layer</strong>如果为true，则代表只是修改了配置信息，而未变动文件内容，所以并不需要生成新的layer以及对应hash，只要在这里记录配置操作即可。</p>
<p>首先，Dockerfile中定义了<code>From openjdk:8-jdk-alpine</code>，所以会有相关jdk1.8的一些指令。</p>
<p>我们每定义一次RUN、COPY等引起layer内容发生变化的操作时，就会生成新的layer，empty_layer属性也将会是默认的false。</p>
<p>从这里可以看出，Dockerfile指令与Docker Image内容形成了完整的联系。</p>
</li>
<li><p><strong>rootfs.diff_ids</strong></p>
<p>如果仔细观察diff_ids中的hash，发现无论是image manifest中的layers，还是说本地解压镜像文件的blobs中，都从未出现过这些ID。</p>
<p>其实，这些ID是layer归档文件的ID，而非layer压缩归档的ID。我们只要计算下layer.tar的hash值，就可以和这里对应上了。</p>
<p>譬如diff_ids[0] &#x3D; “sha256:f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81”</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@skywater springboot-demo]# sha256sum 1a58e6937db044ef6f2e2962a0dc7bef16a6c33fdfc5a0318c39092612a1bd1a/layer.tar</span><br><span class="line">f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81  1a58e6937db044ef6f2e2962a0dc7bef16a6c33fdfc5a0318c39092612a1bd1a/layer.tar</span><br></pre></td></tr></table></figure>

<p>可以看到该layer.tar的hash值就是<code>f1b5933...</code></p>
<p>实际在docker本地环境中的存储位置为<code>/var/lib/docker/image/overlay2/layerdb/sha256/f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81</code></p>
<p><strong>镜像是由layer构成的，layer文件以hash摘要寻址存放，所以，不同的image可以复用相同的layer。</strong></p>
</li>
</ul>
<h4 id="Filesystem-Layer"><a href="#Filesystem-Layer" class="headerlink" title="Filesystem Layer"></a>Filesystem Layer</h4><p>Image Manefest中除了Config信息，还有一块内容就是对Layers的描述。</p>
<p>OCI对Layer的mediaType定义与Docker中略有不同。</p>
<table>
<thead>
<tr>
<th>OCI</th>
<th>Docker</th>
</tr>
</thead>
<tbody><tr>
<td><code>application/vnd.oci.image.layer.v1.tar</code><br/><code>application/vnd.oci.image.layer.v1.tar+gzip</code><br/><code>application/vnd.oci.image.layer.v1.tar+zstd</code><br/><code>application/vnd.oci.image.layer.nondistributable.v1.tar</code><br/><code>application/vnd.oci.image.layer.nondistributable.v1.tar+gzip</code><br/><code>application/vnd.oci.image.layer.nondistributable.v1.tar+zstd</code></td>
<td><code>application/vnd.docker.image.rootfs.diff.tar.gzip</code></td>
</tr>
</tbody></table>
<p>可以通过解压layer.tar查看每一层的具体内容。</p>
<p>Docker容器实质上就是层与层的叠加，上方层可以通过覆盖的方式实现对下方层内容的增删改。最上方的层为读写层，会在从镜像转变为容器时生成，用于与宿主机频繁交互。其余下方的层只有只读权限，无法进行修改。</p>
<p>最后，需要有一个联合挂载系统（Docker一般使用overlay），将各个层联合起来，是指成为一个整体，用户视图将只存在一个。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Docker作为OCI最初的贡献者，随着时间演化，其具体实现与OCI标准略有不同，但互相兼容。均通过manifest list来查找合适的镜像文件，并采用分层结构，使用manifest来定义层的顺序与位置，并指向层配置文件。通过读取层配置文件，就可以获取到所有具体的层配置信息了。从而构建了完整的镜像内容架构，提供给具体镜像实现工具一个统一的流程规范。</p>
]]></content>
      <categories>
        <category>容器化</category>
        <category>Cloud Native</category>
      </categories>
      <tags>
        <tag>OCI</tag>
      </tags>
  </entry>
</search>
